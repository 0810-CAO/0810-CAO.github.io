<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML5</title>
    <url>/2020/07/03/HTML5/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meta标签：</span><br><span class="line">&lt;!--    网站关键字--&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;HTML5,前端,CSS&quot;&gt;</span><br><span class="line">&lt;!--    网站的描述--&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;京东JD.COM-专业的综合网上购物商城&quot;&gt;</span><br><span class="line">&lt;!--    一定时间后跳转--&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;3;url&#x3D;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;</span><br><span class="line">&lt;h1&gt;、&lt;p&gt;都是块标签（独占一行）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语义化标签：</span><br><span class="line">header 表示网页头部</span><br><span class="line">main 表示网页主体部分，只有一个</span><br><span class="line">footer 表示网页的底部</span><br><span class="line">aside 侧边栏，和主体有关的其他内容</span><br><span class="line">nav 网页中的导航</span><br><span class="line">article 一个独立的文章</span><br><span class="line">section 表示一个独立的区块</span><br><span class="line">div 表示区块，可代替上面  span行内元素</span><br><span class="line">hgroup 用来为标题分组，可以将一组相关的标题同时放入</span><br><span class="line">em 标签用于语音语调加重，不独占一行（行内元素）</span><br><span class="line">strong 标签表示强调，不独占一行（行内元素）</span><br><span class="line">&lt;blockquote&gt; 长引用，独占一行</span><br><span class="line">&lt;q&gt; 短引用，不独占一行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表：</span><br><span class="line">&lt;ul&gt;列 &lt;li&gt;行  无序列表  &lt;ol&gt;列 &lt;li&gt;行  有序列表</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">超链接：</span><br><span class="line">行内元素，在a标签可以嵌套除自身之外的任何元素，添加target属性来选择本页面还是跳转到新页面，_self、_blank(新)。1）&lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt; 可以添加路径跳转本地目录2）&lt;a href&#x3D;&quot;#&quot;&gt; 回到顶部 &lt;a id&#x3D;&quot;tips&quot; href&#x3D;&#39;#&#39;&gt;hello&lt;&#x2F;a&gt; ... &lt;a href&#x3D;&quot;#tips&quot;&gt;跳转到hello&lt;&#x2F;a&gt; 页内跳转。可以在任意标签添加id,然后使用类似&lt;a href&#x3D;&quot;#tips&quot;&gt;可以点击后跳转。3）&lt;a href&#x3D;&quot;javascript:;&quot;&gt;点击后不跳转，作为占位符&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片标签：</span><br><span class="line">img属于替换元素，alt属性对图片的描述，根据该描述来寻找图片。jpeg:支持颜色丰富、不支持透明效果、不支持动图。gif:支持颜色少、支持简单透明、支持动图。png：颜色丰富、复杂透明、不支持动图。webp：具备其他图片格式所有优点,缺点兼容性不好（IE）。base64：对图片进行编码，显示快。效果一样用小的、不一样用效果好的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内联框架：</span><br><span class="line">使用较少：&lt;iframe src&#x3D;&quot;&quot; width&#x3D;&quot; &quot;height&#x3D;&quot; &quot; frameborder&#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">音视频播放：</span><br><span class="line">1）一般不允许用户操作,&lt;audio src&#x3D;&quot;.&#x2F;林俊杰-黑夜问白天的副本.mp3&quot; controls&gt;&lt;&#x2F;audio&gt;,controls可以控制显示,autoplay自动播放（但大部分浏览器不会自动播放）,loop循环播放。 &lt;audio controls&gt;不好意思&lt;source src&#x3D;&quot;林俊杰-黑夜问白天的副本.mp3&quot;&gt;&lt;&#x2F;audio&gt;不支持播放可显示文字提示，并且可写多个类型音频防止不支持 2） &lt;video src&#x3D;&quot;&quot;&gt;&lt;&#x2F;video&gt;使用方式基本一致</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器：</span><br><span class="line">1）使用id选择器，在css中或者style中使用#id名&#123;&#125;来定义（不能重复）。使用class（类选择器）也可，使用class时可以同时起多个名字，只需空格隔开。复合选择器交集使用.名字 .名字  并集需要使用,即可（分组选择器）。</span><br><span class="line">2）父子元素、祖先后代元素，对于子元素可使用父&gt;子来指定。兄弟元素：使用 兄+弟来定义紧跟兄的元素。兄~弟 选择兄后面所有元素。</span><br><span class="line">3）属性选择：title&#x3D;&quot;&quot;属性，鼠标放置会出现提示文字，可以符合定义具有该属性的文字，&lt;p title&#x3D;&quot;a&quot;&gt;hello&lt;&#x2F;p&gt;  p[title]&#123;&#125;；p[title&#x3D;a]&#123;&#125;含有指定属性和属性值的元素；p[title^a]&#123;&#125;以a开头的具有title的元素；p[title$a]&#123;&#125;以a结尾的具有title的元素；p[title*a]&#123;&#125;以a开头或结尾的具有title的元素；</span><br><span class="line">4）伪类选择：ul&gt;li*5 tab键自动生成行列结构，可类似使用。不存在的类，描述一个元素的特殊状态，例如第一个元素、被点击的元素、鼠标移入的元素等。一般使用:开头，ul&gt;li:first-child&#123;&#125;设置第一个元素、ul&gt;li:last-child&#123;&#125;最后一个、ul&gt;li:nth-child(1)&#123;&#125;指定第几个元素，2n&#x2F;even偶数位，2n+1&#x2F;odd奇数位。根据所有的元素排序。first(last&#x2F;nth)-of-type 同类型的来排序。:not否定伪类，ul&gt;li:not(:nth-child(3))&#123;&#125;除去该元素，也可使用of-type.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪类：</span><br><span class="line">1）超链接伪类，前两个仅用于链接使用，后面两个适用于全部标签。&lt;a href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt; 定义未访问过的链接(正常的链接)颜色 a:link&#123;&#125;；a:visited&#123;&#125;访问过(但是该属性只能修改颜色，涉及隐私少使用);a:hover&#123;&#125;鼠标移入的状态显示;a:active&#123;&#125;鼠标点击显示。</span><br><span class="line">2）伪元素，p::first-letter&#123;&#125;对p标签首字母操作，p::first-line&#123;&#125;对第一行操作，p::selection&#123;&#125;给选中元素添加操作；div::before&#x2F;after&#123;content:&#39;【】&#39;;&#125;标签的最开始结束位置添加元素，结合content使用，该元素无法选中（经常使用）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">继承：</span><br><span class="line">仅存在于祖先子孙之间，背景、布局等相关不会继承。不同选择器选择同一个元素，设置不同颜色值时会冲突，此时由选择器优先级决定。内联样式-1000&gt;id-100&gt;类和伪类选择器-10&gt;元素选择器-1&gt;通配选择器(*)-0&gt;继承的样式，具有混合选择器优先级求和得到最大，注意累加不会超过上一级别，定义同一个选择器不同名，最后一个定义决定最终效果。如果在一个样式中添加!important会变成最高级别的样式显示，但注意慎用。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">em、rem、rgb、hls：</span><br><span class="line">em相对于元素的字体大小来计算、rem相对于根元素（HTML字体）的字体大小来计算</span><br><span class="line">rgb,三原色（255,255,255）rgba,添加一个不透明度（1-完全不透明，0-完全透明，.5-半透明）</span><br><span class="line">16进制rgb（ffffff）两位两位重复可简写</span><br><span class="line">hsl(不常用),(色相,饱和度,亮度)，取值均为0-100%</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档流：</span><br><span class="line">网页是一个多层的结构，通过css可以为每一层设置样式，用户只能看到最顶上一层，这些层中最下面一层为文档流，文档流是网页的基础，创建的元素都是在文档流中排列。元素两个状态：①在文档流中1）块元素，独占一行、默认宽度是父元素的全部、默认高度是被子元素撑开2）行内元素，span等，自左向右水平排列，一行中容纳不下行内元素会换行，被子元素撑开</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">盒子模型：</span><br><span class="line">1、css将页面中的所有元素都设置为一个矩形的盒子。盒子大小颜色可设置。盒子边框：border-width: 1px;(会有默认值)border-color: #d900ff;(默认黑色)border-style: solid、dashed(虚线);至少设置三个（可以同时设置，顺序不限border:1px #d900ff solid）同时设置四个边框不需要的设置border-right:none;即可。</span><br><span class="line">2、margin:设置上、左外边距移动自己，设置右下移动别人,可为负值</span><br><span class="line">3、水平布局：margin-left+border-left+padding-left+width+margin-right+border-right+padding-right&#x3D;父元素内容区的宽度。一般margin-right无用，不使用auto时浏览器会自动调整使等式成立。若上面七个值存在设置auto则自动调整设置为auto的值使等式满足。只有margin-left、margin-right、width可设置为auto</span><br><span class="line">4、垂直布局：overflow: visible(溢出)&#x2F;hidden(隐藏)&#x2F;scroll(滚动条);也可使用auto,自动给予滚动条，防止溢出。overflow-x&#x2F;y:分别对x、y处理</span><br><span class="line">5、外边距折叠：垂直方向相邻外边距会重叠。兄弟元素之间垂直外边距会取两者之间的较大值（都是正值），都是负值取绝对值最大的，兄弟之间重叠有利。父子元素，父子元素相邻上外边距，子元素会传递给父元素。可使用padding但是盒子会增大、也可以使外边距不相邻。暂时只有这两种方法。</span><br><span class="line">6、行内元素：不支持设置宽高（&lt;span&gt;、&lt;a&gt;等）,行内元素的padding、margin、border不会影响垂直方向的布局。可通过display来设置为块元素，inline-行内元素，block-块元素，inline-block-行内块元素（既可以设置长宽又不独占一行）少用。table-设置为表格，none-元素不在页面显示。visibility：设置元素的显示状态，visible-默认值，元素在页面中正常显示，hidden-元素在页面中隐藏不显示，但是占据页面位置。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器默认样式：</span><br><span class="line">list-style:none;去除无序列表点。重置样式表,reset.css-去除浏览器的默认样式,normalize.css-同一默认样式</span><br><span class="line">text-decoration:none 去除下划线</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">盒子大小、轮廓阴影、圆角：</span><br><span class="line">box-sizing:,设置盒子尺寸的计算方式，content-box,宽度和高度来设置内容区的大小。border-box,宽度和高度来设置整个盒子可见框的大小。</span><br><span class="line">outline:10px red solid 设置元素的轮廓线，与border不同之处在于该属性不会影响其他元素的位置布局，可直接覆盖其他的元素。多用于鼠标触及后的边框显示</span><br><span class="line">box-shadow:10px 10px 20px rgba(0,0,0,.3)，与outline一样都不会影响其他元素位置。可设置偏移量（否则会被上面元素覆盖）正值向右&#x2F;下，负值向左&#x2F;上 阴影的模糊半径（值越大）颜色（需使用透明度）</span><br><span class="line">border-top-left-radius:20px 40px 水平、垂直的半径 border:10px 20px 30px 40px(一般使用)设置三个值，则左上开始顺时针，对角相同。border-radius:50%;圆形</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浮动：</span><br><span class="line">使一个元素向其父元素的左或右侧移动。使用后从文档流中脱离、不占用位置、使用后可以按行排列、不会溢出父元素。此时浮动时不会找过前面其他的浮动元素(即是上方存在空间也不会超过兄弟元素),浮动在下方不会覆盖上方未浮动元素，反之则覆盖。float:none、left、right。</span><br><span class="line">浮动元素不会遮盖文字，文字自动环绕在图片周围。浮动后脱离文档流</span><br><span class="line">脱离文档流特点：块元素不再独占一行、块的宽高被内容撑开；行内元素（span）不支持设置宽高，脱离文档流后变为块元素。即块和行内不再区分。</span><br><span class="line">注意：使用float时，父元素的高度默认是被子元素撑开时，当子元素浮动后，会完全脱离文档流无法支撑父元素高度，导致高度塌陷。可以固定父元素高度，也可以使用BFC（使用后成为一个独立的布局区域，开启后不会被浮动元素覆盖、子父元素外边距不会重合(eg:使用margin-top父元素不会向下移动)、可包含浮动子元素）。开启方式：设置元素浮动（父元素）、设置为行内块元素、将元素的overflow设置为一个非visiable(父元素)即：overflow:hidden&#x2F;auto（建议使用）</span><br><span class="line">clear:清楚浮动元素对当前元素影响(不会被浮动元素覆盖),left:清除左侧影响,right:清除右侧影响,both清除两侧最大的影响。浏览器自动添加一个上外边距使位置不受影响。此时可以使用clear解决塌陷。</span><br><span class="line">after:解决高度塌陷:(浮动的元素).a::after&#123;clear:both;display:block;&#125;after为行内元素。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以上解决外边距重合及高度塌陷都会存在一定的缺陷，下面的可以更有效的解决</span><br><span class="line">clearfix:解决外边距重合及高度塌陷问题， .clearfix::before,.clearfix::after&#123;content: &#39;&#39;;display: table;clear: both;&#125;在父元素中类选择器添加clearfix即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定位：position</span><br><span class="line">相对定位：relative,可任意确定元素在界面的位置，开启相对定位后不设置偏移量(offset:top、bottom、left、right)就不会发生任何变化、参照元素在文档流中的位置定位的（参照之前自身的位置）、会提升元素的层级（可以覆盖未设置的元素）、不会脱离文档流、不会改变元素的性质块还是块</span><br><span class="line">绝对定位：absolute,不设置偏移量元素的位置不发生变化、元素从文档流中脱离、改变元素的性质行内变成块，块的宽高被内容撑开、会提升元素的层级、相对于包含块定义（离当前元素最近的开启定位（position不是static）的祖先块元素）若所有祖先都没开启则相对于html根元素</span><br><span class="line">固定定位：fixed,大部分同绝对定位类似，不同在于相对于视口（视口固定不动的）来定位，即绝对定位会随着网页滚动条移动，固定定位则不会。</span><br><span class="line">粘滞定位：sticky,类似相对定位，不同在于在元素到达某个位置会被固定在页面（兼容性不好，少用）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绝对定位最为常用，1）使用绝对定位水平方向和增加left+right。left、right也可设置为auto，设置谁为auto浏览器会自动为其填充宽度。需先绝对定位left、right为0后再设置margin-left&#x2F;right。2）垂直方向,绝对定位top&#x2F;bottom为0后再设置margin-top&#x2F;bottom:auto(此时可设置为水平的居中)。最后可结合两者设置为双方向居中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素层级：</span><br><span class="line">z-index,元素的层级相同则优先显示靠下的元素，祖先元素永远不会遮盖后代元素</span><br></pre></td></tr></table></figure>

<p>一、HTML、CSS基础、JavaScript语法基础。学完基础后，可以仿照电商网站（例如京东、小米）做首页的布局。</p>
<p>二、JavaScript语法进阶。包括：作用域和闭包、this和对象原型等。相信我，JS语法，永远是面试中最重要的部分。</p>
<p>三、jQuery、Ajax等。jQuery没有过时，它仍然是前端基础的一部分。</p>
<p>四、ES6语法。这部分属于JS新增的语法，面试必问。其中，关于 promise、async 等内容要尤其关注。</p>
<p>五、HTML5和CSS3。要熟悉其中的新特性。</p>
<p>六、canvas。面试时，有的公司不一定会问canvas，靠运气。如果时间不够，这部分的内容可以先不学。但如果你会，绝对属于加分项。</p>
<p>七、移动Web开发、Bootstrap等。要注意移动开发中的适配和兼容性问题。</p>
<p>八、前端框架：Vue.js和React。这两个框架至少要会一个。入门时，建议先学Vue.js，上手相对容易。但无论如何，同时掌握 Vue 和 React 才是合格的前端同学。</p>
<p>九、Node.js。属于加分项，如果时间不够，可以先不学，但至少要知道 node 环境的配置。</p>
<p>十、自动化工具：构建工具 Webpack、构建工具 gulp、CSS 预处理器 Sass 等。注意，Sass 比 Less 用得多，gulp 比 grunt 用得多。</p>
<p>十一、前端综合：HTTP协议、跨域通信、安全问题（CSRF、XSS）、浏览器渲染机制、异步和单线程、页面性能优化、防抖动（Debouncing）和节流阀（Throtting）、lazyload、前端错误监控、虚拟DOM等。</p>
<p>十二、编辑器相关。Sublime Text 是每个学前端的人都要用到的编辑器。另外，前端常见的IDE有两个：WebStorm 和 Visual Studio Code。WebStorm 什么都好，可就是太卡顿；VS Code就相对轻量很多。个人总结一下：用VS Code 的人越来越多，用 WebStorm 的人越来越少。</p>
<p>十三、TypeScript（简称TS）。ES 是 JS 的标准，TS 是 JS 的超集。TS属于进阶内容，建议把上面的基础掌握之后，再学TS。</p>
]]></content>
      <categories>
        <category>H5&amp;CSS</category>
        <category>basic</category>
      </categories>
  </entry>
  <entry>
    <title>1118 Birds in Forest</title>
    <url>/2020/06/29/1118-Birds-in-Forest/</url>
    <content><![CDATA[<p>Some scientists took pictures of thousands of birds in a forest. Assume that all the birds appear in the same picture belong to the same tree. You are supposed to help the scientists to count the maximum number of trees in the forest, and for any pair of birds, tell if they are on the same tree.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤104) which is the number of pictures. Then <em>N</em> lines follow, each describes a picture in the format:</p>
<p><em>K</em> <em>B</em>1 <em>B</em>2 … <em>B**K</em></p>
<p>where <em>K</em> is the number of birds in this picture, and <em>B**i</em>‘s are the indices of birds. It is guaranteed that the birds in all the pictures are numbered continuously from 1 to some number that is no more than 104.</p>
<p>After the pictures there is a positive number <em>Q</em> (≤104) which is the number of queries. Then <em>Q</em> lines follow, each contains the indices of two birds.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first output in a line the maximum possible number of trees and the number of birds. Then for each query, print in a line <code>Yes</code> if the two birds belong to the same tree, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">3 10 1 2</span><br><span class="line">2 3 4</span><br><span class="line">4 1 5 7 8</span><br><span class="line">3 9 6 4</span><br><span class="line">2</span><br><span class="line">10 5</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 10</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">10001</span>;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="built_in">max</span>]=&#123;<span class="number">0</span>&#125;,sum[<span class="built_in">max</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m,n,k;</span><br><span class="line"><span class="keyword">bool</span> exist[<span class="built_in">max</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findfather</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=fa[x])&#123;</span><br><span class="line">        x=fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fA=findfather(a);</span><br><span class="line">    <span class="keyword">int</span> fB=findfather(b);</span><br><span class="line">    <span class="keyword">if</span>(fA!=fB)&#123;</span><br><span class="line">        fa[fA]=fB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">max</span>;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id,temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k&gt;&gt;id;</span><br><span class="line">        exist[id]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">union</span>(id,temp);</span><br><span class="line">            exist[temp]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">max</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(exist[i]=<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> root=findfather(i);</span><br><span class="line">            sum[root]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numtree=<span class="number">0</span>,numbird=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">max</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(exist[i]==<span class="literal">true</span>&amp;&amp;sum[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            numtree++;</span><br><span class="line">            numbird+=sum[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;numtree&lt;&lt;<span class="string">" "</span>&lt;&lt;numbird;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,(findfather(a)==findfather(b))?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到每幅画的根节点，并不断的union，最终会形成一个大的集合。然后利用给出的exist(true)得到集合的数目以及鸟的个数，最后是直接根据给出的节点来比较其根节点是否一致即可。此类问题可使用并查集模板解决。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>并查集</category>
      </categories>
  </entry>
  <entry>
    <title>1119 Pre- and Post-order Traversals</title>
    <url>/2020/06/28/1119-Pre-and-Post-order-Traversals/</url>
    <content><![CDATA[<p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences, or preorder and inorder traversal sequences. However, if only the postorder and preorder traversal sequences are given, the corresponding tree may no longer be unique.</p>
<p>Now given a pair of postorder and preorder traversal sequences, you are supposed to output the corresponding inorder traversal sequence of the tree. If the tree is not unique, simply output any one of them.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 30), the total number of nodes in the binary tree. The second line gives the preorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first printf in a line <code>Yes</code> if the tree is unique, or <code>No</code> if not. Then print in the next line the inorder traversal sequence of the corresponding binary tree. If the solution is not unique, any answer would do. It is guaranteed that at least one solution exists. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3 4 6 7 5</span><br><span class="line">2 6 7 4 5 3 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">2 1 6 4 7 3 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">2 4 3 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">2 1 3 4</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node* lchild;</span><br><span class="line">    node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> pre[maxn],post[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> only=<span class="literal">true</span>;</span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> prel,<span class="keyword">int</span> prer,<span class="keyword">int</span> postl,<span class="keyword">int</span> postr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prel&gt;prer)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node* root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=pre[prel];</span><br><span class="line">    <span class="keyword">int</span> j,numleft=<span class="number">0</span>;<span class="comment">// 在后序中找到先序的第二个结点,其下标为j;numleft为左子树结点个数</span></span><br><span class="line">    <span class="keyword">for</span>(j=postl;j&lt;postr;j++)&#123;</span><br><span class="line">        numleft++;</span><br><span class="line">        <span class="keyword">if</span>(post[j]==pre[prel+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==postr<span class="number">-1</span>)&#123;<span class="comment">// 先序第二个结点等于后序倒数第二个结点,说明不唯一</span></span><br><span class="line">        only=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;lchild=create(prel+<span class="number">1</span>,prel+numleft,postl,j);</span><br><span class="line">    root-&gt;rchild=create(prel+numleft+<span class="number">1</span>,prer,j+<span class="number">1</span>,postr<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root-&gt;lchild);</span><br><span class="line">    in.push_back(root-&gt;data);</span><br><span class="line">    inorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;post[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node* root=create(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="built_in">printf</span>(only?<span class="string">"Yes\n"</span>:<span class="string">"No\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;in.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;in[i];</span><br><span class="line">        <span class="built_in">printf</span>((i+<span class="number">1</span>&lt;in.<span class="built_in">size</span>())?<span class="string">" "</span>:<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题需要考虑到只给出前序、后序，造成中序遍历不唯一的情况。已知前序第一个与后序最后一个为根节点，此时通过其相邻的节点来判断是否出现二义的状况。得到的子树默认为左子树。随后递归得到所有的lchild、rchild。最后中序遍历得到结果</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(12)</title>
    <url>/2020/06/21/C-%E5%BF%AB%E5%88%B7-12/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; //数组，一端开口，不易选择插入、删除</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt; //连续的空间,类似数组</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    A(<span class="keyword">int</span> temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"create function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;temp)</span><br><span class="line">    &#123;</span><br><span class="line">        m_i = temp.m_i;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"delete function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="built_in">string</span>, 5&gt; myarray = &#123;<span class="string">"I"</span>, <span class="string">"Love1Love2"</span>, <span class="string">"China"</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size()="</span> &lt;&lt; myarray.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    myarray[<span class="number">0</span>] = <span class="string">"it's a very long............"</span>;</span><br><span class="line">    myarray[<span class="number">4</span>] = <span class="string">"it's a very long............"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">string</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myarray.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *p = myarray[i].c_str();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"element="</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"index=%p\n"</span>, &amp;myarray[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"string index=%p\n"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p1 = <span class="string">"it's a very long............"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p2 = <span class="string">"it's a very long............"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p1 index=%p\n"</span>, p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p2 index=%p\n"</span>, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// func();</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;A&gt; myv;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; myv.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"caoacity="</span> &lt;&lt; myv.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    myv.reserve(<span class="number">10</span>); <span class="comment">//预留10个空间，预先直到容器会容纳多少元素，可以大量提高程序的运行效率</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; myv.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"caoacity="</span> &lt;&lt; myv.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"begin"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; myv.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"caoacity="</span> &lt;&lt; myv.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        myv.push_back(A(i)); <span class="comment">//A(i)构造、push_back拷贝构造</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; myv.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"caoacity="</span> &lt;&lt; myv.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"index is %d dizi is %p m_i=%d\n"</span>, i, &amp;myv[i], myv[i].m_i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = myv.<span class="built_in">begin</span>(); iter != myv.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myv.erase(iter);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"index is %d dizi is %p m_i=%d\n"</span>, i, &amp;myv[i], myv[i].m_i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> icount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = myv.<span class="built_in">begin</span>(); iter != myv.<span class="built_in">end</span>(); iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        icount++;</span><br><span class="line">        <span class="keyword">if</span> (icount == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myv.insert(iter, A(<span class="number">20</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"index is %d dizi is %p m_i=%d\n"</span>, i, &amp;myv[i], myv[i].m_i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>STL模板库</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(11)</title>
    <url>/2020/06/21/C-%E5%BF%AB%E5%88%B7-11/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">mutex resourse_mutex;</span><br><span class="line">once_flag g_flag; <span class="comment">//系统定义的标记</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>           //单例类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Createfunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">        this_thread::sleep_for(dura);</span><br><span class="line">        m_instance = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="keyword">static</span> Back back;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A()&#123;&#125;; <span class="comment">//私有化构造函数</span></span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> A *m_instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A *<span class="title">get_instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// if (m_instance == nullptr)//不代表m_instance没被new，可能A正准备new时跳转到B来执行</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     unique_lock&lt;mutex&gt; mymutex(resourse_mutex);</span></span><br><span class="line">        <span class="comment">//     if (m_instance == nullptr)</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//         m_instance = new A();</span></span><br><span class="line">        <span class="comment">//         static Back back;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        call_once(g_flag, Createfunc);<span class="comment">//其中一个线程需要等待另一个执行完毕后才可执行,效率可能没上方的高</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"running over"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Back</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Back()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ~Back()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (A::m_instance)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> A::m_instance;</span><br><span class="line">                A::m_instance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">A *A::m_instance = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"new thread is running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    A *a = A::get_instance();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"my thread is over"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设计模式，程序灵活、维护方便</span></span><br><span class="line">    <span class="comment">//单例设计模式（使用频率高）,整个项目中有某些特殊的类，属于该类的对象只能创建一个。</span></span><br><span class="line">    <span class="comment">// A *a = A::get_instance();</span></span><br><span class="line">    <span class="comment">// a-&gt;func();</span></span><br><span class="line">    <span class="comment">// A::get_instance()-&gt;func(); //该装载数据装载</span></span><br><span class="line">    <span class="comment">//在自己创建的线程来创建A这个单例类的对象，这种线程可能不止一个。此时get_instanc成员函数需要互斥</span></span><br><span class="line">    <span class="function">thread <span class="title">myobj1</span><span class="params">(mythread)</span></span>; <span class="comment">//两个线程都是一个入口函数，意味着会有两条通路同时执行mythread函数</span></span><br><span class="line">    <span class="function">thread <span class="title">myobj2</span><span class="params">(mythread)</span></span>;</span><br><span class="line">    myobj1.join();</span><br><span class="line">    myobj2.join();</span><br><span class="line">    <span class="comment">//call_once(),第二个参数是函数名，能够保证函数A只被调用一次。需要与once_flag这个标记结合使用</span></span><br><span class="line">    <span class="comment">//来标记对应的函数A是否执行，调用后这个标记被设计成已调用的状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; msgRecource; <span class="comment">//用于代表玩家发来的数据</span></span><br><span class="line">    mutex my_mutex;</span><br><span class="line">    condition_variable conv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myResource running"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function">unique_lock&lt;mutex&gt; <span class="title">guard</span><span class="params">(my_mutex)</span></span>;</span><br><span class="line">                msgRecource.push_back(i);</span><br><span class="line">                <span class="comment">//假如唤醒的线程正在执行一个事物，而不是卡在wait，此时调用唤醒无效</span></span><br><span class="line">                <span class="comment">// conv.notify_one(); //尝试将wait线程唤醒，执行完后</span></span><br><span class="line">                conv.notify_all();<span class="comment">//可以唤醒多个线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> commend = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">guard</span><span class="params">(my_mutex)</span></span>;</span><br><span class="line">            <span class="comment">//若第二个参数返回值为true则wait直接返回，若第二个参数lambda表达式返回值是false，那么wait将解锁互斥量并堵塞到本行，直到其他某个线程调用</span></span><br><span class="line">            <span class="comment">//notify_one()成员函数为止。如果没有第二个参数那么就跟第二个返回false效果一样</span></span><br><span class="line">            <span class="comment">//当其他线程用notify_one()将wait()原来堵塞状态唤醒，wait继续执行（1、尝试重新获取互斥锁，若获取不到则会卡住等待获取，否则就上锁</span></span><br><span class="line">            <span class="comment">//2）若wait存在第二个参数便判断这个lambda表达式，表达式为false就对互斥量解锁并堵塞，再次等待notiify_one。若表达式为true，wait返回继续执行，此时互斥锁还是被锁）</span></span><br><span class="line">            <span class="comment">//若没有第二个参数，则wait返回，继续执行</span></span><br><span class="line">            conv.wait(guard, [<span class="keyword">this</span>] &#123;</span><br><span class="line">                <span class="keyword">if</span> (!msgRecource.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            commend = msgRecource.front();</span><br><span class="line">            msgRecource.pop_front();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"getResource is running,get a element"</span>&lt;&lt;<span class="string">"thread id="</span>&lt;&lt;this_thread::get_id()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            guard.unlock();<span class="comment">//unique_lock的灵活性可以随时解锁，用来执行其他事务</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    A()&#123;&#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A msg;</span><br><span class="line">    <span class="function">thread <span class="title">myout</span><span class="params">(&amp;A::getResource, &amp;msg)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">myout2</span><span class="params">(&amp;A::getResource, &amp;msg)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">myin</span><span class="params">(&amp;A::myResource, &amp;msg)</span></span>;</span><br><span class="line">    myin.join();</span><br><span class="line">    myout.join();</span><br><span class="line">    <span class="comment">//condition_variable，一个类，等待一个条件达成，与互斥量配合，生成这个类的对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mythread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() end"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mythread3</span><span class="params">(<span class="keyword">int</span> mypar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mypar &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread3() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="keyword">return</span> mypar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread2</span><span class="params">(shared_future&lt;<span class="keyword">int</span>&gt; &amp;mypar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread2() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">auto</span> result = mypar.<span class="built_in">get</span>(); <span class="comment">//第二次get出错，由于get是一个移动语义，get后mypar中为空</span></span><br><span class="line">    <span class="comment">//使用share_future,赋值数据</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread2() end"</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread4</span><span class="params">(shared_future&lt;<span class="keyword">int</span>&gt; &amp;mypar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread4() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">auto</span> result = mypar.<span class="built_in">get</span>(); <span class="comment">//第二次get出错，由于get是一个移动语义，get后mypar中为空</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread4() end"</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">atomic&lt;<span class="keyword">int</span>&gt; count_sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// mutex my_mutex;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mycount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// my_mutex.lock();</span></span><br><span class="line">        count_sum++;</span><br><span class="line">        <span class="comment">// my_mutex.unlock;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">atomic&lt;<span class="keyword">bool</span>&gt; ifend = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ifend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ifend == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        this_thread::sleep_for(dura);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "main"</span></span><br><span class="line">    <span class="comment">//      &lt;&lt; "thread_id=" &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; f_int = async(launch::deferred, mythread);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "continue...." &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// // cout &lt;&lt; f_int.get() &lt;&lt; endl; //等待线程执行结束并返回结果</span></span><br><span class="line">    <span class="comment">// future_status status = f_int.wait_for(chrono::milliseconds(1000));</span></span><br><span class="line">    <span class="comment">// if (status == future_status::timeout) //超时表示线程还未执行完，就希望返回</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "timeout..........." &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else if (status == future_status::ready)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "thread success" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; f_int.get() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else if (status == future_status::deferred)</span></span><br><span class="line">    <span class="comment">// &#123; //延迟执行 async(launch::deferred,mythread); 使用get、wait线程执行。此时在主线程执行，没有创建一个子线程（很少用）</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "deferred" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; f_int.get() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "---------------" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// // cout &lt;&lt; "mythread() start" &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// // packaged_task&lt;int(int)&gt; mtyp(mythread3); //将函数mythread3包装</span></span><br><span class="line">    <span class="comment">// // thread t1(ref(mtyp), 10);                //线程直接开始执行</span></span><br><span class="line">    <span class="comment">// // t1.join();</span></span><br><span class="line">    <span class="comment">// // future&lt;int&gt; result = mtyp.get_future();</span></span><br><span class="line">    <span class="comment">// // thread t2(mythread2, ref(result));</span></span><br><span class="line">    <span class="comment">// // t2.join();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "mythread() start" &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// packaged_task&lt;int(int)&gt; mtyp(mythread3); //将函数mythread3包装</span></span><br><span class="line">    <span class="comment">// thread t1(ref(mtyp), 10);                //线程直接开始执行</span></span><br><span class="line">    <span class="comment">// t1.join();</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result1 = mtyp.get_future();</span></span><br><span class="line">    <span class="comment">// shared_future&lt;int&gt; result(move(result1));</span></span><br><span class="line">    <span class="comment">// // shared_future&lt;int&gt; result(mtyp.get_future());</span></span><br><span class="line">    <span class="comment">// thread t2(mythread2, ref(result));</span></span><br><span class="line">    <span class="comment">// t2.join();</span></span><br><span class="line">    <span class="comment">// thread t3(mythread4, ref(result));</span></span><br><span class="line">    <span class="comment">// t3.join();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//原子性</span></span><br><span class="line">    <span class="function">thread <span class="title">thread1</span><span class="params">(Ifend)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">thread2</span><span class="params">(Ifend)</span></span>; <span class="comment">//避免调用同一个函数出错</span></span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    ifend=<span class="literal">true</span>;</span><br><span class="line">    thread1.join();</span><br><span class="line">    thread2.join();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"exit"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//使用原子操作，执行不会被打断,互斥量是对一个代码段，而原子操作针对一个变量。atomic(类模板)</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; count_sum &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// int mythread(int a)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; "thread id=" &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     chrono::milliseconds dura(2000);</span></span><br><span class="line"><span class="comment">//     this_thread::sleep_for(dura);</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; a * 3 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     return a * 2;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mythread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">2000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main thread id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">future</span>&lt;<span class="keyword">int</span>&gt; result = async(mythread); <span class="comment">//当不使用额外参数时与同时使用二者一样。。。。更正前面课程</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = async(launch::deferred, mythread);</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = async(launch::async|launch::deferred, mythread);</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = async(launch::deferred, mythread); //延迟调用并不创建新线程，延迟到调用get、wait</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//launch:deferred:延迟调用   launch::async：强制创建新的线程</span></span><br><span class="line">    <span class="comment">//std::thread()如果系统资源紧张，创建线程可能失败。async称为创建一个异步任务</span></span><br><span class="line">    <span class="comment">//二者最大的不同在于async有时不会创建新线程，eg:调用get时直接调用线程入口函数</span></span><br><span class="line">    <span class="comment">//同时使用launch::async|launch:deferred,|意味着调用async的行为可能是两者之一，此时需要系统自行决定使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::thread()创建线程过多，会导致创建失败，系统报告异常</span></span><br><span class="line">    <span class="comment">//std::async()创建异步任务，很容易拿到入口函数返回值。并且一般不会崩溃，如果系统资源紧张，这种async不加额外参数的调用</span></span><br><span class="line">    <span class="comment">//不会创建新线程，而是后续谁调用get来请求结果。也可强制创建，但此时也会崩溃。一般线程数量不超过100-200</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">future</span>&lt;<span class="keyword">int</span>&gt; f_int = async(launch::deferred, mythread);</span><br><span class="line">    future_status status = f_int.wait_for(chrono::milliseconds(<span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">if</span> (status == future_status::timeout) <span class="comment">//超时表示线程还未执行完，就希望返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"timeout..........."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::<span class="built_in">ready</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f_int.<span class="built_in">get</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::deferred)</span><br><span class="line">    &#123; <span class="comment">//延迟执行 async(launch::deferred,mythread); 使用get、wait线程执行。此时在主线程执行，没有创建一个子线程（很少用）</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"deferred"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f_int.<span class="built_in">get</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello word"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>并发与多线程</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(10)</title>
    <url>/2020/06/21/C-%E5%BF%AB%E5%88%B7-10/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"coming function "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g_v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="string">" g_v="</span> &lt;&lt; g_v[<span class="number">0</span>] &lt;&lt; g_v[<span class="number">1</span>] &lt;&lt; g_v[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; msgRecource; <span class="comment">//用于代表玩家发来的数据</span></span><br><span class="line">    mutex my_mutex;</span><br><span class="line">    mutex my_mutex1;</span><br><span class="line">    mutex my_mutex2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myResource running"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 1)lock_guard&lt;mutex&gt; guard(my_mutex);</span></span><br><span class="line">                <span class="comment">// 1)my_mutex.lock();</span></span><br><span class="line">                <span class="comment">// 2）死锁my_mutex1.lock();</span></span><br><span class="line">                <span class="comment">// my_mutex2.lock();</span></span><br><span class="line">                <span class="built_in">std</span>::lock(my_mutex1,my_mutex2);</span><br><span class="line">                <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard1</span><span class="params">(my_mutex1,adopt_lock)</span></span>;</span><br><span class="line">                <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard2</span><span class="params">(my_mutex2,adopt_lock)</span></span>;</span><br><span class="line">                msgRecource.push_back(i); <span class="comment">//数字i即是收到命令，加到消息队列中</span></span><br><span class="line">                <span class="comment">// my_mutex2.unlock();</span></span><br><span class="line">                <span class="comment">// my_mutex1.unlock();</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 1)my_mutex.unlock();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getmsg</span><span class="params">(<span class="keyword">int</span> &amp;commend)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 1)lock_guard&lt;mutex&gt; guard(my_mutex); //lock_guard构造函数中执行lock(),析构函数中执行unlock()</span></span><br><span class="line">        <span class="comment">// 1)my_mutex.lock();</span></span><br><span class="line">        <span class="comment">// my_mutex2.lock();</span></span><br><span class="line">        <span class="comment">// my_mutex1.lock();</span></span><br><span class="line">        <span class="built_in">std</span>::lock(my_mutex1,my_mutex2);</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard1</span><span class="params">(my_mutex1,adopt_lock)</span></span>;<span class="comment">//adopt_lock标记已经lock，不需要在lock_guard再lock</span></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard2</span><span class="params">(my_mutex2,adopt_lock)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!msgRecource.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> commend = msgRecource.front();</span><br><span class="line">            msgRecource.pop_front();</span><br><span class="line">            <span class="comment">// 1)my_mutex.unlock();</span></span><br><span class="line">            <span class="comment">// my_mutex1.unlock();</span></span><br><span class="line">            <span class="comment">// my_mutex2.unlock();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// my_mutex1.unlock();</span></span><br><span class="line">        <span class="comment">// my_mutex2.unlock();</span></span><br><span class="line">        <span class="comment">// 1)my_mutex.unlock();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> commend = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> result = getmsg(commend);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"getResource is running"</span> &lt;&lt; commend &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"nullptr"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    A()&#123;&#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//多个线程执行顺序混乱，与操作系统内部运行调度机制有关（了解）</span></span><br><span class="line">    <span class="comment">//主线程等待所有子线程结束后执行</span></span><br><span class="line">    <span class="comment">// vector&lt;thread&gt; mythreads;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; 10; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     // mythreads.push_back(thread(myprint, i));</span></span><br><span class="line">    <span class="comment">//     mythreads.push_back(thread(print, i)); //只读数据共享可直接读</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// for (auto iter = mythreads.begin(); iter != mythreads.end(); iter++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     iter-&gt;join();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "everything is end" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//1）数据共享，有读有写，最简单每次仅有一个读或者写</span></span><br><span class="line">    <span class="comment">//游戏服务器</span></span><br><span class="line">    A msg;</span><br><span class="line">    <span class="function">thread <span class="title">myin</span><span class="params">(&amp;A::myResource, &amp;msg)</span></span>; <span class="comment">//第二个&amp;保证线程中对象一致</span></span><br><span class="line">    <span class="function">thread <span class="title">myout</span><span class="params">(&amp;A::getResource, &amp;msg)</span></span>;</span><br><span class="line">    myin.join();</span><br><span class="line">    myout.join();</span><br><span class="line">    <span class="comment">//共享数据操作时加锁，其他操作操作必须等待共享数据的线程解锁</span></span><br><span class="line">    <span class="comment">//互斥量（mutex）,类对象（锁），多个线程使用lock()加锁，只有一个线程可以成功，使用数量需要适宜</span></span><br><span class="line">    <span class="comment">//死锁，当两个互斥量顺序一致不会产生死锁</span></span><br><span class="line">    <span class="comment">//std::lock()函数模板，一次可以锁住两个及以上的互斥量，不会产生死锁，如果有一个互斥量未被锁住</span></span><br><span class="line">    <span class="comment">// 会一直等待所有都被锁住才向下进行，要么两个都锁住要么都不锁。若只锁住一个另一个未被锁立刻释放。</span></span><br><span class="line">    <span class="comment">//std::lock(my_mutex1,my_mutex2);</span></span><br><span class="line">    <span class="comment">//lock_guard&lt;mutex&gt; guard(my_mutex,adopt_lock);使用这样的写法，可以同时lock多个互斥量并且可省略unlock</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//但是同时一下lock不是很常用，建议每个互斥量lock,unlock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; msgRecource; <span class="comment">//用于代表玩家发来的数据</span></span><br><span class="line">    mutex my_mutex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">rtn_unique</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">temp</span><span class="params">(my_mutex)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;<span class="comment">//从函数返回一个局部unique对象，调用unique_lock移动构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myResource running"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// my_mutex.lock();</span></span><br><span class="line">                <span class="comment">// unique_lock&lt;mutex&gt; guard(my_mutex,adopt_lock);</span></span><br><span class="line">                <span class="function">unique_lock&lt;mutex&gt; <span class="title">guard</span><span class="params">(my_mutex, try_to_lock)</span></span>; <span class="comment">//尝试拿锁</span></span><br><span class="line">                <span class="comment">// if(guard.try_lock==true)</span></span><br><span class="line">                <span class="keyword">if</span> (guard.owns_lock()) <span class="comment">//判断是否拿到锁</span></span><br><span class="line">                &#123;</span><br><span class="line">                    msgRecource.push_back(i); <span class="comment">//数字i即是收到命令，加到消息队列中</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"can't catch lock"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getmsg</span><span class="params">(<span class="keyword">int</span> &amp;commend)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// unique_lock&lt;mutex&gt; guard(my_mutex); //lock_guard构造函数中执行lock(),析构函数中执行unlock()</span></span><br><span class="line">        unique_lock&lt;mutex&gt; guard=rtn_unique();</span><br><span class="line">        <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">10000</span>)</span></span>;</span><br><span class="line">        this_thread::sleep_for(dura); <span class="comment">//程序休息10秒</span></span><br><span class="line">        <span class="keyword">if</span> (!msgRecource.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> commend = msgRecource.front();</span><br><span class="line">            msgRecource.pop_front();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> commend = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> result = getmsg(commend);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"getResource is running"</span> &lt;&lt; commend &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"nullptr"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"end"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    A()&#123;&#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A msg;</span><br><span class="line">    <span class="function">thread <span class="title">myin</span><span class="params">(&amp;A::myResource, &amp;msg)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">myout</span><span class="params">(&amp;A::getResource, &amp;msg)</span></span>;</span><br><span class="line">    myin.join();</span><br><span class="line">    myout.join();</span><br><span class="line">    <span class="comment">//unique_lock是一个类模板，一般使用lock_guard(取代mutex的lock、unlock)</span></span><br><span class="line">    <span class="comment">//与lock_guard相比效率低、内存大，但是灵活(使用unique_lock后可以使用过程中unlock处理一些非共享后再加锁)</span></span><br><span class="line">    <span class="comment">//try_to_lock尝试用metex的lock去锁定这个mutex,但若没有锁定成功也会立即返回，不会阻塞。使用前提，不能够先lock</span></span><br><span class="line">    <span class="comment">//defer_lock不能够先lock，没有给mutex加锁，初始化一个没有加锁的mutex</span></span><br><span class="line">    <span class="comment">//unique_lock</span></span><br><span class="line">    <span class="comment">//成员函数1)try_lock()（与defer_lock配合使用）类似try_to_lock()</span></span><br><span class="line">    <span class="comment">//2)release()，返回所管理的mutex对象指针，并释放所有权. mutex *a=guard.release()需要自己a-&gt;unlock()</span></span><br><span class="line">    <span class="comment">//unique_lock&lt;mutex&gt; a(a1); unique_lock&lt;mutex&gt; a2(move(a));可以使用move移动所有权</span></span><br><span class="line">    <span class="comment">//另外unique_lock可以返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mythread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() end"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mythread3</span><span class="params">(<span class="keyword">int</span> mypar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mypar &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() end"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mythread2</span><span class="params">(<span class="keyword">int</span> mypar)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mypar &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">        this_thread::sleep_for(dura);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() end"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A()&#123;&#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;packaged_task&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; &gt; myvector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread4</span><span class="params">(promise&lt;<span class="keyword">int</span>&gt; &amp;temp,<span class="keyword">int</span> sale)</span></span>&#123;</span><br><span class="line">    sale++;</span><br><span class="line">    sale*=<span class="number">10</span>;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">dura</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line">    this_thread::sleep_for(dura);</span><br><span class="line">    <span class="keyword">int</span> result=sale;</span><br><span class="line">    temp.set_value(result);<span class="comment">//结果值保存到temp</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread5</span><span class="params">(<span class="built_in">future</span>&lt;<span class="keyword">int</span>&gt; &amp;temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> result=temp.<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"mythread2 result"</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//async是一个函数模板，用来启动一步任务，启动后返回一个future对象(类模板)</span></span><br><span class="line">    <span class="comment">//future对象中含有线程入口函数返回的结果，通过调用future的成员函数get获取结果。</span></span><br><span class="line">    <span class="comment">//提供一种访问异步操作结果的机制，即结果可能无法立即得到，但在线程执行完毕就能够得到结果（future对象中保存一个值，在将来得到）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main"</span>&lt;&lt; <span class="string">"thread_id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// future&lt;int&gt; f_int = async(mythread);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "continue...." &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// int def = 0;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f_int.get() &lt;&lt; endl; //等待线程执行结束并返回结果</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A a;</span></span><br><span class="line">    <span class="comment">// int temppar = 20;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "main"&lt;&lt; "thread_id=" &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; f_int2 = async(launch::async,&amp;A::mythread2, &amp;a, temppar); //第二个参数为对象引用，保证线程中使用同一个对象</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "continue...." &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// int def = 0;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f_int2.get() &lt;&lt; endl; //等待线程执行结束并返回结果</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// return 0;</span></span><br><span class="line">    <span class="comment">//可以额外向async()传递一个参数。该参数类型是launch(枚举类型)，来表达一些特殊目的</span></span><br><span class="line">    <span class="comment">//eg:1）launch:deferred:表示线程入口函数调用被延迟到future的wait()或get()函数调用时才执行。本例中表示若没调用get则线程直接未被创建</span></span><br><span class="line">    <span class="comment">//并且没有创建新线程，只是在主线程中调用的线程入口函数。2）launch::async,不需要get线程就自动启动执行，而且是新的子线程。async默认使用此标记</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//package_task:打包任务，类模板，模板参数为可调用对象，将各种可调用对象包装便于作为线程入口函数调用。</span></span><br><span class="line">    <span class="comment">// packaged_task&lt;int(int)&gt; mtyp(mythread3); //将函数mythread3包装</span></span><br><span class="line">    <span class="comment">// thread t1(ref(mtyp), 10); //线程直接开始执行</span></span><br><span class="line">    <span class="comment">// t1.join();</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = mtyp.get_future(); //future对象含有入口函数的返回结果,这里保存mythread3返回结果</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; result.get() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">packaged_task&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>)</span>&gt; <span class="title">mtyp</span><span class="params">([](<span class="keyword">int</span> mypar) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">cout</span> &lt;&lt; mypar &lt;&lt; <span class="built_in">endl</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() start"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        chrono::milliseconds dura(<span class="number">5000</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        this_thread::sleep_for(dura);</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"mythread() end"</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">return</span> <span class="number">5</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;)</span></span>;</span><br><span class="line">    <span class="comment">// thread t1(ref(mtyp), 10); //线程直接开始执行</span></span><br><span class="line">    <span class="comment">// t1.join();</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = mtyp.get_future(); //future对象含有入口函数的返回结果,这里保存mythread3返回结果</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; result.get() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//packaged_task包装起来的可调用对象可以直接调用</span></span><br><span class="line">    <span class="comment">// mtyp(100);</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = mtyp.get_future();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; result.get() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "hello word" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// myvector.push_back(move(mtyp));</span></span><br><span class="line">    <span class="comment">// packaged_task&lt;int(int)&gt; mtyp2;</span></span><br><span class="line">    <span class="comment">// auto iter=myvector.begin();</span></span><br><span class="line">    <span class="comment">// mtyp2=move(*iter);</span></span><br><span class="line">    <span class="comment">// myvector.erase(iter);</span></span><br><span class="line">    <span class="comment">// mtyp2(200);</span></span><br><span class="line">    <span class="comment">// future&lt;int&gt; result = mtyp2.get_future();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; result.get() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//promise,可以在一个线程中赋值，在另一个线程中去除结果</span></span><br><span class="line">    promise&lt;<span class="keyword">int</span>&gt; myprom;<span class="comment">//声明一个promise对象，保存值类型为int</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(mythread4,ref(myprom),<span class="number">44</span>)</span></span>;</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="comment">//获取结果</span></span><br><span class="line">    <span class="built_in">future</span>&lt;<span class="keyword">int</span>&gt; ful=myprom.get_future();</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(mythread5,ref(ful))</span></span>;</span><br><span class="line">    t3.join();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello word"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>并发与多线程</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(9)</title>
    <url>/2020/06/21/C-%E5%BF%AB%E5%88%B7-9/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//自己创建的线程也需要从一个函数开始执行</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running4"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running5"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    TA(<span class="keyword">int</span> i) : m_i(i) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"create function running"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TA(<span class="keyword">const</span> TA &amp;ta):m_i(ta.m_i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy function running"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running1"</span> &lt;&lt; m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running2"</span> &lt;&lt; m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running3"</span> &lt;&lt; m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread is running4"</span> &lt;&lt; m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~TA()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"delete function running"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 并发：两个或更多的任务同时发生，一个程序同时执行多个独立的任务。单核cpu某一时刻只能执行一个任务，</span></span><br><span class="line">    <span class="comment">// 由操作系统调度，每秒钟进行任务切换（上下文切换，需要时间开销（操作系统需要保存切换状态、执行进度）），并不是真的并发。</span></span><br><span class="line">    <span class="comment">// 多核cpu，可以实现真正的并发。使用原因：可以同时进行多个任务，提高性能</span></span><br><span class="line">    <span class="comment">// 进程：可执行程序运行便是进程</span></span><br><span class="line">    <span class="comment">// 线程：每个进程都有一个主线程（至少有一个线程），主线程唯一。可以理解成一条代码的执行通路，除主线程外，可以创建其他线程</span></span><br><span class="line">    <span class="comment">// （走别的路，可以去别的地方）每创建一个线程可干一个事。但每个线程都需要一个独立堆栈空间，耗费空间。</span></span><br><span class="line">    <span class="comment">// 多进程通信（同一电脑：管道、文件、消息队列、共享内存）、（不同电脑：socket）</span></span><br><span class="line">    <span class="comment">// 多线程并发：单个进程创建多个线程，一个进程中多个线程共享内存地址。全局变量、指针、引用都可以在线程之间传递</span></span><br><span class="line">    <span class="comment">// 多线程开销远小于多进程。共享内存会带来新问题：数据一致性。</span></span><br><span class="line">    <span class="comment">// 优先使用多线程。线程启动速度快、轻量级、系统资源开销少，但需要注意数据一致性问题</span></span><br><span class="line">    <span class="comment">// C++11新标准线程库.</span></span><br><span class="line">    <span class="comment">// 之前使用pthread_create();在linux创建线程、windows使用CreateThread();不能跨平台</span></span><br><span class="line">    <span class="comment">// 现在可以具备可移植性，</span></span><br><span class="line">    <span class="comment">//实际上是主线程执行，从main函数返回，则进程执行完毕</span></span><br><span class="line">    <span class="comment">//进程执行完毕的标志是主线程是否执行完毕，一般情况其他未完成的子线程也会被终止</span></span><br><span class="line">    <span class="comment">//一般情况想保持子线程运行则要求主线程保持运行</span></span><br><span class="line">    <span class="comment">// thread mytob(myprint); //创建线程、线程执行起点</span></span><br><span class="line">    <span class="comment">// //mytob.join();//thread：标准库中的类 1)join():阻塞主线程，主线程等待子线程执行完毕，然后两者汇合</span></span><br><span class="line">    <span class="comment">// mytob.detach();</span></span><br><span class="line">    <span class="comment">// //2)detach();分离，传统需要主线程等待子线程，然后在自己退出。此函数主线程可以与子线程分开执行不必等待。</span></span><br><span class="line">    <span class="comment">// //一旦执行此函数，与主线程关联的thread对象会失去主线程，子线程驻留在后台，被系统接管，负责清理监控</span></span><br><span class="line">    <span class="comment">// //3)joinable();判断是否可以成功使用join()或者detach()的，返回true或者false</span></span><br><span class="line">    <span class="comment">// if (mytob.joinable())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "true" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     mytob.join();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "false" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">int</span> myi = <span class="number">10</span>;</span><br><span class="line">    <span class="function">TA <span class="title">ta</span><span class="params">(myi)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">mytab3</span><span class="params">(ta)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    mytab3.<span class="built_in">detach</span>();<span class="comment">//调用detach后ta这个对象不在，是被复制到线程中，执行完主线程后被销毁，但被复制的对象存在</span></span><br><span class="line">    <span class="comment">//只要类中没有引用、指针就不会出问题。</span></span><br><span class="line">    <span class="comment">// mytab3.join();</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love china"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//此时有两个线程在跑，即是有一条路被堵住另一条也可运行</span></span><br><span class="line">    <span class="comment">//使用lamdba创建</span></span><br><span class="line">    <span class="keyword">auto</span> almbdad = [] &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"my thread is running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">thread <span class="title">mytab4</span><span class="params">(almbdad)</span></span>;</span><br><span class="line">    mytab4.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    A(<span class="keyword">int</span> a) : m_i(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"create function running"</span></span><br><span class="line">             &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;a) : m_i(a.m_i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy function running"</span></span><br><span class="line">             &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"delete function running"</span></span><br><span class="line">             &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">thread_work</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"thread_work function running"</span>&lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">"id="</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// void myprint1(const int i, const A &amp;p)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; &amp;p &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     return;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// void myprint(const int &amp;i, char *p)</span></span><br><span class="line"><span class="comment">// void myprint(const int i, const string &amp;p)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; i &lt;&lt; endl;         //i并不是&amp;，实际是值传递，那么即使主线程detach子线程，也可认为子线程安全</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; p.c_str() &lt;&lt; endl; //不安全，detach子线程存在问题</span></span><br><span class="line"><span class="comment">//     return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// void myprint2(const A &amp;p)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; &amp;p &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     return;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// void myprint3(A &amp;p)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     p.m_i=100;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; &amp;p &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     return;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// void myprint4(unique_ptr&lt;int&gt; p)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; *p &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     return;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1)</span></span><br><span class="line">    <span class="comment">// int temp = 10;</span></span><br><span class="line">    <span class="comment">// char tempc[] = "hello word";</span></span><br><span class="line">    <span class="comment">// // thread myth(myprint, temp, tempc);//tempc转换成string的时刻,事实上存在main执行完后系统才用tempc转string</span></span><br><span class="line">    <span class="comment">// //即tempc被回收之后还在使用</span></span><br><span class="line">    <span class="comment">// thread myth(myprint, temp, string(tempc)); //此时可以避免，直接将tempc转换成string</span></span><br><span class="line">    <span class="comment">// myth.detach();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "end" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//2)</span></span><br><span class="line">    <span class="comment">// int tem = 10;</span></span><br><span class="line">    <span class="comment">// int mysecond = 14;</span></span><br><span class="line">    <span class="comment">// thread mypr(myprint1, tem, A(mysecond)); //由于存在含一个参数构造函数，可以用于类型转换为A类型</span></span><br><span class="line">    <span class="comment">// mypr.detach();                           //直接执行end，此时可解释上方的tempc在main执行后转换,若此时强制转换为A类型(临时对象)可解决</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; "end" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//总结：使用detach时，当涉及int这种简单类型使用值传递，不要用引用等。若是传递类对象避免隐式类型转换,总之最好不使用detach</span></span><br><span class="line">    <span class="comment">//线程id，子线程、主线程id不同 this_thread::get_id()获取</span></span><br><span class="line">    <span class="comment">//3)</span></span><br><span class="line">    <span class="comment">// int t=20;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;"main thread id="&lt;&lt;this_thread::get_id()&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// thread mythread(myprint2,A(t));//使用临时对象，所有A类对象都在main函数中构建完毕，否则是在子线程构造</span></span><br><span class="line">    <span class="comment">// mythread.join();</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;"show"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//4)std::ref函数</span></span><br><span class="line">    <span class="comment">// A a(20);</span></span><br><span class="line">    <span class="comment">// thread a_to(myprint3,ref(a));//真正使用a来作为参数,可以修改引用中的值,也可省略const</span></span><br><span class="line">    <span class="comment">// a_to.join();</span></span><br><span class="line">    <span class="comment">//5)智能指针</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; myp(new int(20));</span></span><br><span class="line">    <span class="comment">// thread d(myprint4, move(myp));</span></span><br><span class="line">    <span class="comment">// d.join();</span></span><br><span class="line">    <span class="function">A <span class="title">mya</span><span class="params">(<span class="number">22</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">myg</span><span class="params">(&amp;A::thread_work,&amp;mya,<span class="number">18</span>)</span></span>;</span><br><span class="line">    myg.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>并发与多线程</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(8)</title>
    <url>/2020/06/19/C-%E5%BF%AB%E5%88%B7-8/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//shared_ptr使用场景，性能分析</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//1)</span></span><br><span class="line"><span class="comment">// shared_ptr&lt;int&gt; create(int value)&#123;</span></span><br><span class="line"><span class="comment">//     return make_shared&lt;int&gt;(value);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// shared_ptr&lt;int&gt;  myfunc(int value)&#123;</span></span><br><span class="line"><span class="comment">//     shared_ptr&lt;int&gt; ptemp=create(value);</span></span><br><span class="line"><span class="comment">//     return ptemp;//void 离开作用域ptemp会被自动释放，指向的内存也会释放</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//2)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CT</span>:</span> <span class="keyword">public</span> enable_shared_from_this&lt;CT&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;CT&gt; <span class="title">getmyself</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shared_from_this();<span class="comment">//通过这种方法返回智能指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1）</span></span><br><span class="line">    <span class="comment">// myfunc(33);//不用变量来接还是会被销毁</span></span><br><span class="line">    <span class="comment">// auto pt=myfunc(44);//使用变量接，返回的shared_ptr不会被销毁</span></span><br><span class="line">    <span class="comment">//2)</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; t3(new int); //使用这种</span></span><br><span class="line">    <span class="comment">// int *t = new int(20);</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; t2(t);</span></span><br><span class="line">    <span class="comment">// proc(t2);</span></span><br><span class="line">    <span class="comment">// // proc(shared_ptr&lt;int&gt;(t));//参数是一个临时的shared_ptr,用一个裸指针显示构造</span></span><br><span class="line">    <span class="comment">// *t2 = 90; //将普通裸指针绑定到智能指针后，内存需要shared_ptr来管理，裸指针不应再出现</span></span><br><span class="line">    <span class="comment">// //3)get,get返回的指针不能delete,否则会报错，也不能将get返回指针绑定到其他智能指针上</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; t4(new int(100));</span></span><br><span class="line">    <span class="comment">// int *e = t4.get();</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     shared_ptr&lt;int&gt; t5(e); //出错</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//4)不要把类对象指针（this）作为shared_ptr返回，改用enable_shared_from_this（实际上调用了lock方法，让shared_ptr指针计数加一，同时返回）</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;CT&gt; pct1(new CT);</span></span><br><span class="line">    <span class="comment">// // shared_ptr&lt;CT&gt; pct2=pct1;</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;CT&gt; pct3=pct1-&gt;getmyself();//此时返回的智能指针都是安全的</span></span><br><span class="line">    <span class="comment">//5）移动语义</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">20</span>))</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="built_in">move</span>(p1))</span></span>;<span class="comment">//移动构造新的智能指针，p1不再指向该对象（置空），引用计数依旧为1</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p3;</span><br><span class="line">    p3=<span class="built_in">move</span>(p2);<span class="comment">//p2指向空，p3指向该对象，引用计数依旧为1.移动构造函数比赋值（拷贝）构造函数快，移动赋值运算符也快</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//优先使用make_shared</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//unique_ptr常用操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    ~A()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">myfunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"hello"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//unique_ptr,独占式智能指针，同一时刻只能有一个unique_ptr指向这个对象</span></span><br><span class="line">    <span class="comment">//当unique_ptr被销毁其所指向的对象也被销毁</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; p;</span></span><br><span class="line">    <span class="comment">// if (p == nullptr)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "unique_ptr is nullptr" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">20</span>))</span></span>;</span><br><span class="line">    <span class="comment">//make_unique();函数</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; p4 = make_unique&lt;int&gt;(200);</span></span><br><span class="line">    <span class="comment">// auto p3 = make_unique&lt;int&gt;(100);</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">ps1</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"I love china"</span>))</span></span>;</span><br><span class="line">    <span class="comment">// unique_ptr&lt;string&gt; ps2(ps1);//该智能指针不支持拷贝，不支持赋值</span></span><br><span class="line">    <span class="comment">//1）移动语义</span></span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; ps3 = <span class="built_in">move</span>(ps1);</span><br><span class="line">    <span class="comment">//2）release();放弃对指针的控制权（切断智能指针和其指向对象之间的联系，返回裸指针</span></span><br><span class="line">    <span class="comment">//同时将智能指针置空，可以delete这个裸指针，也可以初始化另一个智能指针）</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">ps4</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"you love china"</span>))</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">ps5</span><span class="params">(ps4.<span class="built_in">release</span>())</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (ps4 == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ps4 is nullptr"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> *pd = ps5.<span class="built_in">release</span>(); <span class="comment">//此时需要delete，避免内存泄漏，成为裸指针</span></span><br><span class="line">    <span class="keyword">delete</span> pd;</span><br><span class="line">    <span class="comment">//3）reset();不带参数：释放指针所指对象并将指针置空</span></span><br><span class="line">    <span class="comment">// ps3.reset();//不会有内存泄漏</span></span><br><span class="line">    <span class="comment">//带参数：释放指针所指对象并指向新对象</span></span><br><span class="line">    ps3.reset(ps1.<span class="built_in">release</span>());</span><br><span class="line">    <span class="comment">//4）=nullptr;释放智能指针所指向的对象并置空指针</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">ps6</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"MINE"</span>))</span></span>;</span><br><span class="line">    ps6 = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">//5）指向一个数组</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;int[]&gt; ps7(new int[10]);//不常用数组</span></span><br><span class="line">    <span class="comment">// ps7[0] = 90;</span></span><br><span class="line">    unique_ptr&lt;A[]&gt; ps8(new A[10]);</span><br><span class="line">    <span class="comment">//6）get();返回智能指针中的裸指针</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">ps9</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"I love china"</span>))</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> *a=ps9.<span class="built_in">get</span>();<span class="comment">//得到裸指针，同前面一直不能delete,也不能初始化智能指针</span></span><br><span class="line">    *a=<span class="string">"This is china"</span>;</span><br><span class="line">    <span class="comment">//7）*解引用 如上方，对于数组无解引用</span></span><br><span class="line">    <span class="comment">//8）swap(); 同前面的shared_ptr只需改变为unique_ptr</span></span><br><span class="line">    <span class="comment">//9）智能指针名作为判断条件，也同前</span></span><br><span class="line">    <span class="comment">//10）转换成shared_ptr,如果unique_ptr为右值，可以将其赋值给shared_ptr</span></span><br><span class="line">    <span class="comment">//shared_ptr包含一个显示构造函数，可将用于右值unique_ptr转换为shared_ptr,接管原来unique_ptr对象</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; pss1=myfunc();</span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">uni</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"hello"</span>))</span></span>;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; pss2=<span class="built_in">move</span>(uni);<span class="comment">//此时uni为左值，使用move转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">tunip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"ME"</span>)); <span class="comment">//局部对象，系统生成临时unique_ptr，并调用移动构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydelete</span><span class="params">(<span class="built_in">string</span> *pdel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> pdel;</span><br><span class="line">    pdel = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尽管unique_ptr不能拷贝，但在即将销毁时可以从函数返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; ps;</span><br><span class="line">    ps = tunip(); <span class="comment">//临时对象直接构造在ps中，不接收则临时对象内存释放</span></span><br><span class="line">    <span class="comment">//unique_ptr指定删除器</span></span><br><span class="line">    <span class="comment">//1)</span></span><br><span class="line">    <span class="comment">// typedef void (*fp)(string *); //定义一个函数指针类型，名为fp</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;string,fp&gt; ps1(new string("You"),mydelete);</span></span><br><span class="line">    <span class="comment">//2)</span></span><br><span class="line">    <span class="keyword">using</span> fp2 = <span class="keyword">void</span> (*)(<span class="built_in">string</span> *); <span class="comment">//using定义一个函数指针类型</span></span><br><span class="line">    unique_ptr&lt;string, fp2&gt; ps2(new string("You"), mydelete);</span><br><span class="line">    <span class="comment">//3）lambda表达式,可理解成带有operator()类类型对象</span></span><br><span class="line">    <span class="keyword">auto</span> mydella = [](<span class="built_in">string</span> *pel) &#123;<span class="comment">//lambda表达式理解成class</span></span><br><span class="line">        <span class="keyword">delete</span> pel;</span><br><span class="line">        pel = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    unique_ptr&lt;string, decltype(mydella)&gt; p3(new string("You"), mydella);</span><br><span class="line">    <span class="comment">//注意与shared_ptr不同，unique_ptr删除器会影响unique_ptr类型，灵活性差，删除器不同，类型也不同</span></span><br><span class="line">    <span class="comment">//尺寸问题，unique_ptr尺寸与裸指针一致</span></span><br><span class="line">    <span class="built_in">string</span> *p;</span><br><span class="line">    <span class="keyword">int</span> lint=<span class="keyword">sizeof</span>(p);<span class="comment">//8字节</span></span><br><span class="line">    <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"Hello"</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> lun=<span class="keyword">sizeof</span>(up);<span class="comment">//8字节</span></span><br><span class="line">    <span class="keyword">int</span> ldu=<span class="keyword">sizeof</span>(p3);<span class="comment">//8字节,增加自定义删除器，尺寸可能增加，可能不增加。增加字节会影响效率（慎用）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//智能总结</span></span><br><span class="line">    <span class="comment">//智能指针的目的，为了帮助释放内存，防止造成内存泄漏</span></span><br><span class="line">    <span class="comment">//不要使用auto_ptr</span></span><br><span class="line">    <span class="comment">//选择unique_ptr（首选）速度快一般是一个指针指向一个对象、shared_ptr、weak_ptr是辅助shared_ptr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>指针</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(7)</title>
    <url>/2020/06/19/C-%E5%BF%AB%E5%88%B7-7/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// shared_ptr&lt;int&gt; func1(shared_ptr&lt;int&gt; &amp;sptr)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return sptr;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//共享式，引用计数，每个shared_ptr的拷贝都指向相同的内存（对象），只有最后一个指向该对象的shared_ptr指针不需要指向该对象的时候，</span></span><br><span class="line"><span class="comment">//这个shared_ptr才会去析构所指向的对象，每个shared_ptr都会记录有多少个指向相同的对象</span></span><br><span class="line"><span class="comment">//删除器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写函数模板来封装shared_ptr数组</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">make_shared_ptr</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;T&gt;(<span class="keyword">new</span> T[<span class="built_in">size</span>], default_delete&lt;T[]&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// auto p1 = make_shared&lt;int&gt;(100); //此时计数为1</span></span><br><span class="line">    <span class="comment">// auto p2(p1);                     //此时为2</span></span><br><span class="line">    <span class="comment">// // func(p2);                        //若使用变量为3，使用引用则为2.智能指针作为实参传递</span></span><br><span class="line">    <span class="comment">// auto p3 = func1(p2);//使用p3接收，此时增加计数为3</span></span><br><span class="line">    <span class="comment">// func1(p2);//没有变量接收临时智能指针，最终会变为2</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; *p1 &lt;&lt; " " &lt;&lt; *p2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用计数减少</span></span><br><span class="line">    <span class="comment">//a)改变指针指向</span></span><br><span class="line">    <span class="comment">// p3 = make_shared&lt;int&gt;(200); //改变p3指向计数为1,p1、p2使计数变为2</span></span><br><span class="line">    <span class="comment">// p2 = make_shared&lt;int&gt;(300); //p2改变指向计数为1,p1指向的对象计数变为1</span></span><br><span class="line">    <span class="comment">// p1 = make_shared&lt;int&gt;(400); //p1原内存释放,计数为1</span></span><br><span class="line">    <span class="comment">//b)shared_ptr离开作用域.如上面func1(p2);</span></span><br><span class="line">    <span class="comment">//c)当一个shared_ptr引用计数从1变为0，会自动释放，如上面的p1改变后释放内存</span></span><br><span class="line">    <span class="comment">// auto p4 = make_shared&lt;int&gt;(500);</span></span><br><span class="line">    <span class="comment">// auto p5 = make_shared&lt;int&gt;(500);</span></span><br><span class="line">    <span class="comment">// p4=p5;//此时p4改变指向p5，对象引用计数变为2，原来p4变为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//shared_ptr常用操作</span></span><br><span class="line">    <span class="comment">//1）use_count();返回多少个指针指向某个对象，主要用于调试</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; myp(new int(600));</span></span><br><span class="line">    <span class="comment">// int count=myp.use_count();</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; myp2(myp);</span></span><br><span class="line">    <span class="comment">// count=myp2.use_count();</span></span><br><span class="line">    <span class="comment">// //2)unique();是否该智能指针独占指向对象，只有一个指向一个对象返回true</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; my(new int(600));</span></span><br><span class="line">    <span class="comment">// if (my.unique())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"Yes"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">//3)reset();重置</span></span><br><span class="line">    <span class="comment">//a)不带参数,若p是唯一指向该对象的指针，释放p指向的对象并置空p</span></span><br><span class="line">    <span class="comment">//若不是，不释放p指向的对象，但指向该对象的引用计数减一，同时置空p</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; p(new int(700));</span></span><br><span class="line">    <span class="comment">// p.reset();</span></span><br><span class="line">    <span class="comment">// if (p==nullptr)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"p is nullptr"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// auto p2=p;</span></span><br><span class="line">    <span class="comment">// p.reset();</span></span><br><span class="line">    <span class="comment">//b)带参数,（一般是new出来的参数）若p是唯一指向该对象的指针，释放p指向的对象并指向新对象</span></span><br><span class="line">    <span class="comment">//若不是，不释放p指向的对象，但指向该对象的引用计数减一，同时指向新对象</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; p0(new int(700));</span></span><br><span class="line">    <span class="comment">// // p0.reset(new int(800));//释放原内存，指向新内存</span></span><br><span class="line">    <span class="comment">// auto p3=p0;</span></span><br><span class="line">    <span class="comment">// p0.reset(new int(800));</span></span><br><span class="line">    <span class="comment">// if (p0.unique())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"p0 is unique"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (p3.unique())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"p3 is unique"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// //空指针也可使用reset初始化</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; i;</span></span><br><span class="line">    <span class="comment">// i.reset(new int(10));//释放i指向对象，让i指向新对象</span></span><br><span class="line">    <span class="comment">//总之，带不带参数使用reset若是唯一指向指针则释放对象，不是则不释放引用计数减1。区别是带参数会将p指向新对象</span></span><br><span class="line">    <span class="comment">//4) * 解引用，获得p指向的对象</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; p10(new int(888));</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;*p10&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//5)get,考虑到有些函数（第三方）的参数需要用到一个内置裸指针</span></span><br><span class="line">    <span class="comment">//用来返回p中保存的指针(裸指针)。若只能指针释放了所指向的对象，那么返回的裸指针无效</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; myp10(new int(120));</span></span><br><span class="line">    <span class="comment">// int *p=myp10.get();</span></span><br><span class="line">    <span class="comment">// *p=20;</span></span><br><span class="line">    <span class="comment">//6）swap();,交换两个智能指针所指向的对象（很少使用）</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;string&gt; ps1(new string("You"));</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;string&gt; ps2(new string("Me"));</span></span><br><span class="line">    <span class="comment">// ps1.swap(ps2);</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;*ps1&lt;&lt;" "&lt;&lt;*ps2&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//7)=nullptr a)将所指向的对象引用计数减一，若计数为0则释放指向的对象b)将智能指针置空</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;string&gt; ps(new string("You"));</span></span><br><span class="line">    <span class="comment">// ps=nullptr;</span></span><br><span class="line">    <span class="comment">//8)智能指针名作为判断条件</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;string&gt; ps(new string("You"));</span></span><br><span class="line">    <span class="comment">// if (ps)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"dirction a thing"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//9)指定删除器以及数组问题(可忽略)</span></span><br><span class="line">    <span class="comment">//a)指定删除器 一定时机删除所指向对象。delete：将delete运算符作为默认析构方式</span></span><br><span class="line">    <span class="comment">//可以指定自己的删除器取代系统的</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pd</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">980</span>), Delete)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pd2</span><span class="params">(pd)</span></span>;</span><br><span class="line">    pd2.reset(); <span class="comment">//减一引用计数，pd2为nullptr</span></span><br><span class="line">    pd.reset();  <span class="comment">//调用删除器</span></span><br><span class="line">    <span class="comment">//删除器可以是lambda表达式</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int&gt; pd1(new int(980), [](int *p) &#123;</span></span><br><span class="line">    <span class="comment">//     delete[] p;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//有些情况，默认删除器无法处理，需要自定义（管理动态数组）</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;A&gt; pd1(new A[10],[](A *p)&#123;(数组很少用在动态指针中)</span></span><br><span class="line">    <span class="comment">//     delete []p;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可使用delete_default来做删除器</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;A&gt; pd1(new A[10],std::delete_default&lt;A&gt;());</span></span><br><span class="line">    <span class="comment">//可以将其封装成函数</span></span><br><span class="line">    <span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;T&gt; make_shared_ptr(size_t size)&#123;</span></span><br><span class="line">    <span class="comment">//     return shared_ptr&lt;T&gt;(new T[size],default_delete&lt;T[]&gt;());</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; pdm = make_shared_ptr&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>); <span class="comment">//即可调用函数</span></span><br><span class="line">    <span class="comment">//在shared_ptr中加上[]即可调用默认删除器</span></span><br><span class="line">    <span class="comment">// shared_ptr&lt;int[]&gt; pa(new int[10]);</span></span><br><span class="line">    <span class="comment">// pa[0]=10;//可以通过下标赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//补充：就算两个shared_ptr指定不同的删除器，只要其指向的对象类型相同，那么两个shared_ptr也属于同一类型</span></span><br><span class="line">    <span class="keyword">auto</span> lambda1 = [](<span class="keyword">int</span> *p) &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> lambda2 = [](<span class="keyword">int</span> *p) &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>), lambda1)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s2</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">200</span>), lambda2)</span></span>;</span><br><span class="line">    s2=s1;<span class="comment">//p2会先调用lambda2，释放自己指向的对象，然后指向p1所指对象，p1指向对象引用计数为2</span></span><br><span class="line">    <span class="comment">//最后还会调用lambda1释放s1、s2共同指向对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>weak_ptr</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//weak_ptr（弱引用）,类模板，智能指针，指向一个有shared_ptr管理的对象，但weak_ptr不控制所指向对象的生存期</span></span><br><span class="line">    <span class="comment">//即weak_ptr绑定到shared_ptr不会改变shared_ptr引用计算，weak_ptr不会增加或减少指向对象的引用计数</span></span><br><span class="line">    <span class="comment">//共享其他的shared_ptr所指向的对象，可以理解成监视shared_ptr（强引用）生命周期用的，是对其的扩充</span></span><br><span class="line">    <span class="comment">//不是一个独立的智能指针，不能用来操作所指向的资源。能够监视所指向对象是否存在</span></span><br><span class="line">    <span class="comment">// auto pi = make_shared&lt;int&gt;(100);</span></span><br><span class="line">    <span class="comment">// *pi=88;</span></span><br><span class="line">        <span class="comment">// weak_ptr&lt;int&gt; piw(pi);//piw弱共享pi,pi引用强计数不改变，但是弱引用计数会改变（但是不会影响对象生命周期）</span></span><br><span class="line">    <span class="comment">// weak_ptr&lt;int&gt; piw;</span></span><br><span class="line">    <span class="comment">// piw = pi; //赋值给一个weak_ptr,两者指向同一个内存对象</span></span><br><span class="line">    <span class="comment">// weak_ptr&lt;int&gt; piw2;</span></span><br><span class="line">    <span class="comment">// piw2 = piw;//pi是强引用，piw、piw2是弱引用</span></span><br><span class="line">       <span class="comment">//lock(),功能就是检查weak_ptr所指向的对象是否存在，</span></span><br><span class="line">       <span class="comment">//若存在，这个lock就可以返回一个指向该对象的shared_ptr（指向对象的强引用计数就会加一）</span></span><br><span class="line">       <span class="comment">//不存在，则lock返回一个空的shared_ptr</span></span><br><span class="line">    <span class="comment">// pi.reset();//释放pi所指向的对象并将pi置空</span></span><br><span class="line">    <span class="comment">// auto pi2=piw.lock();</span></span><br><span class="line">    <span class="comment">// if (pi2!=nullptr)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     *pi2=33;</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"fail"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//常用操作</span></span><br><span class="line">    <span class="comment">//1)use_count();获取与该弱指针共享对象的其他shared_ptr的数量（强引用数量）</span></span><br><span class="line">    <span class="comment">// auto s=make_shared&lt;int&gt;(1000);</span></span><br><span class="line">    <span class="comment">// auto s2(s);</span></span><br><span class="line">    <span class="comment">// weak_ptr&lt;int&gt; s3(s);</span></span><br><span class="line">    <span class="comment">// int sum=s3.use_count();</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;sum&lt;&lt;endl;//2</span></span><br><span class="line">    <span class="comment">//2)expired();用来判断所观测资源是否已经被释放</span></span><br><span class="line">    <span class="comment">// s.reset();</span></span><br><span class="line">    <span class="comment">// s2.reset();</span></span><br><span class="line">    <span class="comment">// if (s3.expired())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;"old"&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//3)reset();将该弱引用指针置空，不影响该对象的强引用，弱引用减一</span></span><br><span class="line">    <span class="comment">// s3.reset();</span></span><br><span class="line">    <span class="comment">//4)lock();</span></span><br><span class="line">    <span class="comment">// auto e=make_shared&lt;int&gt;(34);</span></span><br><span class="line">    <span class="comment">// weak_ptr&lt;int&gt; ew;</span></span><br><span class="line">    <span class="comment">// ew=e;//可用shared_ptr给weak_ptr赋值</span></span><br><span class="line">    <span class="comment">// if (!ew.expired())</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     auto e2=ew.lock();//临时强引用，执行后强引用计数恢复</span></span><br><span class="line">    <span class="comment">//     if (e2!=nullptr)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         int test;</span></span><br><span class="line">    <span class="comment">//         test=1;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     int test;</span></span><br><span class="line">    <span class="comment">//     test=10;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//尺寸问题，weak_ptr、shared_ptr尺寸一样大，是裸指针的2倍</span></span><br><span class="line">    weak_ptr&lt;<span class="keyword">int</span>&gt; y;</span><br><span class="line">    <span class="keyword">int</span> *o;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="keyword">sizeof</span>(o);<span class="comment">//裸指针</span></span><br><span class="line">    <span class="keyword">int</span> len1=<span class="keyword">sizeof</span>(y);<span class="comment">//两个裸指针,第一个指向的是这个智能指针指向的对象,第二个指向一个最大的数据结构（控制块）</span></span><br><span class="line">    <span class="comment">//控制块有1）所指对象的强引用计数2）所指对象的弱引用计数3）其他数据。自定义删除器等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>指针</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(6)</title>
    <url>/2020/06/17/C-%E5%BF%AB%E5%88%B7-6/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// class A</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// private:</span></span><br><span class="line"><span class="comment">// public:</span></span><br><span class="line"><span class="comment">//     int c_str;</span></span><br><span class="line"><span class="comment">//     A()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "create function" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"><span class="comment">//     ~A()&#123;</span></span><br><span class="line"><span class="comment">//         cout&lt;&lt;"xigou function"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"><span class="comment">//     void myfunc(int str)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; str &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">make</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="keyword">int</span>(value)); <span class="comment">//显式创建一个shared_ptr&lt;int&gt;，可直接返回智能指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1)内存管理</span></span><br><span class="line">    <span class="comment">// int *point = new int(110);</span></span><br><span class="line">    <span class="comment">// string *mystr1 = new string(5, 'a');</span></span><br><span class="line">    <span class="comment">// auto mystr2 = new auto(mystr1);//string** 慎用</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;mystr1-&gt;c_str()&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;(*mystr2)-&gt;c_str()&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// delete mystr1;//此时不能再delete mystr2(重复)</span></span><br><span class="line">    <span class="comment">// mystr1=nullptr;//建议在delete后置空</span></span><br><span class="line">    <span class="comment">// //const对象动态分配</span></span><br><span class="line">    <span class="comment">// const int *cp=new const int(100);</span></span><br><span class="line">    <span class="comment">// delete cp;</span></span><br><span class="line">    <span class="comment">// //智能指针，C++11，MFC应用程序一定程度（程序退出时）</span></span><br><span class="line">    <span class="comment">// vector&lt;int&gt; *pr = new vector&lt;int&gt;&#123;1, 2, 3, 4, 5&#125;;</span></span><br><span class="line">    <span class="comment">// delete pr;</span></span><br><span class="line">    <span class="comment">//2)</span></span><br><span class="line">    <span class="comment">// A *a = new A();//new（关键字/运算符）会调用构造函数，delete调用析构函数</span></span><br><span class="line">    <span class="comment">// delete a;</span></span><br><span class="line">    <span class="comment">//operator new()、operator delete()</span></span><br><span class="line">    <span class="comment">//new分配内存（通过operator new()）、调用构造函数初始化内存</span></span><br><span class="line">    <span class="comment">//delete释放内存（通过operator delete()）、调用析构函数</span></span><br><span class="line">    <span class="comment">// int *p=new int(100);</span></span><br><span class="line">    <span class="comment">// delete p;</span></span><br><span class="line">    <span class="comment">// int *c=new int[2];//泄漏8字节，此时不需要额外的4字节记录</span></span><br><span class="line">    <span class="comment">// A a1;</span></span><br><span class="line">    <span class="comment">// int i_len=sizeof(a1);//有对象就有地址，至少占一个字符</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;i_len&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// A *pa=new A[2]();//泄漏6字节，2字节类对象数组，还有4字节用来记录new数组元素的个数</span></span><br><span class="line">    <span class="comment">// delete[] pa;//此时构造、析构函数都执行两次，对应记录</span></span><br><span class="line">    <span class="comment">//3)智能指针，可以帮助delete</span></span><br><span class="line">    <span class="comment">//unique_ptr同一时间只有一个指针能够指向该对象，但所有权可以移交</span></span><br><span class="line">    <span class="comment">//shared_ptr（多个指针指向同一个对象，最后一个指针销毁时，对象被释放）、weak_ptr（辅助shared_ptr）</span></span><br><span class="line">    <span class="comment">//share_ptr释放对象时间。1）其被析构2）指向其他对象时</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; pi1;              <span class="comment">//指向int的空指针，pi1，但此时指向为空</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pi</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>))</span></span>; <span class="comment">//pi指向一个值为100的int型数据</span></span><br><span class="line">    <span class="comment">//shared_ptr&lt;int&gt; pi2=new int(100);//不行，=为隐式类型转换，智能指针为explicit</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; pi3 = make(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// (int *a=new int;shared_ptr&lt;int&gt; p(a);使用裸指针初始化，不建议)</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>)</span></span>; <span class="comment">//可转换成这样</span></span><br><span class="line">    <span class="comment">//make_shared函数，模板，可高效安全分配和使用shared_ptr</span></span><br><span class="line">    <span class="comment">//在动态内存中分配、初始化一个对象，然后返回一个指向此对象的shared_ptr</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p2 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);          <span class="comment">//shared_ptr指向一个值为100的整形内存</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p3 = make_shared&lt;<span class="built_in">string</span>&gt;(<span class="number">5</span>, <span class="string">'a'</span>); <span class="comment">//5个字符a生成字符串</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p4 = make_shared&lt;<span class="keyword">int</span>&gt;();<span class="comment">//指向一个保存值为0的int</span></span><br><span class="line">    p4=make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>);<span class="comment">//p4指向一个新int，int保存10，首先释放刚才指向值0，然后在指向此处</span></span><br><span class="line">    <span class="keyword">auto</span> p5=make_shared&lt;<span class="built_in">string</span>&gt;(<span class="number">5</span>,<span class="string">'a'</span>);<span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*p3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>指针</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>C++快刷(5)</title>
    <url>/2020/06/16/C-%E5%BF%AB%E5%88%B7-5/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//1)定义一个类型，前面的类型固定，后面可给定类型</span></span><br><span class="line"><span class="comment">// template &lt;typename st&gt; //C++98</span></span><br><span class="line"><span class="comment">// struct map_1</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     typedef std::map&lt;std::string, st&gt; type;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">str_map_t</span> = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, T&gt;; <span class="comment">//C++11,using用来给类型模板起名</span></span><br><span class="line"><span class="comment">//定义一个含有两个参数的返回整形指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A&gt;</span><br><span class="line"><span class="keyword">using</span> Func = <span class="keyword">int</span> (*)(A, A);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Realfunc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</span><br><span class="line"><span class="function">T1 <span class="title">sum</span><span class="params">(T2 i, T3 j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T1 result = i + j;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> un_int;</span><br><span class="line">    <span class="comment">// map&lt;string,int&gt; map;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="built_in">map</span> m;</span><br><span class="line">    m.insert(&#123;<span class="string">"first"</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    m.insert(&#123;<span class="string">"second"</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; map_s;</span><br><span class="line">    map_s m2;</span><br><span class="line">    m2.insert(&#123;<span class="string">"first"</span>, <span class="string">"second"</span>&#125;);</span><br><span class="line">    <span class="comment">//1)C++98</span></span><br><span class="line">    <span class="comment">// map_1&lt;int&gt;::type map1; //等价于map&lt;std::string, int&gt; map1;</span></span><br><span class="line">    <span class="comment">// map1.insert(&#123;"first", 1&#125;);</span></span><br><span class="line">    <span class="comment">//C++11</span></span><br><span class="line">    <span class="keyword">str_map_t</span>&lt;<span class="keyword">int</span>&gt; map2;</span><br><span class="line">    map2.insert(&#123;<span class="string">"second"</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    <span class="comment">//定义一个含有两个参数的返回整形指针</span></span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; pointfunc;  <span class="comment">//pointfunc函数指针变量、Func&lt;int&gt;函数指针类型</span></span><br><span class="line">    pointfunc = Realfunc; <span class="comment">//函数地址给函数指针</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pointfunc(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//2)显示指定模板参数</span></span><br><span class="line">    <span class="keyword">auto</span> result = sum&lt;<span class="keyword">double</span>,<span class="keyword">double</span>,<span class="keyword">double</span>&gt;(<span class="number">2000000000</span>, <span class="number">1000000001</span>);<span class="comment">//手工指定类型优先，不给double编译器指定</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特化、泛化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//1)全特化</span></span><br><span class="line"><span class="comment">// template &lt;typename T, typename U&gt;</span></span><br><span class="line"><span class="comment">// //当T和U这两个类型模板参数均为int时，可做一个特化版本,有特化必须有泛化</span></span><br><span class="line"><span class="comment">// struct TC</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     TC()&#123;</span></span><br><span class="line"><span class="comment">//         cout&lt;&lt;"fanhua create function"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     void func()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "fanhua version" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//全特化：所有类型模板参数都用具体的类型代表，此时template后面的&lt;&gt;为空</span></span><br><span class="line"><span class="comment">// template &lt; &gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;int, int&gt;</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void func()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "int_int special version" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt; &gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;double, int&gt;</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void func()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "double_int special version" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// //特化版本对编译器优先选择，当传参符合</span></span><br><span class="line"><span class="comment">// //特化成员函数</span></span><br><span class="line"><span class="comment">// template &lt; &gt;</span></span><br><span class="line"><span class="comment">// void TC&lt;double, double&gt;::func()&#123;</span></span><br><span class="line"><span class="comment">//     cout&lt;&lt;"double double version"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//2)局部特化</span></span><br><span class="line"><span class="comment">//模板参数数量上</span></span><br><span class="line"><span class="comment">// template &lt;typename T, typename U, typename W&gt;</span></span><br><span class="line"><span class="comment">// struct TC</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     TC()&#123;</span></span><br><span class="line"><span class="comment">//         cout&lt;&lt;"fanhua create function"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     void func()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "fanhua version" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt;typename U&gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;int,U,double&gt;</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void func()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "pian spacial version" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//模板参数范围上</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line"><span class="comment">// struct TC</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void functest()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "fanhua" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;const T&gt;</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void functest() //const</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "const special" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;T *&gt; //指针</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void functest()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "* special" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;T &amp;&gt; //指针</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void functest()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "&amp; special" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt;</span></span><br><span class="line"><span class="comment">// struct TC&lt;T &amp;&amp;&gt; //指针</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     void functest()</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         cout &lt;&lt; "&amp;&amp; special" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//函数模板 普通函数》特化》泛化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="comment">//泛化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T &amp;tempt, U &amp;tempu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"function fanhua "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tempt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tempu &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;tempt, <span class="keyword">double</span> &amp;tempu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"function tehua "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tempt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tempu &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;tempt, <span class="keyword">double</span> &amp;tempu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"chongzai function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1)</span></span><br><span class="line">    <span class="comment">// TC&lt;char,int&gt; techar;</span></span><br><span class="line">    <span class="comment">// TC&lt;int,int&gt; techar1;</span></span><br><span class="line">    <span class="comment">// techar.func();</span></span><br><span class="line">    <span class="comment">// TC&lt;double,double&gt; te;//特化成员函数</span></span><br><span class="line">    <span class="comment">// te.func();</span></span><br><span class="line">    <span class="comment">//2)1、模板参数数量上</span></span><br><span class="line">    <span class="comment">// TC&lt;int,int,double&gt; te;</span></span><br><span class="line">    <span class="comment">// te.func();</span></span><br><span class="line">    <span class="comment">//2、模板参数范围上</span></span><br><span class="line">    <span class="comment">// TC&lt;double&gt; td;</span></span><br><span class="line">    <span class="comment">// td.functest();</span></span><br><span class="line">    <span class="comment">// TC&lt;double *&gt; tp; //*</span></span><br><span class="line">    <span class="comment">// tp.functest();</span></span><br><span class="line">    <span class="comment">// TC&lt;const double *&gt; ctp; //*</span></span><br><span class="line">    <span class="comment">// ctp.functest();</span></span><br><span class="line">    <span class="comment">// TC&lt;const double&gt; cd; //const</span></span><br><span class="line">    <span class="comment">// cd.functest();</span></span><br><span class="line">    <span class="comment">// TC&lt;int &amp;&gt; tcz;</span></span><br><span class="line">    <span class="comment">// tcz.functest();</span></span><br><span class="line">    <span class="comment">//函数模板全特化</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = <span class="string">"I love china"</span>;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">10</span>;</span><br><span class="line">    func(p, q);</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.3f</span>;</span><br><span class="line">    func(q, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可变参模板、模板模板参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//一堆参数展开</span></span><br><span class="line"><span class="comment">//1)可变参函数模板,为一堆类型T（类型可以不同） arg称为一堆参数（类型可以不同）</span></span><br><span class="line"><span class="keyword">namespace</span> _nmp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(T... arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>...(arg) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>...(T) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//可变参数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归终止函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myfunc2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"digui stop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myfunc2</span><span class="params">(<span class="keyword">const</span> T &amp;firstorg, <span class="keyword">const</span> U &amp;... otherorg)</span> <span class="comment">//最适合参数展开，一个参数+一堆参数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; sizeof...(otherorg) &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"coming data"</span> &lt;&lt; firstorg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        myfunc2(otherorg...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        myfunc();</span><br><span class="line">        myfunc(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        myfunc(<span class="number">13</span>, <span class="number">15.4</span>);</span><br><span class="line">        myfunc2(<span class="number">10</span>);</span><br><span class="line">        myfunc2(<span class="number">10</span>, <span class="string">"abc"</span>, <span class="number">29</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace _nmp</span></span><br><span class="line"><span class="comment">//2)可变参类模板-------可忽略</span></span><br><span class="line"><span class="keyword">namespace</span> _nmp2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Arg&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myclass</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    &#125;; <span class="comment">//主模板</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> First, <span class="keyword">typename</span>... others&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myclass</span>&lt;First, others...&gt; :</span> <span class="keyword">private</span> myclass&lt;others...&gt; <span class="comment">//不断继承，偏特化</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        First m_i;</span><br><span class="line">        myclass() : m_i(<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"running,this"</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        myclass(First parf, others... paro) : m_i(parf), myclass&lt;others...&gt;(paro...)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"running"</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"m_i="</span> &lt;&lt; m_i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        myclass&lt;<span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">double</span>&gt; myeye;</span><br><span class="line">        myclass&lt;int, float, double&gt; myeye1(23, 12.6f, 44);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace _nmp2</span></span><br><span class="line"><span class="comment">//3)模板模板参数</span></span><br><span class="line"><span class="keyword">namespace</span> _nmp3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,</span><br><span class="line">              <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; <span class="keyword">typename</span> Container&gt; <span class="comment">//这是一个模板参数</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myclass</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        T m_i;</span><br><span class="line">        Container&lt;T&gt; mye; <span class="comment">//container作为一个类模板，必须先有模板模板参数</span></span><br><span class="line">        myclass()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                mye.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Q&gt; <span class="keyword">using</span> MT=<span class="built_in">vector</span>&lt;Q,allocator&lt;Q&gt;&gt;;<span class="comment">//类型别名</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        myclass&lt;<span class="keyword">int</span>,MT&gt;mycode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace _nmp3</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// _nmp::func();</span></span><br><span class="line">    _nmp2::func2();</span><br><span class="line">    _nmp3::func();<span class="comment">//有错误，未解决</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>C++快刷(4)</title>
    <url>/2020/06/16/C-%E5%BF%AB%E5%88%B7-4/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示实例化可忽略</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ca__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __ca__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myft</span><span class="params">(T temp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="comment">/* args */</span>)&#123;&#125;;</span><br><span class="line">    ~A()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt;</span><br><span class="line">    B(T1 v1, T1 v2);</span><br><span class="line">    <span class="comment">//函数模板、普通函数模板可以推断</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T2&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myft</span><span class="params">(T2 temp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myftp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    M m_tp;</span><br><span class="line">    B()&#123;&#125;;</span><br><span class="line">    ~B()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt;</span><br><span class="line">B&lt;M&gt;::B(T1 v1, T1 v2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func123</span><span class="params">(T v1, T v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project5.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;float&gt;;</span> <span class="comment">//显示实例化，声明//不会在本文件中生成一个实例化代码</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="keyword">void</span> <span class="title">func123</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1）普通类的成员函数模板</span></span><br><span class="line">    <span class="comment">//成员函数模板不可以是一个虚函数</span></span><br><span class="line">    A a;</span><br><span class="line">    a.myft(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//2）类模板的成员函数</span></span><br><span class="line">    <span class="comment">//只有使用时，模板才进行实例化</span></span><br><span class="line">    <span class="function">B&lt;<span class="keyword">float</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="function">B&lt;<span class="keyword">float</span>&gt; <span class="title">c</span><span class="params">(<span class="number">2.2</span>, <span class="number">3.3</span>)</span></span>;</span><br><span class="line">    <span class="function">B&lt;<span class="keyword">int</span>&gt; <span class="title">tempobj</span><span class="params">(<span class="number">2</span>,<span class="number">8</span>)</span></span>;<span class="comment">//模板的实例化定义只有一个，实例化声明可以有多个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project5.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;float&gt;;</span> <span class="comment">//显示实例化，定义</span></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="keyword">void</span> <span class="title">func123</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>;<span class="comment">//函数实例化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">B&lt;<span class="keyword">float</span>&gt; <span class="title">a1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>C++快刷(0)</title>
    <url>/2020/06/16/C-%E5%BF%AB%E5%88%B7-0/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt; //提供模板参数，能够表示的函数调用形式</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">biggernow</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    biggernow()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    biggernow(<span class="keyword">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"create function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~biggernow()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">echo</span><span class="params">(<span class="keyword">int</span> value)</span> <span class="comment">//调用参数与返回值与biggernow类中operator相同</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    biggernow big;</span><br><span class="line">    <span class="keyword">int</span> result = big(<span class="number">10</span>);<span class="comment">//此时调用（），等同于big.operator()(i)</span></span><br><span class="line">    <span class="comment">// biggernow bigger(10); //存在构造函数，调用构造函数</span></span><br><span class="line">    <span class="comment">// int a = bigger(-101); //调用（）</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// //只要重载()，那么()函数即可调用,但要考虑到构造函数</span></span><br><span class="line">    <span class="comment">// //2)echo与biggernow的重载()，调用参数与返回值相同，即调用形式相同</span></span><br><span class="line">    <span class="comment">//一个调用形式，对应一个函数类型:int(int)。表示接受一个int参数，返回一个int值</span></span><br><span class="line">    <span class="comment">// echo(10);</span></span><br><span class="line">    biggernow obj;</span><br><span class="line">    <span class="comment">// map&lt;string, int (*)(int)&gt; m; //函数指针名省略</span></span><br><span class="line">    <span class="comment">// m.insert(&#123;"mm", echo&#125;);      //函数名做地址</span></span><br><span class="line">    <span class="comment">// auto it = m.begin();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; (*it).first &lt;&lt; (*it).second &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//2）代表一个可调用对象，表示这个对象是：接受一个int参数，返回int类型</span></span><br><span class="line">    <span class="comment">// function&lt;int(int)&gt; f1 = echo;        //函数指针.此时echo有重载会出错</span></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; f2 = obj;         <span class="comment">//类对象，其类中有()重载</span></span><br><span class="line">    <span class="comment">// function&lt;int(int)&gt; f3 = biggernow(); //用类名生成一个对象，也是（）重载</span></span><br><span class="line">    <span class="comment">// f1(10);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f2(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; f3(-10) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//3)</span></span><br><span class="line">    <span class="comment">// map&lt;string, function&lt;int(int)&gt;&gt; ma;</span></span><br><span class="line">    <span class="comment">// map&lt;string, function&lt;int(int)&gt;&gt; ma = &#123;</span></span><br><span class="line">    <span class="comment">//     &#123;"ev",echo&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;"bt",obj&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;"ar",biggernow()&#125;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// ma["ev"](12); //调用echo函数</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;ma["bt"](10)&lt;&lt;endl;//调用obj对象的()操作符</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;ma["ar"](-10)&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span>(*fp)(<span class="keyword">int</span>)=echo;<span class="comment">//定义函数指针不会有二义性</span></span><br><span class="line">    fp(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// auto mylambda = [this, &amp;x, &amp;y] &#123; //无论使用this、&amp;、=都可以访问类成员</span></span><br><span class="line">        <span class="keyword">auto</span> mylambda = [=, &amp;x, &amp;y] &#123;</span><br><span class="line">            x += <span class="number">20</span>;</span><br><span class="line">            y += <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">return</span> m_i;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"x="</span> &lt;&lt; x &lt;&lt; <span class="string">"y="</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mylambda() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CT()&#123;&#125;;</span><br><span class="line">    ~CT()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//lambda表达式是一个匿名函数,并可以捕获一定范围内的变量</span></span><br><span class="line">    <span class="comment">//含有一个返回类型、一个参数列表、一个函数体，与函数不同的是，其可以在函数内部定义。</span></span><br><span class="line">    <span class="comment">//返回类型大多数可以省略，编译器可以自动推导。lambda参数可以有默认值</span></span><br><span class="line">    <span class="comment">// auto f=[](int a)-&gt;int&#123;</span></span><br><span class="line">    <span class="comment">//     return a+1;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="keyword">auto</span> f = [](<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> f1 = [](<span class="keyword">int</span> a = <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//没有参数时，参数列表及（）都可省略,但是捕获列表([])及函数体不能省略。通过捕获列表捕获一定范围内的变量</span></span><br><span class="line">    <span class="comment">//即1)[],不捕获任何变量,但不包括静态局部变量。也就是不在参数列表中定义的参数不能返回，但静态变量可以使用</span></span><br><span class="line">    <span class="comment">//2)[&amp;]，捕获外部作用域中所有变量，并作为引用在函数体内使用</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">auto</span> f5 = [&amp;] &#123;</span><br><span class="line">        i = <span class="number">3</span>; <span class="comment">//确保i在作用域内</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//3)[=],捕获外部作用域中所有变量，作为副本在函数中使用，只能使用值，但不能赋值</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">auto</span> f6 = [=] &#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//4)[this],一般用于类中，捕获当前类中this指针，让lambda表达式有和当前成员函数同样的访问权限</span></span><br><span class="line">    <span class="comment">//如果[]中已经使用了&amp;或者=，那么默认已经使用了this。捕获this目的是在lambda中使用当前类</span></span><br><span class="line">    CT ct;</span><br><span class="line">    ct.func(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//5)[变量名]，如果是多个变量名，用,分隔即可，[变量名]表示按值捕获变量名代表的变量，同时不捕获其他变量,也可以在变量名前加&amp;</span></span><br><span class="line">    <span class="comment">//6)[=,&amp;变量名]按值获取所有外部变量，但按引用捕获&amp;中所指的变量，</span></span><br><span class="line">    <span class="comment">//lambda表达式中的mutable（易变的）</span></span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> f8 = [=]() <span class="keyword">mutable</span> &#123;</span><br><span class="line">        m = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//lambda表达式的类型被称为闭包（函数内的函数，本质是运行时创建的对象）</span></span><br><span class="line">    <span class="keyword">auto</span> f2 = []() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> f3 = [] &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; f1() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f(10) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f2() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f3() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f5() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; f6() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//使用function、bind保存调用lambda表达式</span></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; fcl = [](<span class="keyword">int</span> tv) &#123; <span class="keyword">return</span> tv; &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fcl(<span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; fc2 = bind( <span class="comment">//第一个参数是函数指针，第二个参数是真正的函数参数</span></span><br><span class="line">        [](<span class="keyword">int</span> tv) &#123;</span><br><span class="line">            <span class="keyword">return</span> tv;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">20</span>);</span><br><span class="line">    fc2(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//不捕获任何变量的lambda表达式，即捕获列表为空，可以转换成一个普通的函数指针</span></span><br><span class="line">    <span class="keyword">using</span> functy = <span class="keyword">int</span> (*)(<span class="keyword">int</span>);</span><br><span class="line">    functy fp = [](<span class="keyword">int</span> tv) &#123; <span class="keyword">return</span> tv; &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fp(<span class="number">14</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//语法糖</span></span><br><span class="line">    <span class="comment">//int a[5];a[0]=1;*(a+1)=3;//a[1]=3;</span></span><br><span class="line">    <span class="comment">//for_each,函数模板</span></span><br><span class="line">    <span class="comment">// vector&lt;int&gt; myv=&#123;20,30,40,50&#125;;</span></span><br><span class="line">    <span class="comment">// for_each(myv.begin(),myv.end(),myfunc);</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myv = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    for_each(</span><br><span class="line">        myv.<span class="built_in">begin</span>(), myv.<span class="built_in">end</span>(), [&amp;sum](<span class="keyword">int</span> val) &#123;</span><br><span class="line">            sum += val;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//140</span></span><br><span class="line">    <span class="comment">//find_if,函数模板,用来查找</span></span><br><span class="line">    <span class="keyword">auto</span> result = find_if(myv.<span class="built_in">begin</span>(), myv.<span class="built_in">end</span>(), [](<span class="keyword">int</span> val) &#123; <span class="comment">//返回一个迭代器，指向第一个满足条件的元素，若不存在，则指向myv</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &gt; <span class="number">35</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//只要返回false,那么find_if就不停遍历myv,直到返回true或遍历完为止</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (result == myv.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"can't find"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"find it"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//lambda表达式优点，是代码简洁、灵活、开发效率更高、维护性更好</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;function&lt;<span class="keyword">bool</span>(<span class="keyword">int</span>)&gt;&gt; gv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// int tempvalue = rand() % 8;//静态变量</span></span><br><span class="line">    <span class="comment">// static int tempvalue = rand() % 8;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tempvalue = <span class="number">4</span>;</span><br><span class="line">    gv.push_back(</span><br><span class="line">        [](<span class="keyword">int</span> tv) &#123; <span class="comment">//静态变量</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; tempvalue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">// [=](int tv) &#123;</span></span><br><span class="line">            <span class="comment">// [&amp;](int tv) &#123;</span></span><br><span class="line">            <span class="keyword">if</span> (tv % tempvalue == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    tempvalue++;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; gv[0](20) &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_tempvalue = <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// gv.push_back(</span></span><br><span class="line">        <span class="comment">//     [=](int tv) &#123;</span></span><br><span class="line">        <span class="comment">//         // [&amp;](int tv) &#123;</span></span><br><span class="line">        <span class="comment">//         if (tv % m_tempvalue == 0)//this.m_tempvalue</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             return true;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         return false;</span></span><br><span class="line">        <span class="comment">//     &#125;);</span></span><br><span class="line">        <span class="comment">//此时可不依赖类</span></span><br><span class="line">        <span class="comment">// auto tempvaluecopy = m_tempvalue;</span></span><br><span class="line">        <span class="comment">// gv.push_back(</span></span><br><span class="line">        <span class="comment">//     [tempvaluecopy](int tv) &#123;</span></span><br><span class="line">        <span class="comment">//         // [&amp;](int tv) &#123;</span></span><br><span class="line">        <span class="comment">//         if (tv % tempvaluecopy == 0) //this.m_tempvalue</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             return true;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         return false;</span></span><br><span class="line">        <span class="comment">//     &#125;);</span></span><br><span class="line">        <span class="comment">//广义lambda捕获也可解决</span></span><br><span class="line">        gv.push_back(</span><br><span class="line">            [ab = m_tempvalue](<span class="keyword">int</span> tv) &#123;</span><br><span class="line">                <span class="comment">// [&amp;](int tv) &#123;</span></span><br><span class="line">                <span class="keyword">if</span> (tv % ab == <span class="number">0</span>) <span class="comment">//this.m_tempvalue</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    CT()&#123;&#125;;</span><br><span class="line">    ~CT()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// func();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; gv[0](20) &lt;&lt; endl; //&amp;捕获，此时调用是一个局部量执行完函数后会失效，使用=捕获即可</span></span><br><span class="line">    <span class="comment">//形参列表可以使用auto</span></span><br><span class="line">    <span class="comment">// CT *ct = new CT();</span></span><br><span class="line">    <span class="comment">// ct-&gt;add();</span></span><br><span class="line">    <span class="comment">// delete ct;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; gv[0](23) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//捕获，只针对在创建lambda表达式的作用域内可见的、非静态、局部变量</span></span><br><span class="line">    <span class="comment">//此时m_tempvalue是类的成员变量，不能捕获。使用=也就是使用了this,捕获指针值</span></span><br><span class="line">    <span class="comment">//静态局部变量不能被捕获，类似按照引用捕获</span></span><br><span class="line">    func();</span><br><span class="line">    gv[<span class="number">0</span>](<span class="number">20</span>);<span class="comment">//5</span></span><br><span class="line">    func();</span><br><span class="line">    gv[<span class="number">0</span>](<span class="number">20</span>);<span class="comment">//6</span></span><br><span class="line">    gv[<span class="number">1</span>](<span class="number">20</span>);<span class="comment">//6 每次调用增一</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>综合（1）</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>云计算课设</title>
    <url>/2020/06/15/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%BE%E8%AE%BE/</url>
    <content><![CDATA[<p>爬虫：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'正在加载'</span>+url)</span><br><span class="line">    headers=&#123;<span class="string">'User-Agent'</span>:<span class="string">'User-Agent:Mozilla/5.0'</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.content</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html,  <span class="string">"html.parser"</span>)</span><br><span class="line">    info = soup.find(<span class="string">'div'</span>,  class_=<span class="string">'wdetail'</span>)</span><br><span class="line">    rows=[]</span><br><span class="line">    tr_list = info.find_all(<span class="string">'tr'</span>)[<span class="number">1</span>:]       <span class="comment"># 使用从第二个tr开始取</span></span><br><span class="line">    <span class="keyword">for</span> index,  tr <span class="keyword">in</span> enumerate(tr_list):     <span class="comment"># enumerate可以返回元素的位置及内容</span></span><br><span class="line">        td_list = tr.find_all(<span class="string">'td'</span>)</span><br><span class="line">        date = td_list[<span class="number">0</span>].text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>)  <span class="comment"># 取每个标签的text信息，并使用replace()函数将换行符删除</span></span><br><span class="line">        dayweather = td_list[<span class="number">1</span>].text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).split(<span class="string">"/"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        nightweather = td_list[<span class="number">1</span>].text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).split(<span class="string">"/"</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        temperature_high = td_list[<span class="number">2</span>].text.strip().replace(<span class="string">"\n"</span>,  <span class="string">""</span>).split(<span class="string">"/"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        temperature_low = td_list[<span class="number">2</span>].text.strip().replace(<span class="string">"\n"</span>,  <span class="string">""</span>).split(<span class="string">"/"</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        windpower=td_list[<span class="number">3</span>].text.strip().replace(<span class="string">"\n"</span>,  <span class="string">""</span>).split(<span class="string">" "</span>)[<span class="number">0</span>].strip();</span><br><span class="line">        winddir = td_list[<span class="number">3</span>].text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).split(<span class="string">" "</span>)[<span class="number">1</span>].strip();</span><br><span class="line">        rows.append((date,dayweather,nightweather,temperature_high,temperature_low,windpower,winddir))</span><br><span class="line">    <span class="keyword">return</span> rows</span><br><span class="line">cities = [<span class="string">'lvyang'</span>,<span class="string">'nanyang'</span>,<span class="string">'pingdingshan'</span>,<span class="string">'puyang'</span>,<span class="string">'sanmenxia'</span>,<span class="string">'shangqiu'</span>,<span class="string">'xinxiang'</span>,<span class="string">'xinyang'</span>,</span><br><span class="line">          <span class="string">'xuchang'</span>,<span class="string">'zhengzhou'</span>,<span class="string">'zhoukou'</span>,<span class="string">'zhumadian'</span>]</span><br><span class="line">years = [<span class="string">'2011'</span>,<span class="string">'2012'</span>,<span class="string">'2013'</span>,<span class="string">'2014'</span>,<span class="string">'2015'</span>,<span class="string">'2016'</span>,<span class="string">'2017'</span>,<span class="string">'2018'</span>,<span class="string">'2019'</span>]</span><br><span class="line">months = [<span class="string">'01'</span>,<span class="string">'02'</span>,<span class="string">'03'</span>,<span class="string">'04'</span>,<span class="string">'05'</span>,<span class="string">'06'</span>, <span class="string">'07'</span>, <span class="string">'08'</span>,<span class="string">'09'</span>,<span class="string">'10'</span>,<span class="string">'11'</span>,<span class="string">'12'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> city <span class="keyword">in</span> cities:</span><br><span class="line">        <span class="keyword">with</span> open(city + <span class="string">'_weather.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.writer(f)</span><br><span class="line">            writer.writerow([<span class="string">'date'</span>,<span class="string">'dayweather'</span>,<span class="string">'nightweather'</span>,<span class="string">'temperature_high'</span>,<span class="string">'temperature_low'</span>,<span class="string">'windpower'</span>,<span class="string">'winddir'</span>])</span><br><span class="line">            <span class="keyword">for</span> year <span class="keyword">in</span> years:</span><br><span class="line">                <span class="keyword">for</span> month <span class="keyword">in</span> months:</span><br><span class="line">                    url = <span class="string">'http://www.tianqihoubao.com/lishi/'</span>+city+<span class="string">'/month/'</span>+year+month+<span class="string">'.html'</span></span><br><span class="line">                    html = get_one_page(url)</span><br><span class="line">                    content=parse_one_page(html)</span><br><span class="line">                    writer.writerows(content)</span><br><span class="line">                    print(city+year+month+<span class="string">' is OK!'</span>)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>C++快刷(3)</title>
    <url>/2020/06/14/C-%E5%BF%AB%E5%88%B7-3/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __Template__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __Template__</span></span><br><span class="line"><span class="comment">// template &lt;typename T&gt; //至少有一个参数，可以使用class代替typename,有多个参数用","分隔</span></span><br><span class="line"><span class="comment">// //有时需要指定模板实参,模板实参是系统推断出来，若不能推断则需要指定类型</span></span><br><span class="line"><span class="comment">// T add(T a1, T a2)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     T sum = a1 + a2;</span></span><br><span class="line"><span class="comment">//     return sum;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//非类型模板参数</span></span><br><span class="line"><span class="comment">// template &lt;int a, int b&gt;</span></span><br><span class="line"><span class="comment">// int Add()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int add = a + b;</span></span><br><span class="line"><span class="comment">//     return add;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//混合模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add = (<span class="keyword">int</span>)c + a + b;</span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不常用</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> l1, <span class="keyword">unsigned</span> l2&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;p1)[l1], <span class="keyword">const</span> <span class="keyword">char</span> (&amp;p2)[l2])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int add(int a1,int a2)&#123;</span></span><br><span class="line"><span class="comment">//     int sum=a1+a2;</span></span><br><span class="line"><span class="comment">//     return sum;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myvector</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> M *myinteator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    myvector();</span><br><span class="line">    myvector &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> myvector &amp;); <span class="comment">//在模板内部使用模板名不需要提供模板参数</span></span><br><span class="line">    <span class="comment">//myvector&lt;M&gt; &amp;operator=(const myvector&lt;M&gt; &amp;)</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">myinteator <span class="title">mybegin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">myinteator <span class="title">myend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">void</span> myvector&lt;M&gt;::myfunc()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line">myvector&lt;M&gt;::myvector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> M&gt;</span><br><span class="line">myvector&lt;M&gt; &amp;myvector&lt;M&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> myvector&lt;M&gt; &amp;)<span class="comment">//返回一个实例化的myvector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __Template1__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __Template1__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">10</span>&gt;</span><br><span class="line">class myarray</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T arr[<span class="built_in">size</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    myarray()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> <span class="built_in">size</span>&gt;</span><br><span class="line"><span class="keyword">void</span> myarray&lt;T, <span class="built_in">size</span>&gt;::func1()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">size</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project4.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myarray.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//可调用对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    tc()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"create function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    tc(<span class="keyword">const</span> tc &amp;t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~tc()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2）将函数指针作为函数的参数传递</span></span><br><span class="line"><span class="comment">// typedef int (*Type)(int, int); //定义函数指针类型，类型名为Type</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mf</span><span class="params">(<span class="keyword">int</span> tmp1, <span class="keyword">int</span> tmp2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tmp1 + tmp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void Tfunc(int i, int j, Type funcpoint)</span></span><br><span class="line"><span class="comment">// &#123; //funcpoint为函数指针</span></span><br><span class="line"><span class="comment">//     int result = funcpoint(i, j);</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; result &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//3)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt;</span><br><span class="line"><span class="comment">//template &lt;typename A,typename B=tc&gt;</span></span><br><span class="line"><span class="comment">//void testfunc(const A &amp;i, const A &amp;j, B point=tc())</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testfunc</span><span class="params">(<span class="keyword">const</span> A &amp;i, <span class="keyword">const</span> A &amp;j, B <span class="built_in">point</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">point</span>(i, j) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int a = 10;</span></span><br><span class="line">    <span class="comment">// int b = 20;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; add(a, b) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// int result = Add&lt;12, 13&gt;(); //显式指定模板参数，不能给变量，在编译时值就需要确定</span></span><br><span class="line">    <span class="keyword">int</span> result = Add&lt;<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">20</span>&gt;(<span class="number">30</span>); <span class="comment">//混合类型模板</span></span><br><span class="line">    <span class="keyword">int</span> result1 = charcmp(<span class="string">"test1"</span>, <span class="string">"test2"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//1)</span></span><br><span class="line">    myvector&lt;<span class="keyword">int</span>&gt; tempvec;     <span class="comment">//实例化类（类型），一旦被实例化，就会有自己的成员函数</span></span><br><span class="line">    myvector&lt;<span class="keyword">double</span>&gt; tempvec1; <span class="comment">//类模板的成员函数与这个类模板相同的实例参数</span></span><br><span class="line">    myvector&lt;<span class="built_in">string</span>&gt; tempvec2; <span class="comment">//需要将类模板成员函数的定义写在类模板定义的外边</span></span><br><span class="line">    <span class="comment">//定义在类模板之外的成员函数必须以关键字template开始，后接模板参数列表</span></span><br><span class="line">    <span class="comment">//同时在类名后面使用&lt;&gt;将模板参数列表里面所有参数列出来，若有多个模板参数，用，分隔</span></span><br><span class="line">    <span class="comment">//实例化的模板只有在使用的时候才会被实例化</span></span><br><span class="line">    <span class="comment">//------非类型模板,double、float、类类型不能做模板参数</span></span><br><span class="line">    myarray&lt;<span class="keyword">int</span>, <span class="number">100</span>&gt; myarray1;</span><br><span class="line">    myarray1.func1();</span><br><span class="line">    myarray&lt;<span class="keyword">int</span>&gt; myarray;</span><br><span class="line">    myarray.func1();</span><br><span class="line">    <span class="comment">//2）将函数指针作为函数的参数传递</span></span><br><span class="line">    <span class="comment">// Tfunc(2, 3, mf); //此处传递mf给函数指针然后调用</span></span><br><span class="line">    <span class="comment">//3)模板函数趣味使用</span></span><br><span class="line">    testfunc(<span class="number">3</span>, <span class="number">4</span>, mf);</span><br><span class="line">    <span class="comment">//4）类对象构造后，通过拷贝构造传入函数使用</span></span><br><span class="line">    tc tcobj;</span><br><span class="line">    testfunc(<span class="number">4</span>, <span class="number">5</span>, tcobj); <span class="comment">//此时会调用()来求和</span></span><br><span class="line">    <span class="comment">//testfunc(4,5,tc());//此时形成临时对象来直接构造函数执行函数</span></span><br><span class="line">    tcobj(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//4）默认模板参数</span></span><br><span class="line">    <span class="comment">// myarray&lt;int&gt; abc;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>C++快刷(2)</title>
    <url>/2020/06/13/C-%E5%BF%AB%E5%88%B7-2/</url>
    <content><![CDATA[<p>31、友元函数：在一个类中声明为友元函数，那么在函数中可以访问该类的所有成员.友元函数不属于类成员。友元类，将一个类定义为友元类，可以访问该类的所有成员。在A中定义B为友元类，则B可以访问A中所有成员。但友元不能继承，不具有传递性、单向。<br>32、友元成员函数：只有public才能成为其他类的友元成员函数。friend 类型 类名::函数名，该类中需要引入类的.h，而函数的定义类只需要加类声明（class A;）。特定函数调用类成员。<br>33、RTTI：运行时的类型识别。使用基类指针或引用检查指针或引用对象的实际派生类型。例如使用基类类型new一个子类指针，可以搞清楚指针的指向。使用：1）（ 不能将基类转成派生类，反之可以）使用dynamic_cast能够将基类的指针或引用安全转换为派生类指针或引用。eg:Human <em>ph = new Man;Man *p = dynamic_cast&lt;Man *&gt;(ph);2）typeid返回指针或引用所指对象的实际类型。eg:typeid(</em>ph).name()，可以用来比较两个指针是否指向同一类型对象eg：typeid(<em>ph)==typeid(</em>ph2)指向对象相同。注意基类中至少有一个虚函数方能使用，这三个都需要。只有虚函数的存在运算符才会使用指针或引用的动态类型。type_info：一个类，方法：name<br>const type_info &amp;tp=typeid(*ph);cout&lt;&lt;tp.name()&lt;&lt;endl;输出class Man。<br>34、“如果一个类中存在虚函数便会生成一个虚函数表，表中存在很多项，每一项都是一个指针，每个指针指向这个类每个虚函数的入口地址，但第一个项指向的时类关联的type_info对象“<br>35、通过子类的初始化列表给父类构造函数传递参数，只需要在初始化列表中加入，使用：类名(此处依据父类构造函数的参数数目)。eg:A(int i) : value(i){};  C(int i, int j, int k) : A(i), m_value(k){};<br>36、final，在类名之后添加可令此类不作基类。静态类型：变量声明时的类型，编译时已知。动态类型：指针或引用所代表的对象的类型，运行时可知。只有基类指针和引用才会出现静态、动态类型不同。就是基类new子类对象。<br>37、可以使用子类对象初始化父类对象。Man man;Human Human(man);当派生类为一个基类对象初始化、赋值时，只有该派生类的基类部分会被拷贝、赋值，即基类只会处理自身成员。<br>38、左值引用：必须初始化、必须绑定左值，不能绑定右值，但const可以绑定.eg:const int &amp;c=1。右值引用：必须绑定右值，主要用来绑定一些即将销毁的或临时对象，eg:int &amp;&amp;b=1;–i是返回左值、i–返回右值。临时对象都是右值，右值表达式的左侧是左值。函数的形参也是左值。<br>39、右值引用目的：1）为了提高程序效率，将拷贝对象变成移动对象（分配的内存不回收直接给到下一个对象使用）2）移动对象发生：应付移动构造函数、移动赋值运算符（实现移动）<br>40、move函数：将一个左值强制转换成一个右值。eg:int z = 10;int &amp;&amp;y = move(z);y = 15;这个右值引用表达式=两侧没有关系，值的改变不相互影响。<br>41、产生临时对象的情况和解决：1）使用引用给函数传递参数，可以少调用一次拷贝构造函数、析构函数，避免使用临时变量来修改值。2）定义对象与给对象初值放在一起。eg:A a(10,10);3）隐式类型转换保证函数调用成功，C++只会为const引用产生临时变量。有时可以使用一个构造函数将所需要的值赋予后返回，返回值使用定义的类型变量接管。eg：Temp Test(Temp &amp;A){return Temp(A.成员变量);}构造函数。此时返回的还是成员变量才可使用这种方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAN__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAN__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> :</span> <span class="keyword">public</span> Human</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Man()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//funcprot();</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running Man()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funMan</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running funMan()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">samenamefunc</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Human::samenamefunc();</span><br><span class="line">        Human::samenamefunc(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running Man samenamefunc(int)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">using</span> Human::samenamefunc;</span><br><span class="line">    <span class="comment">// void eat() override</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "Man eating varieties meat" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man.eat2()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~Man()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running ~Man()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">man</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"test"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">functionman</span><span class="params">(<span class="keyword">const</span> Man &amp;tempman)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __WOMEN__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __WOMEN__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span> :</span> <span class="keyword">public</span> Human</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Women()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//funcprot();</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running Women()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funWomen</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running funWomen()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// void eat()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "Women eating varieties vegetables" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Women.eat2()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~Women()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"running ~Women()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __TEST__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TEST__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project1.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionman</span><span class="params">(<span class="keyword">const</span> Man &amp;tempman)</span></span>&#123;</span><br><span class="line">    tempman.man();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project3.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// void func(const Man &amp;tempman)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     tempman.functionman();</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i) : value(i)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callCAF</span><span class="params">(<span class="keyword">int</span> x, A &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a.data = x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a.data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_value;</span><br><span class="line">    C(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k) : A(i), m_value(k)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Man man;</span></span><br><span class="line">    <span class="comment">// Man *pman=new Man();</span></span><br><span class="line">    <span class="comment">// delete pman;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Human *mv=new Man();</span></span><br><span class="line">    <span class="comment">// mv-&gt;eat2();</span></span><br><span class="line">    <span class="comment">// Human *wv=new Women();</span></span><br><span class="line">    <span class="comment">// wv-&gt;eat2();</span></span><br><span class="line">    <span class="comment">// delete mv;</span></span><br><span class="line">    <span class="comment">// Human *h = new Human();</span></span><br><span class="line">    <span class="comment">// Man *m = new Man();</span></span><br><span class="line">    <span class="comment">// // 父类指针new一个子类对象</span></span><br><span class="line">    <span class="comment">// Human *hm = new Man();</span></span><br><span class="line">    <span class="comment">// hm-&gt;eat();</span></span><br><span class="line">    <span class="comment">// delete hm;</span></span><br><span class="line">    <span class="comment">// Human *hw = new Women();</span></span><br><span class="line">    <span class="comment">// hw-&gt;eat();</span></span><br><span class="line">    <span class="comment">// hm-&gt;funHuman();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Man man;</span></span><br><span class="line">    <span class="comment">// man.funcpub();</span></span><br><span class="line">    <span class="comment">// man.samenamefunc(10);</span></span><br><span class="line">    <span class="comment">//=========================</span></span><br><span class="line">    <span class="comment">// Man man;</span></span><br><span class="line">    <span class="comment">// functionman(man);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// B b;</span></span><br><span class="line">    <span class="comment">// A a;</span></span><br><span class="line">    <span class="comment">// b.callCAF(2,a);</span></span><br><span class="line">    <span class="comment">// return 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Man *p=(Man *)(ph);</span></span><br><span class="line">    <span class="comment">// Human *ph = new Man;</span></span><br><span class="line">    <span class="comment">// Human &amp;q = *ph;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; typeid(*ph).name() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; typeid(q).name() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// Man *p = dynamic_cast&lt;Man *&gt;(ph);</span></span><br><span class="line">    <span class="comment">// if (p != nullptr)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     p-&gt;funMan();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Human *p1 = new Man;</span></span><br><span class="line">    <span class="comment">// const type_info &amp;tp = typeid(*p1);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; tp.name() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// C c(10,20,30);</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;&amp;y=i++;</span><br><span class="line">    i=<span class="number">60</span>;</span><br><span class="line">    y=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;y&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// int z = 10;</span></span><br><span class="line">    <span class="comment">// int &amp;a = z;</span></span><br><span class="line">    <span class="comment">// a=7;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;a&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// int &amp;&amp;y = 8;</span></span><br><span class="line">    <span class="comment">// y = 15;</span></span><br><span class="line">    <span class="comment">// y = z;</span></span><br><span class="line">    <span class="comment">// a = 20;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>42、移动构造函数：右值是为该函数服务的，将内存的所有者变更以提高程序效率。eg:Time(const Time &amp;&amp;temp);1）数据移动后断绝原对象与内存的关系2）移动后原对象可被销毁尽量不去使用。示例：//移动构造函数 noexcept通知标准库构造函数不抛出异常 将原对象指向的内存m_pb,直接让临时对象指向这段内存A(A &amp;&amp;temp) noexcept : m_pb(temp.m_pb){temp.m_pb = nullptr;//断绝关系cout &lt;&lt; “A create-move function running” &lt;&lt; endl;}其中m_pb为B类型对象，如果调用则首先在类A中定义static A getA(){A a;return a;}然后A c = getA();A a(move(c));使用move来转换左值。</p>
<p>43、尽量给类添加移动构造函数和移动赋值运算符（需要大量内存的类）、将原对象指向的内存置空，以便可以随时销毁、若没有移动函数会调用拷贝函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"project.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_bm;</span><br><span class="line">    B() : m_bm(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B create function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    B(<span class="keyword">const</span> B &amp;temp) : m_bm(temp.m_bm)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B copy function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~B()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B delete function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    B *m_pb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_pb(<span class="keyword">new</span> B())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A create function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用类B构造函数来初始化A</span></span><br><span class="line">    A(<span class="keyword">const</span> A &amp;temp) : m_pb(<span class="keyword">new</span> B(*(temp.m_pb)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A copy function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动构造函数  noexcept通知标准库构造函数不抛出异常</span></span><br><span class="line">    A(A &amp;&amp;temp) <span class="keyword">noexcept</span> : m_pb(temp.m_pb) <span class="comment">//将原对象指向的内存m_pb,直接让临时对象指向这段内存</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp.m_pb = <span class="literal">nullptr</span>; <span class="comment">//断绝关系</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A create-move function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝赋值运算符</span></span><br><span class="line">    A &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> A &amp;src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> m_pb;               <span class="comment">//删除自己的内存,初始化会分配内存</span></span><br><span class="line">        m_pb = <span class="keyword">new</span> B(*(src.m_pb)); <span class="comment">//重新分配内存</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A copy = function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动赋值运算符</span></span><br><span class="line">    A &amp;<span class="keyword">operator</span>=(A &amp;&amp;src) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> m_pb;</span><br><span class="line">        m_pb = src.m_pb;    <span class="comment">//对方内存直接拿过来</span></span><br><span class="line">        src.m_pb = <span class="literal">nullptr</span>; <span class="comment">//切断关联</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A copy-move = function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_pb;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A delete function running"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> A <span class="title">getA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">return</span> a;<span class="comment">//临时对象据说会调用拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// B *pb = new B();</span></span><br><span class="line">    <span class="comment">// pb-&gt;m_bm = 100;</span></span><br><span class="line">    <span class="comment">// B *pb2 = new B(*pb);</span></span><br><span class="line">    <span class="comment">// delete pb;</span></span><br><span class="line">    <span class="comment">// delete pb2;</span></span><br><span class="line">    <span class="comment">//____________</span></span><br><span class="line">    <span class="comment">// A c = getA();</span></span><br><span class="line">    <span class="comment">// A a(c);</span></span><br><span class="line">    <span class="comment">// A a(move(c));</span></span><br><span class="line">    A f=getA();</span><br><span class="line">    A a2;</span><br><span class="line">    a2=f;</span><br><span class="line">    a2=<span class="built_in">move</span>(f);<span class="comment">//移动赋值后f不要再使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>44、使用using A::A可以继承类A的构造函数，若A构造函数有默认值则可以调少一个参数的构造函数，基类有多个构造函数也可全部继承但若派生类存在于基类相同的构造函数的参数列表则覆盖继承的，其与B(int i, int j, int k) : A(i, j, k) {}类似。一个类只继承基类的构造函数，默认、拷贝、移动构造函数不能继承。若子类只有using则编译器会生成默认构造函数。</p>
<p>45、静态成员变量：若不使用可以不用定义，否则需要。eg:static int m_static;int Grand::m_static = 5;可以给初值，不给则默认0，可以在main中使用类名::m_static=值，来修改。</p>
<p>46、1）派生类对象将构造并初始化所有基类子对象、派生类的构造函数初始化列表值初始化他的直接基类，依次初始化、构造函数调用顺序与public 类 这样的顺序有关，在前先调用，调用有父类先调用父类。2）若父类存在默认构造函数，可在初始化列表中省略调用该类初始化，会自动调用默认函数，即会隐式初始化基类。3）如果一个类从他的基类中继承了相同的构造函数，这个类必须为该函数定义自己的函数。eg:using A::A;using B::B;C(int v):A(v),B(v){};</p>
<p>47、虚继承：可以通过子类（C）的直接基类（B、B1），两次继承爷爷类(A)，因为父类都继承爷爷类。此时会导致空间占用、A中成员调用冲突。此时可使用（virtual在public前后都可 父类）让B、B1虚继承A，此时A为虚基类。1）虚继承需要孙类初始化爷爷类，若C存在子类则Grand需要靠其子类初始化即需要最底层类初始化虚基类。2）初始化顺序，虚基类最先初始化，然后按照初始化列表顺序初始化。3）多个虚基类通过初始化列表寻找类的虚基类出现顺序。总结：虚继承不建议使用，在简单、不易出现二义性，能用单继承就不用多继承。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grand</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_valuegrand;</span><br><span class="line">    Grand()&#123;&#125;;</span><br><span class="line">    Grand(<span class="keyword">int</span> i) : m_valuegrand(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Grand create function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~Grand()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Grand delete function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_valuegrand &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_static;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Grand::m_static = <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Grand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_valuea;</span><br><span class="line">    A(<span class="keyword">int</span> i) : Grand(i), m_valuea(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A create function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~A()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A delete function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_valuea &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//出现A2类后A、A2都继承Grand，而且C是他俩的子类，此时用到虚继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> Grand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_valuea2;</span><br><span class="line">    A2(<span class="keyword">int</span> i) : Grand(i), m_valuea2(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A2 create function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~A2()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A2 delete function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_valuea2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_valueb;</span><br><span class="line">    B()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"MO function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    B(<span class="keyword">int</span> i) : m_valueb(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B cretae function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~B()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B delete function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_valueb &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A, <span class="keyword">public</span> A2, <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// C(int i, int j, int k) : A(i), B(j), m_valuec(k)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; "C create function" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    C(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k) : A(i), A2(i), Grand(j), m_valuec(k)<span class="comment">//虚继承需要孙类初始化爷爷类，若C存在子类则Grand需要靠其子类初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"C create function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~C()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"C delete function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m_valuec;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfoC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; m_valuec &lt;&lt; endl;</span></span><br><span class="line">        A::myinfo();</span><br><span class="line">        A2::myinfo();</span><br><span class="line">        B::myinfo();</span><br><span class="line">        myinfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myinfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_valuec &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// using A::A;</span></span><br><span class="line">    <span class="comment">// using B::B;</span></span><br><span class="line">    <span class="comment">// C(int v):A(v),B(v)&#123;&#125;;//从多个父类继承同名构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">ctest</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    ctest.m_valuegrand = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ctest.myinfoC();</span><br><span class="line">    ctest.A::myinfo();    <span class="comment">//调用父类同名函数</span></span><br><span class="line">    Grand::m_static = <span class="number">10</span>; <span class="comment">//静态成员属于类，可使用类名引用</span></span><br><span class="line">    A::m_static = <span class="number">20</span>;     <span class="comment">//其父类的静态成员可以使用子类修改</span></span><br><span class="line">    C::m_static = <span class="number">30</span>;</span><br><span class="line">    ctest.m_static = <span class="number">100</span>; <span class="comment">//可以使用对象名应用，</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; C::m_static &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>48、1）类型转换构造函数：与带一个参数的构造函数一样。eg:TestInt q=12;/TestInt ti(12);（隐式类型转换）.TestInt t1=TestInt(120);（显式）。2）类型转换运算符：与类型转换构造函数作用相反。将一个类类型对象转成其他数据类型。格式：operator type() const。const非必须，一般不应该改变待转换对象内容。type：要转换类型，只要是常规返回类型均可，数组、函数不行，但是数组、函数指针引用可以。形参为空，为隐式执行，需要返回一个type类型的值。并且必须定义为成员函数。以上两者尽量少用，若要使用一个类中最多使用一个。了解即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//定义函数指针类型，代表的函数带一个int形参，没有返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*fpoint)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">// using typoint=void(*)(int);</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myinfo</span><span class="params">(<span class="keyword">int</span> v1)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">//静态成员函数</span></span><br><span class="line">        <span class="keyword">int</span> test;</span><br><span class="line">        test = <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//类型转换运算符，将类类型转换为一个函数指针</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">fpoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个函数指针</span></span><br><span class="line">        <span class="keyword">return</span> myinfo;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">    TestInt(<span class="keyword">int</span> x = <span class="number">0</span>) : m_i(x)</span><br><span class="line">    &#123; <span class="comment">//类型转换构造函数，也是带一个参数的构造函数，将一个int转换为TestInt</span></span><br><span class="line">        <span class="keyword">if</span> (m_i &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m_i &gt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_i = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//类型转换运算符</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~TestInt() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_n;              <span class="comment">//普通成员变量属于对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_nstatic; <span class="comment">//静态成员变量属于类,需要定义</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ptfunc</span><span class="params">(<span class="keyword">int</span> tempvalue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"pt func"</span> &lt;&lt; tempvalue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">virtualfunc</span><span class="params">(<span class="keyword">int</span> tempvalue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"virtual func"</span> &lt;&lt; tempvalue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticfunc</span><span class="params">(<span class="keyword">int</span> tempvalue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"tatic func"</span> &lt;&lt; tempvalue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> CT::m_nstatic = <span class="number">10</span>; <span class="comment">//静态成员变量定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TestInt q=12;</span></span><br><span class="line">    <span class="comment">// TestInt ti(12);//隐式类型转换</span></span><br><span class="line">    <span class="comment">// TestInt t1=TestInt(120);//调用显式类型转换构造函数</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;t1.m_i&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// TestInt ti2=22;</span></span><br><span class="line">    <span class="comment">//---------------</span></span><br><span class="line">    TestInt f = <span class="number">12</span>;</span><br><span class="line">    TestInt f2;</span><br><span class="line">    f2 = <span class="number">10</span>;                        <span class="comment">//编译器用10生成临时对象，调用类型转换构造函数，又将临时对象内容给f2</span></span><br><span class="line">    <span class="keyword">int</span> k = f2 + <span class="number">5</span>;                 <span class="comment">//将f2转换成int，后与5求和</span></span><br><span class="line">    <span class="keyword">int</span> k2 = f2.<span class="keyword">operator</span> <span class="keyword">int</span>() + <span class="number">5</span>; <span class="comment">//显式调用</span></span><br><span class="line">    <span class="comment">//-----------------</span></span><br><span class="line">    <span class="function">TestInt <span class="title">w</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    (w.<span class="keyword">operator</span> TestInt::fpoint())(<span class="number">13</span>);</span><br><span class="line">    <span class="comment">//----------------类成员函数指针</span></span><br><span class="line">    <span class="keyword">void</span> (CT::*myfpoint)(<span class="keyword">int</span>) = &amp;CT::ptfunc; <span class="comment">//一个类成员函数指针变量定义,名字为mypoint,然后类成员函数指针变量被赋值</span></span><br><span class="line">    CT abc, *pc;</span><br><span class="line">    pc = &amp;abc;</span><br><span class="line">    (abc.*myfpoint)(<span class="number">100</span>); <span class="comment">//对象abc调用指针变量myfpoint指向的成员函数</span></span><br><span class="line">    (pc-&gt;*myfpoint)(<span class="number">120</span>); <span class="comment">//同上</span></span><br><span class="line">    <span class="comment">//虚函数指针</span></span><br><span class="line">    <span class="keyword">void</span> (CT::*myfpointvirtual)(<span class="keyword">int</span>) = &amp;CT::virtualfunc;</span><br><span class="line">    (abc.*myfpointvirtual)(<span class="number">100</span>);</span><br><span class="line">    (pc-&gt;*myfpointvirtual)(<span class="number">120</span>);</span><br><span class="line">    <span class="comment">//静态成员函数</span></span><br><span class="line">    <span class="keyword">void</span> (*myfpointstatic)(<span class="keyword">int</span>) = &amp;CT::staticfunc;</span><br><span class="line">    myfpointstatic(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类成员变量指针</span></span><br><span class="line">    <span class="comment">//普通成员变量指针</span></span><br><span class="line">    <span class="keyword">int</span> CT::*s = &amp;CT::m_n;</span><br><span class="line">    CT testtemp;</span><br><span class="line">    testtemp.*s = <span class="number">180</span>; <span class="comment">//使用成员变量指针修改成员变量值，等价于testtemp.m_n=180;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testtemp.m_n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//静态成员变量指针</span></span><br><span class="line">    <span class="keyword">int</span> *test1 = &amp;CT::m_nstatic;</span><br><span class="line">    *test1 = <span class="number">888</span>;<span class="comment">//等价于CT::m_nstatic=888;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>类</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>C++快刷(1)</title>
    <url>/2020/06/10/C-%E5%BF%AB%E5%88%B7/</url>
    <content><![CDATA[<p>1、namespace:命名空间，使得可同时调用同名函数。namespace a{void b()}调用只需要a::b()<br>2、std::endl 是一个模板函数名，相当于函数指针<br>作用：1）输出换行符\n<br>2）强制刷新输出缓冲区，缓冲区中所有数据都被系统清除了。<br>输出缓冲区：一般内存cout输出的时候实际是往输出缓冲区输出内容，那么输出缓冲区什么时候把内容输出到屏幕去呢？①缓冲区满了②程序执行到main的return语句③调用了这个std::endl，能够强制刷新输出缓冲区（将缓冲区的内容往屏幕上写）④当系统不太繁忙的时候，系统也会查看缓冲区内容，发现新内容也会正常输出到屏幕<br>3、头文件防卫式声明，防止参数/函数重复定义<br>#ifndef <strong>head</strong>h__<br>#define <strong>head</strong>h__  …..  #endif<br>4、引用 eg:int value=5; int &amp;v=value;<br>5、const、constexpr  常量<br>6、static:类外定义，全局静态变量只能在定义的文件内访问（文件作用域）限制函数的作用域为文件作用域（函数之前）、局部静态变量进入函数会保持上次的值。   静态成员变量：不能使用sizeof计算成员大小、可以通过类名访问静态成员（类名::静态成员变量()）也可使用对象访问，在一个.cpp文件开头定义这个静态成员变量， 定义时可以不给初值，系统自动给0。静态成员函数不能访问非静态成员。静态成员（函数）属于类，实例化之前便有了内存空间。static是跨对象的，即在程序中定义之后不论谁修改那么所有对象访问都是该值。<br>7、内存分配：内存分为5个区域，1）栈，一般函数内的局部变量都会放在此处，由编译器自动分配和释放（速度快、空间小）2）堆，malloc/new分配(new int(‘a’)/new int[10])，free/delete来释放，忘记释放系统自动回收（速度较慢、空间很大，注意malloc,free是函数、后者是关键字）3）全局/静态变量存储区：全局变量和静态变量static4）常量存储区5）程序代码区<br>8、对于指针的初始化能用nullptr取代NULL,NULL可以认为是一个整型0，nullptr是一个真的指针类型。<br>9、C++中结构与类相似（(class)类中成员变量即是对象）,public/private中定义变量即成员变量。结构中的成员变量/函数默认访问级别为public、类中成员变量/函数默认为private，即定义结构和类需要明确成员的级别。C++结构继承默认是public，类中继承默认是private<br>10、前置返回：void function(int a)后置返回：auto function(int a)-&gt;void<br>11、内联函数：在函数定义前添加关键字inline，函数体很小(越小越好)，调用很频繁的函数，将调用该函数的动作替换为函数本体。但是决定权在编译器。函数定义需要放在.h头文件中。以便找到函数的本体源码并尝试将该函数的调用替换为函数体内的语句。循环、分支、递归最好不用。<br>12、1）const char <em>p，p指向的内容不能通过p修改，即eg:char str=”a b c” p=str *p=’N’ 这样是不行的。char const *p与其等价2）char * const p=str必需初始化，p一旦指向一个str后就不能指向其他东西，即p++不可以。但是</em>p可以修改。3）char const * const p=str，p指向、内容均不能改变。<br>const可以放在成员函数后面限制修改，但是不能放在普通函数之后。const成员函数初始化，需要在初始化列表中初始化或直接给值，不可以通过赋值初始化。<br>13、函数形参中使用const,eg:void fs(const student &amp;stu)<br>14、String：1)初始化string s1=”a”、string s2(“w”)、string s3(num,’o’)<br>2)s1.c_str()返回一个指向正规的c字符串的指针（string转换成字符串）类型为const char *p=s1.c_str();<br>15、toupper()、tolower()大小写互转<br>16、迭代器：1）int a[6]={1,2,3,4,5};vector<int> s1;vector<int> s2(a,a+5); s1.insert(s1.begin(),a,a+6);初始化   2）vector<int>::iterator s;for (auto s=s1.begin(); s!=s1.end(); s++) 直接赋值也可以。迭代器使用。3）vector<int>::reverse_iterator rs;<br>反向迭代器3）const_iterator表示所指向的值不能改变但可以改变指向,使用cbegin()常量迭代器<br>17、类型转换：强制类型转换，static_cast(编译时检查，与c中强制转换类似，可以让子类转换成父类、也可用于void *转换成其他类型) ;dynamic_cast（运行时检查，主要用于父指针类型指向子类型对象）;const_cast（去除指针或引用的const性质，在运行时使用）;reinterpret_cast（重新解释，处理无关类型，eg:int与类、一种指针与另一种指针，也即可以乱转，按照转换后的内容重新解释内容，安全性差）。使用形式为static_cast<int>(a)，不建议使用，会抑制编译器报错。<br>18、成员函数可以访问成员变量不论public、private。<br>19、函数默认参数：只能在函数声明中、默认参数必须出现在非默认参数右边。eg:void init(int hour, int minute=10, int second=10)；若存在默认参数，那么在传参时可不填写该变量值。但是此时需注意不能定义剩余的参数为函数，系统会分辨不清。<br>20、explicit，使构造函数只能用于初始化和显示类型转换。对于单参数的构造函数就使用来声明，避免隐式类型转换。<br>21、构造函数初始化列表：Mytime(int hour, int minute, int second):Hour(hour),Minute(minute),Second(second),MillTime(0){}<br>22、mutable，与const相反，放在成员变量之前即可修改const之下的变量。<br>23、this指针，返回自身对象的引用，任何对类成员的直接访问都被看成是通过this的隐式访问。只能在成员函数中使用，全局函数、静态函数中不能使用。在普通成员函数中，指向非const对象的const指针；在const成员函数中，指向<br>const对象的const指针。<br>24、默认构造函数：Time()=default;编译器为这种函数自动生成函数体。带参函数不可以使用。Time()=delete;让程序员显示禁用某个函数。<br>25、拷贝构造函数：一个类的构造函数的第一个参数是所属的类类型的引用(加const)，如果还有其他额外参数，那么这些额外的参数还都有默认值，eg:Time(const Time &amp;temp, int a)。函数默认参数必须放在函数声明中，除非无声明。一般不要加explicit.当一个实参传递给一个非引用类型的形参或者从一个函数中返回一个对象的时候也会调用。<br>26、使用public继承父类（public、private、protected），子类中权限不变，private无访问权限，即对象等不能访问。使用protected继承会使public、protected的权限变成protected，其中protected表示可以在本类或者子类的成员函数中访问。private继承public、protected后只能在本类成员函数使用。使用：当前类名:public 类名。  //子类中存在父类中的同名成员函数，不论父类中同名函数如何都无法访问，只能调用子类函数。若想调用父类函数可以1）在子类的成员函数中用，父类::函数名，强制调用。2）使用using关键字。以重载的方式使用，using 父类名::函数，调用：子类对象名.函数名。由于使用函数名让所有同名函数都在子类可见。主要目的是用来实现在子类对象中调用父类的重载版本。<br>27、虚函数：使用一个new的对象来调用父类、子类的同名（同参）函数。指针的类型为父类类型，需要哪个类的函数便new哪个类名，在父类（子类也可加）中的函数声明（实现）之前加上virtual声明为虚函数。一旦某个函数在父类中声明为虚函数，那么所有子类都为虚函数。Override，避免在子类中写错虚函数在函数声明尾部加上（为说明子类覆盖父类同名函数，只有虚函数可以覆盖）<br>调用虚函数执行的是动态绑定（在程序运行时才知道调用哪个子类的虚函数）<br>若使用对象来调用运行前便可直到哪个子类使用。<br>28、多态性：针对虚函数，体现在具有继承关系的子父类之间，重写父类函数同时将函数声明成虚函数，通过父类的指针在运行时找到绑定在指针上的对象，再通过查表来调用函数。<br>29、纯虚函数：在父类中声明但没有定义，要求子类定义自己的实现方法。父类实现：virtual void eat()=0;1）一旦一个类中有纯虚函数便不能生成这个类对象（抽象类）,主要用来当父类生成子类的，2）子类必须实现函数方法（实现后便可生成子类对象）。<br>30、用基类指针new子类对象，在delete时不会调用派生类析构函数。因此基类的析构函数一般写成虚函数。总结，在public继承中，基类对派生类及其对象的操作，只能影响从基类继承下来的成员，若想对非继承成员操作，只能定义为虚函数。析构函数也如此，此时父类子类析构函数都为虚函数。Eg:Human *mv=new Man(); delete mv;若析构函数不加则只会调用父类析构函数。即若一个类想要做基类，那么析构函数要写成虚函数。否则内存泄漏。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>基本语言</category>
      </categories>
      <tags>
        <tag>快刷</tag>
      </tags>
  </entry>
  <entry>
    <title>web实战小项目</title>
    <url>/2020/06/03/web%E5%AE%9E%E6%88%98%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>实战项目在webstorm开发工具上完成的简单的小项目，后端数据库只是采用了培训时（三天）给的练习库，整个项目实现的内容只是利用JS、CSS、HTML等来布局渲染，最终实现用户的登录与html页面的跳转。</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/index4.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"Method.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.i_first_div</span>&#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_first_div</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            margin-top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_input_div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dddddd</span>;</span></span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            background: white;</span><br><span class="line">            width: 90%;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_input_div</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            padding-left: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_input_div</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_login_input</span>&#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 90%;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: rgb(25,75,159);</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.i_login_input</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line">            line-height: 50px;</span><br><span class="line">            color: white;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        input&#123;</span><br><span class="line">            outline: medium;</span><br><span class="line">            background-color: transparent;</span><br><span class="line">            border: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"i_first_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"i_first_img"</span> <span class="attr">src</span>=<span class="string">"Resource/head.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"i_input_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid #dddddd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>账号名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pass"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"i_login_input"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"login_id"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"login_id"</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> account=<span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.getElementById(<span class="string">"account"</span>).value);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pass=<span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.getElementById(<span class="string">"pass"</span>).value);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> a=<span class="string">"username="</span>+account+<span class="string">"&amp;pwd="</span>+pass;</span></span><br><span class="line"><span class="actionscript">            requestMethod(<span class="string">'login'</span>, a, <span class="string">'post'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(returnString)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (returnString==<span class="string">"登录成功"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">"DropService.html"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    location.href=<span class="string">"https://www.baidu.com/"</span>;</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"用户出错"</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyDrop.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/index4.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.MD_external_div</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.MD_inner_div</span>&#123;</span></span><br><span class="line">            width: 66px;</span><br><span class="line">            height: 120px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-left: -33px;</span><br><span class="line">            margin-top: -60px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        button&#123;</span><br><span class="line">            background: rgb(40,133,202);</span><br><span class="line">            width: 66px;</span><br><span class="line">            height: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.MD_third_div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dddddd</span>;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 90%;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            background: white;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.MD_left_img</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">            margin-right: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.MD_right_img</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> <span class="attr">src</span>=<span class="string">"Resource/banner5.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_inner_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/head.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>河南城建<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span>  btn=<span class="built_in">document</span>.getElementById(<span class="string">"logout"</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            location.href=<span class="string">"index.html"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"MD_third_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_left_img"</span> <span class="attr">src</span>=<span class="string">"Resource/gr_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的客户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"MD_right_img"</span> <span class="attr">src</span>=<span class="string">"Resource/jt.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav20.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav51.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PlatformElegant.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/index3.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"Method.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        article&#123;</span><br><span class="line">            margin: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        h3&#123;</span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">            padding-bottom: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dddddd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        h4&#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            font-size: 12px;</span><br><span class="line"><span class="css">            <span class="comment">/*首行缩进*/</span></span></span><br><span class="line">            text-indent: 2em;</span><br><span class="line">            line-height: 2em;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>学校风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/banner4.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">id</span>=<span class="string">"subtitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    存放文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 返回匹配特定元素的id</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> title_tag=<span class="built_in">document</span>.getElementById(<span class="string">"title"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> subtitle_tag=<span class="built_in">document</span>.getElementById(<span class="string">"subtitle"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> info_tag=<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 设置表格行的开始和结束标签之间的HTML</span></span></span><br><span class="line">            title_tag.innerHTML=obj.title;</span><br><span class="line">            subtitle_tag.innerHTML=obj.subTitle;</span><br><span class="line">            info_tag.innerHTML=obj.info;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// JSON字符串转换为对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj_text=<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"plat_json"</span>));</span></span><br><span class="line">        if (obj_text)&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> obj=obj_text.data;</span></span><br><span class="line">            assign(obj);</span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            requestMethod(<span class="string">'aboutus'</span>, <span class="string">" "</span>, <span class="string">'get'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(returnString,obj)</span> </span>&#123;</span></span><br><span class="line">                assign(returnString);</span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.localStorage.setItem(<span class="string">"plat_json"</span>,obj);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav20.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav41.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ServiceProgress.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/index3.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/banner3.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"margin: 10px 20px; width: 90%"</span> <span class="attr">src</span>=<span class="string">"Resource/process.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav20.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav31.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DropService.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/icon.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页内样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*成行的标签：display:table width:*/</span></span></span><br><span class="line">ul&#123;</span><br><span class="line">    display: table;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: white;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">        <span class="comment">/*成列的标签：display：table-cell width：*/</span></span></span><br><span class="line">        ul li&#123;</span><br><span class="line">            display: table-cell;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 33<span class="selector-class">.3</span>%;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">        ul li span&#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.DS_first_ul</span>&#123;</span></span><br><span class="line">            margin-top: -6px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一部分--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--语义化标签：标签本身没有专门的意义，主要目的是用来增强程序的可读性 例如header、section、footer--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span用来存放少量文字用的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/banner1.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一个ul可以理解成一行，一个li可以理解成一列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"DS_first_ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index2.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index3.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>报名流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index4.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>客户管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index5.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>账户管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index6.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>新闻公告<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>工程案例<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>工程案例<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>工程案例<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>工程案例<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/index9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav11.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav20.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BusinessProject.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/icon.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>创业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"BP_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"background: white"</span> <span class="attr">href</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: rgb(63,149,211)"</span>&gt;</span>钻石创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProgectGold.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>金牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProjectSliver.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>银牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"padding-top: 44px"</span> <span class="attr">src</span>=<span class="string">"Resource/banner2.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"BP_span"</span>&gt;</span>服务内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/50w_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"BP_first_p"</span>&gt;</span>提供以上两个学院的技术支持、咨询服务、课件学习等内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"BP_span"</span>&gt;</span>创业者享受的回报收益<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/50w_2.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_inner_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>X：渠道可享有的股份额度；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Y：渠道个人业绩流水总额累计；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>X：历年渠道全部个方位业绩流水总额累计；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>B：宏鑫互联网集团拥有的上市公司纵谷本数；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Q：宏鑫互联网集团上市总股本数的20%；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"BP_span"</span>&gt;</span>获得收益条件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_inner_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>① N&gt;10人；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>② 业绩流水&gt;1.2亿。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当满足以上2个条件是，钻石创业者才能取得期权。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>注：上面的Y、Z为财务数据，有财务部门按期提供，录入即可。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav21.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BusinessProjectGold.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/icon.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.BP_external_div_des</span>&#123;</span></span><br><span class="line">            background: rgb(243,243,243);</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.BP_external_div_des</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.BP_external_div_des</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            height: 155px;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.BP_external_div_des</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">            font-size: 12px;</span><br><span class="line">            color: rgb(144,144,144);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>创业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"BP_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>钻石创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"background: white"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: rgb(63,149,211)"</span>&gt;</span>金牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProjectSliver.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>银牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"padding-top: 44px"</span> <span class="attr">src</span>=<span class="string">"Resource/banner21.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/50w_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>提供以上两个学院的技术支持、咨询服务、课件学习等内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div_des"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>创业者享受的回报收益<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/50w_2.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_inner_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>X：渠道可享有的股份额度；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Y：渠道个人业绩流水总额累计；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>X：历年渠道全部个方位业绩流水总额累计；<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>B：宏鑫互联网集团拥有的上市公司纵谷本数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Q：宏鑫互联网集团上市总股本数的20%<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>获得收益条件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_inner_div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>① N&gt;10人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>② 业绩流水&gt;1.2亿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当满足以上2个条件是，钻石创业者才能取得期权<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>注：上面的Y、Z为财务数据，有财务部门按期提供，录入即可<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav21.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BusinessProjectSliver.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,user-scalable=no"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>035417110曹承湘<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">href</span>=<span class="string">"Resource/icon.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"ExternalStyle.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页内样式，出现次数少--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.BP_img</span>&#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>创业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"BP_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>钻石创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProgectGold.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>金牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"background: white"</span> <span class="attr">href</span>=<span class="string">"BusinessProjectSliver.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: rgb(63,149,211)"</span>&gt;</span>银牌创业者<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"DS_first_section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"padding-top: 44px"</span> <span class="attr">src</span>=<span class="string">"Resource/banner2.png"</span> <span class="attr">alt</span>=<span class="string">"网络可能出错喽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"BP_span"</span>&gt;</span>服务内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"BP_img"</span> <span class="attr">src</span>=<span class="string">"Resource/10w_1.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"BP_first_p"</span>&gt;</span>提供以上两个学院的技术支持、咨询服务、课件学习等内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BP_external_div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"BP_span"</span>&gt;</span>创业者享受的回报收益<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"BP_img"</span> <span class="attr">src</span>=<span class="string">"Resource/10w_2.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DropService.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>小滴服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"BusinessProject.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav21.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>企业项目<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ServiceProgress.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav30.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>服务流程<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"PlatformElegant.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav40.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>平台风采<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"MyDrop.html"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Resource/nav50.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的小滴<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ExternalStyle.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">242</span>,<span class="number">242</span>,<span class="number">244</span>);</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">49px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">34</span>,<span class="number">128</span>,<span class="number">178</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.DS_first_section</span>  <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">49px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="comment">/*消除下划线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="comment">/*文字独立成行*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_first_section</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">242</span>,<span class="number">242</span>,<span class="number">244</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_first_section</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_first_section</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">38</span>,<span class="number">37</span>,<span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_external_div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_external_div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_external_div</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">155px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_external_div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">144</span>,<span class="number">144</span>,<span class="number">144</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.BP_inner_div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Method.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestMethod</span>(<span class="params">par1, par2, method, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建请求xhr对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">//2、建立与服务端的连接</span></span><br><span class="line">    xhr.open(method, <span class="string">'https://mockapi.eolinker.com/2ZhGVxjacb39010e6753bd9c02ee803e6e3bfeab6e8007c/'</span> + par1);</span><br><span class="line">    <span class="comment">//设置头信息,让数据以表单的形式传递给服务器</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">    <span class="comment">//3、发送请求</span></span><br><span class="line">    xhr.send(par2);</span><br><span class="line">    <span class="comment">//4、接收服务端数据</span></span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//responseText中包含了服务端返回的数据，为json数据格式</span></span><br><span class="line">            <span class="keyword">var</span> res=<span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            <span class="keyword">var</span> str=res.data;</span><br><span class="line">            <span class="comment">// 回调获取到的数据</span></span><br><span class="line">            callback(str,xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web实战小项目</category>
      </categories>
  </entry>
  <entry>
    <title>1127 ZigZagging on a Tree</title>
    <url>/2020/05/10/1127-ZigZagging-on-a-Tree/</url>
    <content><![CDATA[<p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p>
<p><img src="https://images.ptausercontent.com/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" alt="zigzag.jpg"></p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">12 11 20 17 1 15 8 5</span><br><span class="line">12 20 17 11 15 8 5 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 11 5 8 17 12 20 15</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt;in,post,result[35];</span><br><span class="line">int n,tree[35][2],root;</span><br><span class="line">struct node&#123;</span><br><span class="line">	int index,depth;</span><br><span class="line">&#125;;</span><br><span class="line">void dfs(int &amp;index,int inl,int inr,int pl,int pr)&#123;</span><br><span class="line">	if(inl&gt;inr)&#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	index&#x3D;pr;</span><br><span class="line">	int i&#x3D;0;</span><br><span class="line">	while (in[i]!&#x3D;post[pr]) &#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(tree[index][0], inl, i-1, pl, pl+(i-inl)-1);</span><br><span class="line">	dfs(tree[index][1], i+1, inr, pl+(i-inl), pr-1);</span><br><span class="line">&#125;</span><br><span class="line">void bfs()&#123;</span><br><span class="line">	queue&lt;node&gt;q;</span><br><span class="line">	q.push(node&#123;root,0&#125;);</span><br><span class="line">	while (!q.empty()) &#123;</span><br><span class="line">		node temp&#x3D;q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		result[temp.depth].push_back(post[temp.index]);</span><br><span class="line">		if(tree[temp.index][0]!&#x3D;0)&#123;</span><br><span class="line">			q.push(node&#123;tree[temp.index][0],temp.depth+1&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		if(tree[temp.index][1]!&#x3D;0)&#123;</span><br><span class="line">			q.push(node&#123;tree[temp.index][1],temp.depth+1&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	in.resize(n+1),post.resize(n+1);</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		cin&gt;&gt;in[i];</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		cin&gt;&gt;post[i];</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(root, 1, n, 1, n);</span><br><span class="line">	bfs();</span><br><span class="line">	printf(&quot;%d&quot;,result[0][0]);</span><br><span class="line">	for (int i&#x3D;1;i&lt;35;i++) &#123;</span><br><span class="line">		if (i%2&#x3D;&#x3D;1) &#123;</span><br><span class="line">			for (int j&#x3D;0;j&lt;result[i].size();j++) &#123;</span><br><span class="line">				printf(&quot; %d&quot;,result[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			for (int j&#x3D;result[i].size()-1;j&gt;&#x3D;0;j--) &#123;</span><br><span class="line">				printf(&quot; %d&quot;,result[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题一刷参考柳神的，题意很简单，根据给出的中序、后序，来按照奇偶层数正反向层次输出，参考代码则是很巧妙使用数组来存储所得到的数节点，使用0、1来代替l、r，其中不明白的一点便是map中depth对应的时post下标的值，后来想应该是post先输出根节点的缘故</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>Hibernate关联关系映射</title>
    <url>/2020/04/25/Hibernate%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<p>hibernate中的多表映射<br>数据库中设计：<br>1、一对一 外键可以生成在任意一方<br>2、一对多 外键在多的一方<br>3、多对多 生成中间关系表，引入两张表主键作为外键，两个主键成为联合外键<br>java类中设计<br>1、一对一<br>class person{<br>private int id;private String name; private Card card;}<br>class Card{<br>Private int id; private String number;private Person person;}双向关联<br>2、一对多<br>class Employee{<br>private int id;private String name;private Dept dept;}<br>class Dept{<br>private int id;private String name;private Set<Employee>e }双向关联使用set<br>3、多对多<br>class Student{<br>private int id;private String name;private Set<Teacher> t;}<br>class Teacher{<br>private int id;private String name;private Set<Student>s; }</p>
<p>hibernate一对多（在多的一方设计外键）Customer（一）Order（多）<br>1）设计类：Order类<br>private Integer id;<br>private String address;<br>private Double price;<br>private Customer customer;<br>Customer类<br>private Integer id;<br>private String name;<br>private Set<Order> orders;<br>2）在Order.hbm.xml文件中配置<br><class name="cn.itcast.onetomany.Order" table="orders"><br><id name="id" column="id" type="int"><br><generator class="native"/><br></id><br><property name="address" length="50"/><br><property name="price"/><br>A代表的是在orders表中生成的外键名称，映射Customer表中的主键<br><many-to-one name="customer" class="cn.itcast.onetomany.Customer" column="A"/><br></class><br>3）在Customer.hbm.xml文件中配置<br><class name="cn.itcast.onetomany.Customer" table="customer"><br><id name="id" column="id" type="int"><br><generator class="native"/><br></id><br><property name="name" length="20"/><br><set name="orders"><br><key column="A"/><br><one-to-many class="cn.itcast.onetomany.Order"/><br></set><br></class><br>操作：<br>//描述关系订单属于某个客户<br>o1.setCustomer(c);<br>o2.setCustomer(c);<br>//客户有多个订单<br>c.getOrders().add(o1);<br>c.getOrders().add(o2);<br>session.save(o1);<br>session.save(o2);<br>session.save(c);<br>操作时，只保存一方会出现异常org.hibernate.TransientObjectException<br>原因：持久化对象关联了瞬时对象<br>解决方案：使用级联操作，使用cascade完成配置<br>1、保存用户并级联保存订单<br><set name="orders" cascade="save-update"><br>2、保存订单并级联保存用户<br><many-to-one   cascade="save-update"></p>
<p>级联删除操作<br>没有设置级联操作时，如果删除客户，订单不变名单订单的cid置空<br>1、删除客户时，删除客户订单<br>在Customer.hbm.xml文件中<set cascade=”delete”><br>2、删除订单时，删除客户<br>在Order.hbm.xml文件中<many-to-one cascade=”delete”><br>①若客户也级联删除订单，删除任何一个订单或用户其所对应的另一方都会完全删除<br>②若客户级不联删除订单，若删除一个订单，会删除客户，但剩余订单只会将cid置空  —以上均为订单级联客户时发生的两种情况<br>删除托管对象无法产生级联删除效果，必须删除持久对象<br>Customer c=new Customer();<br>c.setId(3);<br>session.delete(c);（托管对象）</p>
<p>孤儿删除<br>得到id=5的客户<br>Customer c=(Customer)session.get(Customer.class, 3);<br>Id=5的订单<br>Order o=(Order)session.get(Order.class, 5);<br>c.getOrders().remove(o);将订单与客户解除关系<br>这时会将订单5的cid设置为null，在解除了订单客户关系后，应该将孤儿（没有客户的订单）删除，在Customer.hbm.xml配置<set name=”orders” cascade=”delete-orphan”>可以解决上述问题<br>cascade取值：<br>save-update级联保存更新，持久对象、关联瞬时对象执行save。关联托管对象执行update<br>delete级联删除<br>delete-orphan一对多模型中孤儿删除<br>all 除掉delete-orphan外所有级联关系<br>all-delete-orphan包含all和delete-orphan<br>多对多 会产生一个中间表（Student、Course）<br>在Student中有一个Set<Course>courses<br><class name="cn.itcast.manytomany.Course" table="course"><br><id name="id" column="id" type="int"><br><generator class="native"/><br></id><br><property name="cname" length="20"/><br><set name="students" table="s_c"><br><key column="A"/>描述Student在中间表中外键名称<br><many-to-many class="cn.itcast.manytomany.Course" column="B"/><br></set><br></class><br>在Course中有一个Set<Student>students<br><class name="cn.itcast.manytomany.Student" table="student"><br><id name="id" column="id" type="int"><br><generator class="native"/><br></id><br><property name="sname" length="20"/><br><set name="courses" table="s_c">s_c代表中间表名称<br><key column="B"/><br><many-to-many class="cn.itcast.manytomany.Student" column="A"/><br></set><br></class><br>1)操作<br>//学生关联课程<br>//s1.getCourses().add(c1);（单向关联）<br>//s2.getCourses().add(c1);<br>//s1.getCourses().add(c2);<br>//s2.getCourses().add(c2);<br>//课程关联学会<br>c1.getStudents().add(s1);<br>c2.getStudents().add(s1);<br>c1.getStudents().add(s2);<br>c2.getStudents().add(s2);<br>session.save(c1);<br>session.save(c2);<br>session.save(s1);<br>session.save(s2);<br>此时会出错，建立双向关联，双方都维护外键，都会产生中间表<br>解决：<br>1、单向关联2、使用inverse让某一方放弃维护外键<br><set name="courses" table="sc" inverse="true">使一方放弃维护，此时在Student.hbm.xml文件设置<br>开发中一般由多的一方来维护外键，在一的一方设置inverse=true，代表维护由多的一方</p>
<p>2)测试解除关系，删除中间表数据<br>Student s=(Student)session.get(Student.class,1);得到id=1的学生<br>Course c=(Course)session.get(Course.class,1);得到id=1的科目<br>s.getCourses().remove(c);将中间表中关联的数据删除<br>在一对多中cascade=”delete-orphan”代表删除孤儿，在多对多中，不需要设置，直接将中间表数据删除。<br>3)改变学生选课<br>//得到学生<br>Student s = (Student) session.get(Student.class, 7);<br>//得到科目<br>Course c1 = (Course) session.get(Course.class, 7);<br>Course c2 = (Course) session.get(Course.class, 8);<br>s.getCourses().remove(c2);<br>s.getCourses().add(c1);<br>4)直接删除<br>Student student = (Student) session.get(Student.class, 1);<br>session.delete(student);<br>会将学生删除，并在中间表中将关联数据也删除<br>5)删除学生时，将课程删除（反之可否）<br>1、单方设置级联<br>在Student.hbm.xml文件中<set cascade="delete"><br>学生删除以及其所学习的科目也删除<br>2、双方删除<br>在Student.hbm.xml、Course.hbm.xml文件中<set cascade="delete"><br>所有与此学生或者其所选科目有关的学生都被删除</p>
<p>Hibernate.cfg.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 配制文件的dtd信息 --&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">	&quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">	&quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line"> &lt;session-factory&gt;</span><br><span class="line">	&lt;!-- 指定方言 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;</span><br><span class="line">	    org.hibernate.dialect.SQLServerDialect</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;!--数据库驱动 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;</span><br><span class="line">	    com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;!--连接数据库的url --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;</span><br><span class="line">	    jdbc:sqlserver:&#x2F;&#x2F;localhost:1433;DatabaseName&#x3D;h2</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;!--数据库的用户名 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;</span><br><span class="line">		student</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;!--数据库的密码 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;</span><br><span class="line">	    student</span><br><span class="line">	&lt;&#x2F;property&gt;	</span><br><span class="line">     &lt;!--其它配置 --&gt;</span><br><span class="line">    &lt;!--输出运行时生成的SQL语句--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;format_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;!-- 用来关联hbm配置文件 --&gt;</span><br><span class="line">	&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;onetomany&#x2F;Customer.hbm.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;onetomany&#x2F;Order.hbm.xml&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!--多对多&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;manytomany&#x2F;Course.hbm.xml&quot;&#x2F;&gt;--&gt;</span><br><span class="line">	&lt;!--&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;manytomany&#x2F;Student.hbm.xml&quot;&#x2F;&gt;--&gt;</span><br><span class="line"> &lt;&#x2F;session-factory&gt;</span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt;</span><br></pre></td></tr></table></figure>

<p>OneToManyTest.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.onetomany;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import cn.itcast.utils.HibernateUtils;</span><br><span class="line">public class OneToManyTest &#123;</span><br><span class="line">	@Test</span><br><span class="line">	public void test1() &#123;</span><br><span class="line">		Session session&#x3D;HibernateUtils.getSession();</span><br><span class="line">		session.beginTransaction();</span><br><span class="line">		Customer c&#x3D;new Customer();</span><br><span class="line">		&#x2F;&#x2F;创建一个客户</span><br><span class="line">		c.setName(&quot;李四&quot;);</span><br><span class="line">		&#x2F;&#x2F;创建两个订单</span><br><span class="line">		Order o1&#x3D;new Order();</span><br><span class="line">		o1.setAddress(&quot;上海&quot;);</span><br><span class="line">		o1.setPrice(1000d);</span><br><span class="line">		Order o2&#x3D;new Order();</span><br><span class="line">		o2.setAddress(&quot;信阳&quot;);</span><br><span class="line">		o2.setPrice(9999d);</span><br><span class="line">		&#x2F;&#x2F;描述关系订单属于某个客户</span><br><span class="line">		o1.setCustomer(c);</span><br><span class="line">		o2.setCustomer(c);</span><br><span class="line">		&#x2F;&#x2F;客户有多个订单</span><br><span class="line">		c.getOrders().add(o1);</span><br><span class="line">		c.getOrders().add(o2);</span><br><span class="line">		session.save(o1);</span><br><span class="line">		session.save(o2);</span><br><span class="line">		session.save(c);</span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;级联操作保存一方即可，需在Customer.hbm.xml中添加cascade，保存Order也可</span><br><span class="line">		c.setName(&quot;张三&quot;);</span><br><span class="line">		&#x2F;&#x2F;创建两个订单</span><br><span class="line">		Order o1&#x3D;new Order();</span><br><span class="line">		o1.setAddress(&quot;上海&quot;);</span><br><span class="line">		o1.setPrice(888d);</span><br><span class="line">		Order o2&#x3D;new Order();</span><br><span class="line">		o2.setAddress(&quot;信阳&quot;);</span><br><span class="line">		o2.setPrice(999d);</span><br><span class="line">		&#x2F;&#x2F;客户有多个订单</span><br><span class="line">		c.getOrders().add(o1);</span><br><span class="line">		c.getOrders().add(o2);</span><br><span class="line">		session.save(c);</span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">		session.getTransaction().commit();</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Customer.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.onetomany;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Customer &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String name;</span><br><span class="line">	private Set&lt;Order&gt; orders&#x3D;new HashSet&lt;Order&gt;();</span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id &#x3D; id;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line">	public Set&lt;Order&gt; getOrders() &#123;</span><br><span class="line">		return orders;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setOrders(Set&lt;Order&gt; orders) &#123;</span><br><span class="line">		this.orders &#x3D; orders;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.onetomany;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Customer &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String name;</span><br><span class="line">	private Set&lt;Order&gt; orders&#x3D;new HashSet&lt;Order&gt;();</span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id &#x3D; id;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line">	public Set&lt;Order&gt; getOrders() &#123;</span><br><span class="line">		return orders;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setOrders(Set&lt;Order&gt; orders) &#123;</span><br><span class="line">		this.orders &#x3D; orders;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Customer.hbm.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">    &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">&lt;class name&#x3D;&quot;cn.itcast.onetomany.Customer&quot; table&#x3D;&quot;customer&quot;&gt;</span><br><span class="line">&lt;id name&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; type&#x3D;&quot;int&quot;&gt;</span><br><span class="line">&lt;generator class&#x3D;&quot;native&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;id&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;name&quot; length&#x3D;&quot;20&quot;&#x2F;&gt;</span><br><span class="line">&lt;set name&#x3D;&quot;orders&quot;&gt;----&gt;&lt;set name&#x3D;&quot;orders&quot; cascade&#x3D;&quot;save-update&quot;&gt;</span><br><span class="line">&lt;key column&#x3D;&quot;A&quot;&#x2F;&gt;</span><br><span class="line">&lt;one-to-many class&#x3D;&quot;cn.itcast.onetomany.Order&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br><span class="line">&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>Order.hbm.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">    &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">&lt;class name&#x3D;&quot;cn.itcast.onetomany.Order&quot; table&#x3D;&quot;orders&quot;&gt;</span><br><span class="line">&lt;id name&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; type&#x3D;&quot;int&quot;&gt;</span><br><span class="line">&lt;generator class&#x3D;&quot;native&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;id&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;address&quot; length&#x3D;&quot;50&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;price&quot;&#x2F;&gt;</span><br><span class="line">&lt;many-to-one name&#x3D;&quot;customer&quot; class&#x3D;&quot;cn.itcast.onetomany.Customer&quot; column&#x3D;&quot;A&quot;&#x2F;&gt;---&gt;添加到此处也可cascade&#x3D;&quot;save-update&quot;</span><br><span class="line">&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge650bz0n9j30eq0e9dgf.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge650dc2h0j307102uq2u.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge650g3pilj306w03ajrc.jpg" alt=""></p>
<p>ManyToManyTest.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.manytomany;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import cn.itcast.utils.HibernateUtils;</span><br><span class="line">public class ManyToManyTest &#123;</span><br><span class="line">	@Test</span><br><span class="line">	public void test1() &#123;</span><br><span class="line">		Session session &#x3D; HibernateUtils.getSession();</span><br><span class="line">		session.beginTransaction();</span><br><span class="line">		&#x2F;&#x2F; 1.创建两个学生</span><br><span class="line">		Student s1 &#x3D; new Student();</span><br><span class="line">		s1.setSname(&quot;张三&quot;);</span><br><span class="line">		Student s2 &#x3D; new Student();</span><br><span class="line">		s2.setSname(&quot;李四&quot;);</span><br><span class="line">		&#x2F;&#x2F; 2.创建两上科目</span><br><span class="line">		Course c1 &#x3D; new Course();</span><br><span class="line">		c1.setCname(&quot;JAVA&quot;);</span><br><span class="line">		Course c2 &#x3D; new Course();</span><br><span class="line">		c2.setCname(&quot;PHP&quot;);</span><br><span class="line">		&#x2F;&#x2F; 3.建立关联关系</span><br><span class="line">		&#x2F;&#x2F; 学生关联科目</span><br><span class="line">		s1.getCourses().add(c1);</span><br><span class="line">		s2.getCourses().add(c1);</span><br><span class="line">		s1.getCourses().add(c2);</span><br><span class="line">		s2.getCourses().add(c2);</span><br><span class="line">		&#x2F;&#x2F; 科目关联学生</span><br><span class="line">		c1.getStudents().add(s1);</span><br><span class="line">		c2.getStudents().add(s1);</span><br><span class="line">		c1.getStudents().add(s2);</span><br><span class="line">		c2.getStudents().add(s2);</span><br><span class="line">		&#x2F;&#x2F; 4.存储</span><br><span class="line">		session.save(c1);</span><br><span class="line">		session.save(c2);</span><br><span class="line">		session.save(s1);</span><br><span class="line">		session.save(s2);</span><br><span class="line">		&#x2F;&#x2F;仅仅存一方，会出现持久化对象关联瞬时对象</span><br><span class="line">		&#x2F;&#x2F; 提交事务，关闭session</span><br><span class="line">		session.getTransaction().commit();</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; 多对多级联保存：学生级联课程，需要在学生Student.hbm.xml添加级联保存</span><br><span class="line">	@Test</span><br><span class="line">	public void test2() &#123;</span><br><span class="line">		Session session &#x3D; HibernateUtils.getSession();</span><br><span class="line">		session.beginTransaction();</span><br><span class="line">		&#x2F;&#x2F; 1.创建课程</span><br><span class="line">		Course course &#x3D; new Course();</span><br><span class="line">		course.setCname(&quot;PHP&quot;);</span><br><span class="line">		&#x2F;&#x2F; 2.创建学生</span><br><span class="line">		Student student &#x3D; new Student();</span><br><span class="line">		student.setSname(&quot;王五&quot;);</span><br><span class="line">		&#x2F;&#x2F; 3.关联-- 学生关联课程</span><br><span class="line">		student.getCourses().add(course);</span><br><span class="line">		&#x2F;&#x2F; 4.保存</span><br><span class="line">		session.save(student);</span><br><span class="line">		session.getTransaction().commit();</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">	   &#x2F;&#x2F;级联删除</span><br><span class="line">	@Test</span><br><span class="line">	public void test3() &#123;</span><br><span class="line">		Session session &#x3D; HibernateUtils.getSession();</span><br><span class="line">		session.beginTransaction();</span><br><span class="line">		Student student &#x3D; (Student) session.get(Student.class, 1);</span><br><span class="line">		session.delete(student);</span><br><span class="line">		session.getTransaction().commit();</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;改变学生选课关系,A</span><br><span class="line">	@Test</span><br><span class="line">	public void test4() &#123;</span><br><span class="line">		Session session &#x3D; HibernateUtils.getSession();</span><br><span class="line">		session.beginTransaction();</span><br><span class="line">		&#x2F;&#x2F;得到学生</span><br><span class="line">		Student s &#x3D; (Student) session.get(Student.class, 7);</span><br><span class="line">		Course c1 &#x3D; (Course) session.get(Course.class, 7);</span><br><span class="line">		Course c2 &#x3D; (Course) session.get(Course.class, 8);</span><br><span class="line">		s.getCourses().remove(c2);</span><br><span class="line">		s.getCourses().add(c1);</span><br><span class="line">		session.getTransaction().commit();</span><br><span class="line">		session.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Course.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.manytomany;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Course &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String cname;</span><br><span class="line">	private Set&lt;Student&gt; students&#x3D;new HashSet&lt;Student&gt;();</span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id &#x3D; id;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getCname() &#123;</span><br><span class="line">		return cname;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setCname(String cname) &#123;</span><br><span class="line">		this.cname &#x3D; cname;</span><br><span class="line">	&#125;</span><br><span class="line">	public Set&lt;Student&gt; getStudents() &#123;</span><br><span class="line">		return students;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setStudents(Set&lt;Student&gt; students) &#123;</span><br><span class="line">		this.students &#x3D; students;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.manytomany;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class Student &#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">	private String sname;</span><br><span class="line">	private Set&lt;Course&gt; courses&#x3D;new HashSet&lt;Course&gt;();</span><br><span class="line">	public Integer getId() &#123;</span><br><span class="line">		return id;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setId(Integer id) &#123;</span><br><span class="line">		this.id &#x3D; id;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getSname() &#123;</span><br><span class="line">		return sname;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setSname(String sname) &#123;</span><br><span class="line">		this.sname &#x3D; sname;</span><br><span class="line">	&#125;</span><br><span class="line">	public Set&lt;Course&gt; getCourses() &#123;</span><br><span class="line">		return courses;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setCourses(Set&lt;Course&gt; courses) &#123;</span><br><span class="line">		this.courses &#x3D; courses;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Course.hbm.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">	    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">	&lt;class name&#x3D;&quot;cn.itcast.manytomany.Course&quot; table&#x3D;&quot;course&quot;&gt;</span><br><span class="line">		&lt;id name&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;</span><br><span class="line">			&lt;generator class&#x3D;&quot;native&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;id&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;cname&quot; length&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">		&lt;set name&#x3D;&quot;students&quot; table&#x3D;&quot;sc&quot; inverse&#x3D;&quot;true&quot;&gt;</span><br><span class="line">			&lt;key column&#x3D;&quot;cid&quot; &#x2F;&gt;</span><br><span class="line">			&lt;many-to-many class&#x3D;&quot;cn.itcast.manytomany.Student&quot; column&#x3D;&quot;sid&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;set&gt;</span><br><span class="line">        &lt;!-- 级联删除 --&gt;</span><br><span class="line">&lt;!-- 		&lt;set name&#x3D;&quot;students&quot; table&#x3D;&quot;sc&quot; cascade&#x3D;&quot;delete&quot; inverse&#x3D;&quot;true&quot;&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;key column&#x3D;&quot;cid&quot; &#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;many-to-many class&#x3D;&quot;cn.itcast.manytomany.Student&quot; --&gt;</span><br><span class="line">&lt;!-- 				column&#x3D;&quot;sid&quot; &#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 		&lt;&#x2F;set&gt; --&gt;</span><br><span class="line"></span><br><span class="line">	&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>Student.hbm.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">    &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">	&lt;class name&#x3D;&quot;cn.itcast.manytomany.Student&quot; table&#x3D;&quot;student&quot;&gt;</span><br><span class="line">		&lt;id name&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&gt;</span><br><span class="line">			&lt;generator class&#x3D;&quot;native&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;id&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;sname&quot; length&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">		&lt;set name&#x3D;&quot;courses&quot; table&#x3D;&quot;sc&quot;&gt;</span><br><span class="line">			&lt;key column&#x3D;&quot;sid&quot; &#x2F;&gt;</span><br><span class="line">			&lt;many-to-many class&#x3D;&quot;cn.itcast.manytomany.Course&quot; column&#x3D;&quot;cid&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;set&gt;</span><br><span class="line">			&lt;!-- 设置级联保存 --&gt;</span><br><span class="line">&lt;!-- 		&lt;set name&#x3D;&quot;courses&quot; table&#x3D;&quot;sc&quot; cascade&#x3D;&quot;save-update&quot;&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;key column&#x3D;&quot;sid&quot; &#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;many-to-many class&#x3D;&quot;cn.itcast.manytomany.Course&quot; column&#x3D;&quot;cid&quot; &#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 		&lt;&#x2F;set&gt; --&gt;</span><br><span class="line">			&lt;!-- 设置级联删除 --&gt;</span><br><span class="line">&lt;!-- 			&lt;set name&#x3D;&quot;courses&quot; table&#x3D;&quot;sc&quot; cascade&#x3D;&quot;delete&quot; &gt; --&gt;</span><br><span class="line">&lt;!-- 				&lt;key column&#x3D;&quot;sid&quot;&#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 					&lt;many-to-many class&#x3D;&quot;cn.itcast.manytomany.Course&quot; column&#x3D;&quot;cid&quot;&#x2F;&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;&#x2F;set&gt; --&gt;</span><br><span class="line">	&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>1129 Recommendation System</title>
    <url>/2020/04/19/1129-Recommendation-System/</url>
    <content><![CDATA[<p>Recommendation system predicts the preference that a user would give to an item. Now you are asked to program a very simple recommendation system that rates the user’s preference by the number of times that an item has been accessed by this user.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains two positive integers: N (≤ 50,000), the total number of queries, and K (≤ 10), the maximum number of recommendations the system must show to the user. Then given in the second line are the indices of items that the user is accessing – for the sake of simplicity, all the items are indexed from 1 to N. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, process the queries one by one. Output the recommendations for each query in a line in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query: rec[1] rec[2] ... rec[K]</span><br></pre></td></tr></table></figure>

<p>where <code>query</code> is the item that the user is accessing, and <code>rec[i]</code> (<code>i</code>=1, … K) is the <code>i</code>-th item that the system recommends to the user. The first K items that have been accessed most frequently are supposed to be recommended in non-increasing order of their frequencies. If there is a tie, the items will be ordered by their indices in increasing order.</p>
<p>Note: there is no output for the first item since it is impossible to give any recommendation at the time. It is guaranteed to have the output for at least one query.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 3</span><br><span class="line">3 5 7 5 5 3 2 1 8 3 8 12</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5: 3</span><br><span class="line">7: 3 5</span><br><span class="line">5: 3 5 7</span><br><span class="line">5: 5 3 7</span><br><span class="line">3: 5 3 7</span><br><span class="line">2: 5 3 7</span><br><span class="line">1: 5 3 2</span><br><span class="line">8: 5 3 1</span><br><span class="line">3: 5 3 1</span><br><span class="line">8: 3 5 1</span><br><span class="line">12: 3 5 8</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int sum[50000];</span><br><span class="line">struct node&#123;</span><br><span class="line">	int value,cnt;</span><br><span class="line">	bool operator&lt;(const node &amp;a)const&#123;</span><br><span class="line">		return (cnt!&#x3D;a.cnt)?cnt&gt;a.cnt:value&lt;a.value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main( )&#123;</span><br><span class="line">	int n,k,num;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;n,&amp;k);</span><br><span class="line">	set&lt;node&gt;s;</span><br><span class="line">	for (int i&#x3D;0;i&lt;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">		if (i!&#x3D;0) &#123;</span><br><span class="line">			printf(&quot;%d:&quot;,num);</span><br><span class="line">			int tempcnt&#x3D;0;</span><br><span class="line">			for (auto it&#x3D;s.begin();tempcnt&lt;k&amp;&amp;it!&#x3D;s.end();it++) &#123;</span><br><span class="line">				printf(&quot; %d&quot;,it-&gt;value);</span><br><span class="line">				tempcnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			printf(&quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		auto it&#x3D;s.find(node&#123;num,sum[num]&#125;);</span><br><span class="line">		if (it!&#x3D;s.end()) &#123;</span><br><span class="line">			s.erase(it);</span><br><span class="line">		&#125;</span><br><span class="line">		sum[num]++;</span><br><span class="line">		s.insert(node&#123;num,sum[num]&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始以为使用vector然后写一个compare来排序，然后看大神直接在结构体重载运算符，并使用set直接排序，先来将第一个数略过，将输出放在前面，插入放在后面最后注意要记得把已经存在在set中数据更新删除。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>持久化对象与一级缓存</title>
    <url>/2020/04/17/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>持久化对象的三种状态<br>1、瞬时态（transient）:此对象是由new命令创建、开辟内存空间的对象，不存在持久化标识OID，尚未与Hibernate Session关联，在数据库中也没有记录，失去引用后将被JVM回收。<br>2、持久态（persistent）:此对象存在持久化标识OID ，在Session缓存中，并且相关联的Session没有关闭，在数据库中有唯一对应的记录，注意：持久态对象是在事务还未提交前变成持久态的。<br>3、脱管态（detached）:此对象存在持久化标识OID，并且仍然与数据库中的数据存在关联，只是失去了与当前Session的关联，脱管状态对象发生改变时Hibernate不能检测到。<br>持久化对象三种状态切换<br>瞬时（无OID，不在管理）与持久化状态区别在于是否纳入session管理，是否有OID；<br>持久化与托管（有OID，不在管理）状态区别在于是否纳入session管理<br>瞬时与托管是否有OID<br>持久态-&gt;瞬时态  执行Session的delete()方法<br>持久态-&gt;托管态  执行Session的evict()，清楚一级缓存中某一对象、close()关闭session，，清除一级缓存、clear()方法，清除一级缓存所有对象<br>托管态-&gt;瞬时态  将托管对象持久化标识OID设置为null ,book.setId(null)<br>托管态-&gt;持久态  执行Session的Update()、saveOrUpdate()或Lock()方法<br>瞬时态-&gt;持久态  执行Session的save()或者saveOrUpdate()方法<br>瞬时态-&gt;托管态  为瞬时态对象设置持久化标识OID book.setId(1)<br>一级缓存<br>Hibernate的一级缓存就是指Session缓存，Session缓存就是一块内存空间，用来存放和管理Java对象。二级缓存指SessionFactory缓存<br>Session接口实现类SessionTmp1<br>持久化对象保存在Session一级缓存（引用持久化对象地址）中，只要Session不关闭，一级缓存存在，缓存中对象不会被回收<br>1、证明一级缓存存在<br>Book b1=(Book)session.get(Book.class, 1);第一次存在SQL语句<br>System.out.println(b1);<br>Book b2=(Book)session.get(Book.class, 1);第二次查询的OID一致，不需要从数据库获取<br>System.out.println(b2);<br>2、hibernate快照<br>hibernate向一级缓存中存数据时，同时保存快照数据，当修改一级缓存数据时，在flush操作时，对比缓存和快照，如果不一致，自动更新<br>快照区使用，在session保存一份与数据库相同的数据，在session的flush时，通过对比快照去数据得知是否应该执行update操作<br>3、一级缓存常见操作<br>Book book=(Book)session.get(Book.class, 2);<br>book.setName(“hell eclipse”);<br>session.flush();执行update<br>session.clear();不执行<br>session.evict(book);不执行<br>session.refresh(book);将快照信息统一成数据库中数据一致<br>flush：修改一级缓存数据针对内存操作，需要在session执行flush操作时，将缓存变化同步到数据库。<br>Clear：清楚所有对象一级缓存<br>Evict：清楚一级缓存指定对象<br>Refresh：重新查询数据库，更新快照和一级缓存</p>
<p>hibernate.cfg.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 配制文件的dtd信息 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line"> &lt;session-factory&gt;</span><br><span class="line">&lt;!-- 指定方言 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;</span><br><span class="line">    org.hibernate.dialect.SQLServerDialect</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;!--数据库驱动 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;</span><br><span class="line">    com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;!--连接数据库的url --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;</span><br><span class="line">    jdbc:sqlserver:&#x2F;&#x2F;localhost:1433;DatabaseName&#x3D;h2</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!--数据库的用户名 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;</span><br><span class="line">student</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!--数据库的密码 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;</span><br><span class="line">    student</span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">     &lt;!--其它配置 --&gt;</span><br><span class="line">    &lt;!--输出运行时生成的SQL语句--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;format_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 用来关联hbm配置文件 --&gt;</span><br><span class="line">&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;firstcache&#x2F;Book.hbm.xml&quot;&#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;session-factory&gt;</span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt; </span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配制文件的dtd信息 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line"></span><br><span class="line">&quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Configuration DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line"></span><br><span class="line">&quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line"></span><br><span class="line"> &lt;session-factory&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定方言 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.dialect&quot;&gt;</span><br><span class="line"></span><br><span class="line">  org.hibernate.dialect.SQLServerDialect</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--数据库驱动 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.driver_class&quot;&gt;</span><br><span class="line"></span><br><span class="line">  com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--连接数据库的url --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.url&quot;&gt;</span><br><span class="line"></span><br><span class="line">  jdbc:sqlserver:&#x2F;&#x2F;localhost:1433;DatabaseName&#x3D;h2</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据库的用户名 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.username&quot;&gt;</span><br><span class="line"></span><br><span class="line">student</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据库的密码 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;hibernate.connection.password&quot;&gt;</span><br><span class="line"></span><br><span class="line">  student</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line"></span><br><span class="line">   &lt;!--其它配置 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--输出运行时生成的SQL语句--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property name&#x3D;&quot;hibernate.show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property name&#x3D;&quot;format_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property name&#x3D;&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用来关联hbm配置文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapping resource&#x3D;&quot;cn&#x2F;itcast&#x2F;firstcache&#x2F;Book.hbm.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;session-factory&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;hibernate-configuration&gt;</span><br></pre></td></tr></table></figure>

<p>Book.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.firstcache;</span><br><span class="line">public class Book &#123;</span><br><span class="line">private Integer id;</span><br><span class="line">private String name;</span><br><span class="line">private Double price;</span><br><span class="line">public Integer getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line">public void setId(Integer id) &#123;</span><br><span class="line">this.id &#x3D; id;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">public Double getPrice() &#123;</span><br><span class="line">return price;</span><br><span class="line">&#125;</span><br><span class="line">public void setPrice(Double price) &#123;</span><br><span class="line">this.price &#x3D; price;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Book [id&#x3D;&quot; + id + &quot;, name&#x3D;&quot; + name + &quot;, price&#x3D;&quot; + price + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Book.hbm.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-&#x2F;&#x2F;Hibernate&#x2F;Hibernate Mapping DTD 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">    &quot;http:&#x2F;&#x2F;www.hibernate.org&#x2F;dtd&#x2F;hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">&lt;class name&#x3D;&quot;cn.itcast.firstcache.Book&quot; table&#x3D;&quot;book&quot;&gt;</span><br><span class="line">&lt;id name&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; type&#x3D;&quot;int&quot;&gt;</span><br><span class="line">&lt;generator class&#x3D;&quot;native&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;id&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;name&quot; length&#x3D;&quot;50&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;price&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;class&gt;</span><br><span class="line">&lt;&#x2F;hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>  BookTest.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.firstcache;</span><br><span class="line">import org.hibernate.classic.Session;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import cn.itcast.utils.HibernateUtils;</span><br><span class="line">public class BookTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void test1() &#123;</span><br><span class="line">Session session&#x3D;(Session) HibernateUtils.getSession();</span><br><span class="line">session.beginTransaction();</span><br><span class="line">Book b1&#x3D;(Book)session.get(Book.class, 1);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">Book b2&#x3D;(Book)session.get(Book.class, 1);</span><br><span class="line">System.out.println(b2);</span><br><span class="line">session.getTransaction().commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test2() &#123;</span><br><span class="line">Session session&#x3D;(Session) HibernateUtils.getSession();</span><br><span class="line">session.beginTransaction();</span><br><span class="line">Book book&#x3D;new Book();</span><br><span class="line">book.setName(&quot;java&quot;);</span><br><span class="line">book.setPrice(10.9);</span><br><span class="line">session.save(book);</span><br><span class="line">session.getTransaction().commit();</span><br><span class="line">session.close();</span><br><span class="line">System.out.println(book);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test3() &#123;</span><br><span class="line">Session session&#x3D;(Session) HibernateUtils.getSession();</span><br><span class="line">session.beginTransaction();</span><br><span class="line">Book book&#x3D;new Book();</span><br><span class="line">book.setName(&quot;eclipse&quot;);</span><br><span class="line">book.setPrice(75d);</span><br><span class="line">session.save(book);</span><br><span class="line">&#x2F;&#x2F;Book book1&#x3D;(Book)session.get(Book.class, 2);</span><br><span class="line">&#x2F;&#x2F;System.out.println(book1);</span><br><span class="line">book.setName(&quot;good eclipse&quot;);</span><br><span class="line">session.getTransaction().commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test4() &#123;</span><br><span class="line">Session session&#x3D;(Session) HibernateUtils.getSession();</span><br><span class="line">session.beginTransaction();</span><br><span class="line">Book book&#x3D;(Book)session.get(Book.class, 2);</span><br><span class="line">book.setName(&quot;hell eclipse&quot;);</span><br><span class="line">&#x2F;&#x2F;session.flush();</span><br><span class="line">&#x2F;&#x2F;session.clear();</span><br><span class="line">session.evict(book);</span><br><span class="line">&#x2F;&#x2F;session.refresh(book);</span><br><span class="line">session.getTransaction().commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HibernateUtils.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.utils;</span><br><span class="line"></span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.SessionFactory;</span><br><span class="line">import org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line">public class HibernateUtils &#123;</span><br><span class="line">	private static final Configuration config;</span><br><span class="line">	private static final SessionFactory factory;</span><br><span class="line">	static &#123;</span><br><span class="line">		config&#x3D;new Configuration().configure();</span><br><span class="line">		factory&#x3D;config.buildSessionFactory();</span><br><span class="line">	&#125;</span><br><span class="line">	public static Session getSession() &#123;</span><br><span class="line">		return factory.openSession();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>Hibernate入门</title>
    <url>/2020/04/17/Hibernate%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>hibernate介绍<br>开源框架、对JDBC封装、直接操作java对象就可以操作数据库对象中的表、ORM（对象关系映射）映射框架<br>类似hibernate这样jdbc封装框架：mybatis开发中持久化层框架中主流<br>导入jar包<br>hibernate核心jar包  hibernate3.jar<br>hibernate必须jar包  hibernate/lib/required目录下<br>hibernate的jpa实现  hibernate/lib/jpa目录<br>日志 log4j<br>log4j使用<br>手动<br>配置<br>在程序中使用log4j记录日志<br>步骤一：定义记录器<br>private static final Logger log=Logger.getLogger(Log4jtest.class);<br>步骤二：使用log4j提供每个级别方法，记录日志<br>log.fatal(“致命错误”);<br>log.error(“普通错误”);<br>log.warn(“警告信息”);<br>log.info(“普通信息”);<br>log.debug(“调式信息”);<br>log.trace(“堆栈信息”);<br>常用：error、warn、info、debug<br>1）创建一个类与表的映射文件<br>1、名称<br>类名.hbm.xml——–customer.bhm.xml<br>2、位置<br>与实体在同一个包下<br>3、约束<br>Hibernate3.jar org/hibernate/hibernate-mapping-3.0.dtd文件中定义<br><!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"><br>4、元素</p>
<!-- name代表实体类名，table代表表名 -->
<pre><code>&lt;hibernate-mapping&gt;
&lt;!-- 主键生成策略--&gt;
&lt;class name=&quot;cn.itcast.domain.Customer&quot; table=&quot;customer&quot;&gt;
&lt;!-- name=id代表customer类中属性 column=id代表的是table表中的字段 --&gt;
&lt;id name=&quot;id&quot; column=&quot;id&quot;&gt;
   &lt;generator class=&quot;native&quot;/&gt;
&lt;/id&gt;
 &lt;!-- 其他属性使用properties标签映射--&gt;
 &lt;!--基于java写法--&gt;
&lt;property name=&quot;age&quot; column=&quot;age&quot; type=&quot;int&quot;/&gt;
&lt;!-- 基于hibernate写法--&gt;
&lt;property name=&quot;name&quot; column=&quot;name&quot; type=&quot;string&quot;/&gt;
&lt;!-- 基于sql写法--&gt;
&lt;property name=&quot;city&quot;&gt;
&lt;column name=&quot;city&quot; sql-type=&quot;varchar(20)&quot;&gt;&lt;/column&gt;
&lt;/property&gt;
&lt;/class&gt;
&lt;/hibernate-mapping&gt;</code></pre><p>2）创建一个hibernate配置文件<br>hibernate.cfg.xml放置在src下<br>位置：src下<br>名称：hibernate.cfg.xml<br>约束：<br><!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"><br>元素：<br>关于元素配置时<property name=””>name值可以参考hbernate/project/etc/hibernate.properties文件中配置<br>3）编写代码，执行crud代码,hibernate框架<br>得到配置对象<br>Configuration config=new Configuration();<br>得到一个SessionFactory<br>SessionFactory factory=config.buildSessionFactory();<br>得到一个Session<br>Session session=factory.openSession();<br>开启事务<br>Transaction t=session.beginTransaction();<br>执行操作，具体的crud操作<br>提交事务<br>t.commit();<br>释放资源<br>session.close();<br>factory.close();<br>操作1：添加<br>//5.1 创建一个对象<br>        Customer c=new  Customer();<br>        c.setName(“李华”);<br>        c.setAge(20);<br>        c.setCity(“北京”);（修改加上c.setId(“1”);）<br>        //5.2数据存储到表中<br>        session.save(c);(save-&gt;update)<br>操作2：查找<br>封装类中添加相应函数<br>//Customer c=(Customer) session.get(Customer.class,1);<br>Customer c=(Customer) session.load(Customer.class,1);<br>操作3：删除<br>先查询然后将session.save(c)-&gt;delete(c);<br>操作4：查询所有信息<br>1、HQL<br>Query query=session.createQuery(“from Customer”);Customer类名<br>query.list();<br>2、Sql<br>SQLQuery query=session.createSqlQuery(“select id,name,age,city”);sql语句<br>query.list();<br>3、面向对象 QBC<br>Criteria cc=session.createCriteria(Customer.class);<br>List list=cc.list();</p>
<p>hibernate的核心配置hibernate.hbm.xml文件<br>1、对于hibernate的核心配置文件存在以下两种：<br>1）hibernate.cfg.xml<br>2）hibernate.properties不能配置<mapping>映射，编码实现：<br>Configuration cfg=new Configuration( ).addResource(XXX.hbm.xml )<br>2、hibernate.cfg.xml常用属性<br> <!--输出运行时生成的SQL语句--><br>    <property name="hibernate.show_sql">true</property>显示sql语句<br><property name="format_sql">true</property>格式化sql语句<br><property name=”hibernate.hbm2ddl.auto”>create</property><br>create:启动前先drop再create、create-drop关闭系统前执行drop、update更新表结构、validate验证现有表与配置的hibernate是否一致抛出异常<br><property name=”hibernate.connection.autocommit”>true</property>设置事务自动提交，存在问题使用seesion.flush()即可</p>
<p>关于hibernate核心API<br>1、Configuration<br>用于加载hibernate配置<br>1）自动加载Configuration config=new Configuration().config();读取hibernate.cfg.xml文件<br>2）手动加载<br>Configuration config=new Configuration().config(File file);加载指定文件<br>Configuration config=new Configuration().config(String path);<br>Configuration config=new Configuration().config(Document xml);<br>也可以<br>Configuration config=new Configuration()；<br>config.addResource(“cn/itcast/domain/Customer.hbm.xml”)加载配置文件<br>config.addClass(Customer.class);默认查找customer.hbm.xml文件<br>config.setProperty(String name,String value)加载配置项<br>2、SessionFactory<br>获取session对象，SessionFactory是一个重量级组件（内存占据大）<br>可以针对获取session操作，进行抽取工具 。<br>private static final Configuration config;<br>    private static final SessionFactory factory;<br>    static {<br>        config=new Configuration().configure();<br>        factory=config.buildSessionFactory();<br>    }<br>    public static Session getSession() {<br>        return factory.openSession();<br>    }<br>SessionFactory维护hibernate中的二级缓存线程安全<br>hibernate内部维护了一个连接池，从内部的连接池中获取connection对象<br>通过SessionFactory可以获取session对象：1）openSession()随机获取2）getCurrentSession()<br>在hibernate中使用c3p0连接池<br>1）在hibernate.cfg.xml文件中配置<br>hibernate.connection.provider_class org.hibernate.connection.C3P0ConnectionProvider<br>代表当前要使用的连接池是c3p0连接池<br>2）配置c3p0连接池属性</p>
<!--在连接池中可用的数据库连接的最少数目-->
<p><property name="c3p0.min_size">5</property></p>
<!--在连接池中可用的数据库连接的最大数目-->
<p><property name="c3p0.max_size">20</property></p>
<!--连接池中数据库处于空闲时间超过timeout时间/秒，会从连接池清除-->
<p><property name="c3p0.timeout">120</property></p>
<!--每3000秒检查所有连接池中空闲连接-->
<p><property name="c3p0.idle_test_period">3000</property><br>需要导入c3p0的jar包 hibernate/lib\optional\c3p0<br>3、Session<br>代表hibernate操作回话对象，相当于connection，单线程对象，线程不安全<br>Session session=sessionFactory.openSession();<br>常用API<br>save 完成插入<br>update 完成修改<br>delete 完成删除<br>get/load根据主键字段查询 get直接获取对象、load延迟加载<br>createQuery\createSQLQuery创建查询对象Query接受HQL、SQL<br>createCriteria()面向对象条件查询<br>4、Transaction<br>Transaction接口主要用于管理事务，它是Hibernate的数据库事务接口，且对底层的事务接口进行了封装。<br>Transaction t=sessopn.beginTrasaction();<br>rollback()事务回滚<br>commit()事务提交<br>wasCommitted()返回boolean,判断事务是否提交<br>wasRollback() 返回boolean判断事务是否回滚<br>5、Query<br>1）session.createQuery(String hql);<br>①list()返回List<Object>,代表查询出的所有信息<br>②uniqueResult();返回一个Object，查询结果只返回一个值时，可以使用<br>③分页查询<br>setFirstResult(int firstresult);，设置返回结果从第几条开始<br>setMaxResults(int maxresults);，设置本次返回结果记录条数<br>④查询某一部分属性信息<br>例如：得到customer类的id与name属性<br>在Customer类中添加构造方法，构造方法参数id,name<br>HQL语句 select new Customer(id,name) from Customer<br>⑤条件查询<br>1、可以使用占位符”?”<br>from Customer where name=?;<br>通过query.setParameter(0,值);从0开始记位进行赋值<br>2、可以直接给要赋值字段起名字<br>from Customer where name=:a;<br>query.setParameter(“a”,值);<br>2）session.createSQLQuery(String sql);<br>3）session.createCriteria(Object);<br>Criteria criteria=session.createCriteria(Customer.class);<br>①查询全部<br>List<Customer> cs=criteria.list();<br>for(Customer c:cs) {<br>System.out.println(c);<br>}<br>②只返回一个<br>Customer cs=(Customer)criteria.uniqueResult();<br>③条件查询<br>AND:criteria.add(Restrictions.eq(“id”, 50)).add(Restrictions.eq(“name”,”name2”));<br>OR:criteria.add(Restrictions.or(Restrictions.eq(“id”, 50),Restrictions.eq(“name”,”name3”)));<br>④分页<br>setFirstResult();<br>setMaxResults;同Query</p>
<p>hbm映射文件配置<br>1、持久化对象presisdent object(PO)<br>PO=POJO（简单的javabean）+hbm映射配置<br>编写规则：<br>1）必须提供无参数public构造器<br>2）所有private，提供public的getter和setter方法<br>3）必须提供标识属性与数据表中主键对应，例如customer；类id属性<br>4）PO类属性尽量使用基本数据类型包装，例int -&gt;Integer<br>5）不要用final修饰<br>关于get和load的区别<br>session.get方法，查询立即执行，返回customer类对象<br>session.load方法，默认采用延迟加载数据方法，不会立即查询，返回Customer类子类对象（动态申城代理对象）如果PO类使用final修饰，load无法创建代理对象，返回目标对象本身。<br>都是根据id查找：<br>1、如果查询id不存在<br>get方法返回的时null、load方法抛出异常ObjectNotFoundException<br>2、如果查询是，id存在<br>get方法返回的就是PO对象<br>load方法返回的是一个代理对象，如果这时没有使用它，没有向DB发送sql语句</p>
<p>OID<br>OID指与数据表中主键对应PO类中属性，例如customer类id属性<br>hibernate框架使用OID区分不同PO对象<br>例如：内存中两个PO对象，只要具有相同OID，hibernate认为是统一个对象<br>hibernate不允许缓存同样OID的两个不同对象<br>持久化对象的状态是通过OID来区分的。</p>
<p>主键生成策略：<br>1、主键分类：<br>自然主键：具备实际意义<br>代理主键：不具备意义，知识用来标识当前记录（主要使用）<br>省略catalog，表创建到jdbcurl指定的数据库中<br>2、主键生成策略分类<br><generator class="increment"/>生成策略<br>Increment：select max(id) 、insert max(id)+1、主键冲突问题不依赖数据库<br>Identity：自动增长的字段类型。auto_increment、五线程问题、oracle不使用依赖数据库<br>Sequence：生成标识符、依赖数据库<br>Native（使用）：主键交给数据库操作，根据数据库特点自动选择<br>Uuid：前五种都是代理主键<br>Assigned：自然主键（必须在程序中指定，无法自动生成）<br>复合主键：一个表中多个属性共同作为主键<br><composite-id><br><key-property name=""></key-property><br><key-property name=""></key-property><br></composite-id><br>Hibernate是持久层的ORM映射框架，专注于数据的持久化工作。所谓的持久化，就是将内存中的数据永久存储到关系型数据库中</p>
]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫初试</title>
    <url>/2020/04/15/python%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%95/</url>
    <content><![CDATA[<p>通过学习章鱼互联网学院的一个爬虫实战应用的一个例子，来对近期冠状肺炎全国变化趋势进行进行数据获取、可视化操作.</p>
<p>使用</p>
<p>test0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment">#抓取json数据</span></span><br><span class="line">url=<span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&amp;callback=&amp;_=%d'</span>%int(time.time()*<span class="number">1000</span>)</span><br><span class="line">data=json.loads(requests.get(url=url).json()[<span class="string">'data'</span>])</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]</span><br><span class="line">print(data)</span><br><span class="line">num=data[<span class="string">'areaTree'</span>][<span class="number">0</span>][<span class="string">'children'</span>]</span><br><span class="line">print(num)</span><br><span class="line">print(len(num))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> num:</span><br><span class="line">    print(item[<span class="string">'name'</span>],end=<span class="string">" "</span>)<span class="comment">#不换行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"\n"</span>)<span class="comment">#换行</span></span><br><span class="line">print(data[<span class="string">'areaTree'</span>][<span class="number">0</span>][<span class="string">'name'</span>])<span class="comment">#国家名称</span></span><br><span class="line"><span class="comment">#显示指定children数据</span></span><br><span class="line">HangKong=num[<span class="number">3</span>][<span class="string">'children'</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> HangKong:</span><br><span class="line">    print(data)</span><br><span class="line"><span class="comment">#解析数据（确诊、疑似、死亡、治愈）</span></span><br><span class="line">total_data=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> num:</span><br><span class="line">    <span class="keyword">if</span> item[<span class="string">'name'</span>] <span class="keyword">not</span> <span class="keyword">in</span> total_data:</span><br><span class="line">        total_data.update(&#123;item[<span class="string">'name'</span>]:<span class="number">0</span>&#125;)</span><br><span class="line">    <span class="keyword">for</span> city_data <span class="keyword">in</span> item[<span class="string">'children'</span>]:</span><br><span class="line">        total_data[item[<span class="string">'name'</span>]]+=int(city_data[<span class="string">'total'</span>][<span class="string">'confirm'</span>])</span><br><span class="line">print(total_data)</span><br><span class="line"></span><br><span class="line">&lt;!--geo = Geo(</span><br><span class="line">    <span class="string">"全国城市疫情确诊人数"</span>,</span><br><span class="line">    <span class="string">"confirm"</span>,</span><br><span class="line">    title_color=<span class="string">"#fff"</span>,</span><br><span class="line">    title_pos=<span class="string">"center"</span>,</span><br><span class="line">    width=<span class="number">1200</span>,</span><br><span class="line">    height=<span class="number">600</span>,</span><br><span class="line">    background_color=<span class="string">"#404a59"</span>,</span><br><span class="line">)</span><br><span class="line">attr, value = geo.cast(data)</span><br><span class="line">geo.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    attr,</span><br><span class="line">    value,</span><br><span class="line">    visual_range=[<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">    visual_text_color=<span class="string">"#fff"</span>,</span><br><span class="line">    symbol_size=<span class="number">15</span>,</span><br><span class="line">    is_visualmap=<span class="literal">True</span>,</span><br><span class="line">    is_piecewise=<span class="literal">True</span>,</span><br><span class="line">    visual_split_number=<span class="number">6</span>,</span><br><span class="line">)</span><br><span class="line">geo.render(path='./疫情.html')--&gt;地图显示其确诊分布情况</span><br><span class="line"></span><br><span class="line">names=[]</span><br><span class="line">nums=[]</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> total_data.items():</span><br><span class="line">    names.append(k)</span><br><span class="line">    nums.append(v)</span><br><span class="line">print(names)</span><br><span class="line">print(nums)</span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">plt.figure(figsize=[<span class="number">10</span>,<span class="number">6</span>])</span><br><span class="line">plt.bar(names,nums,width=<span class="number">0.3</span>,color=<span class="string">'green'</span>)</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">"地区"</span>,size=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">"人数"</span>,rotation=<span class="number">90</span>,size=<span class="number">16</span>)</span><br><span class="line">plt.title(<span class="string">"全国疫情确诊数对比图"</span>,size=<span class="number">16</span>)</span><br><span class="line">plt.xticks(list(names),rotation=<span class="number">-45</span>,size=<span class="number">10</span>)</span><br><span class="line"><span class="comment">#显示数字</span></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> zip(names,nums):</span><br><span class="line">    plt.text(a,b,b,ha=<span class="string">'center'</span>,va=<span class="string">'bottom'</span>,size=<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment">#数据抓取</span></span><br><span class="line">url=<span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=wuwei_ww_cn_day_counts'</span></span><br><span class="line">html=requests.get(url).text</span><br><span class="line">unicodestr=json.loads(html)<span class="comment">#将string转化为dict</span></span><br><span class="line">new_list=unicodestr.get(<span class="string">'data'</span>)<span class="comment">#获取data中的内容，取出的内容为str</span></span><br><span class="line">a=json.loads(new_list)<span class="comment">#对new_list再次进行load，使其变为dict才可使用</span></span><br><span class="line">header=[<span class="string">'date'</span>,<span class="string">'confirm'</span>,<span class="string">'suspected'</span>,<span class="string">'dead'</span>,<span class="string">'cure'</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./data.csv'</span>,encoding=<span class="string">'utf-8-sig'</span>,mode=<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv=csv.writer(f)</span><br><span class="line">    f_csv.writerow(header)</span><br><span class="line">f.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./data.csv'</span>,encoding=<span class="string">'UTF-8'</span>,mode=<span class="string">'a+'</span>,newline=<span class="string">""</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f_csv=csv.writer(f)</span><br><span class="line">        print(data)</span><br><span class="line">        f_csv.writerow(data)</span><br><span class="line">    f.close()</span><br><span class="line">b=len(a)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;b:</span><br><span class="line">    data=(a[i][<span class="string">'date'</span>])</span><br><span class="line">    confirm=(a[i][<span class="string">'confirm'</span>])</span><br><span class="line">    suspect = (a[i][<span class="string">'suspect'</span>])</span><br><span class="line">    dead=(a[i][<span class="string">'dead'</span>])</span><br><span class="line">    heal=(a[i][<span class="string">'heal'</span>])</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    tap=(data,confirm,suspect,dead,heal)</span><br><span class="line">    save_data(tap)</span><br><span class="line">print(<span class="string">"完成爬取----"</span>)</span><br></pre></td></tr></table></figure>

<p>test2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取数据并可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br><span class="line">x_data=df[<span class="string">'date'</span>]</span><br><span class="line">y_confirm=df[<span class="string">'confirm'</span>]</span><br><span class="line">y_suspected=df[<span class="string">'suspected'</span>]</span><br><span class="line">y_dead=df[<span class="string">'dead'</span>]</span><br><span class="line">y_cure=df[<span class="string">'cure'</span>]</span><br><span class="line">plt.title(<span class="string">"肺炎疫情趋势变化图"</span>)</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]</span><br><span class="line">plt.plot(x_data,y_confirm,color=<span class="string">'red'</span>,linewidth=<span class="number">2.0</span>,linestyle=<span class="string">'-'</span>,label=<span class="string">"确诊人数"</span>)</span><br><span class="line">plt.plot(x_data,y_suspected,color=<span class="string">'yellow'</span>,linewidth=<span class="number">2.0</span>,linestyle=<span class="string">'-'</span>,label=<span class="string">'疑似人数'</span>)</span><br><span class="line">plt.plot(x_data,y_dead,color=<span class="string">'green'</span>,linewidth=<span class="number">2.0</span>,linestyle=<span class="string">'-'</span>,label=<span class="string">'死亡人数'</span>)</span><br><span class="line">plt.plot(x_data,y_cure,color=<span class="string">'grey'</span>,linewidth=<span class="number">2.0</span>,linestyle=<span class="string">'-'</span>,label=<span class="string">'治愈人数'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdvboeyqkxj30hs0dc0to.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdvbp7l3bxj30rs0gojsm.jpg" alt=""></p>
<p>data.csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date,confirm,suspected,dead,cure</span><br><span class="line">01&#x2F;21,440,37,9,25</span><br><span class="line">01&#x2F;13,41,0,1,0</span><br><span class="line">01&#x2F;14,41,0,1,0</span><br><span class="line">01&#x2F;15,41,0,2,5</span><br><span class="line">01&#x2F;16,45,0,2,8</span><br><span class="line">01&#x2F;17,62,0,2,12</span><br><span class="line">01&#x2F;18,198,0,3,17</span><br><span class="line">01&#x2F;19,275,0,4,18</span><br><span class="line">01&#x2F;24,1297,1965,41,38</span><br><span class="line">01&#x2F;23,835,1072,25,34</span><br><span class="line">01&#x2F;22,574,393,17,25</span><br><span class="line">01&#x2F;20,291,54,6,25</span><br><span class="line">01&#x2F;25,1985,2684,56,49</span><br><span class="line">01&#x2F;26,2761,5794,80,51</span><br><span class="line">01&#x2F;27,4535,6973,106,60</span><br><span class="line">01&#x2F;28,5997,9239,132,103</span><br><span class="line">01&#x2F;29,7736,12167,170,124</span><br><span class="line">01&#x2F;30,9720,15238,213,171</span><br><span class="line">01&#x2F;31,11821,17988,259,243</span><br><span class="line">02&#x2F;01,14411,19544,304,328</span><br><span class="line">02&#x2F;02,17238,21558,361,475</span><br><span class="line">02&#x2F;03,20471,23214,425,632</span><br><span class="line">02&#x2F;04,24363,23260,491,892</span><br><span class="line">02&#x2F;05,28060,24702,564,1153</span><br><span class="line">02&#x2F;06,31211,26359,637,1542</span><br><span class="line">02&#x2F;07,34598,27657,723,2052</span><br><span class="line">02&#x2F;08,37251,28942,812,2651</span><br><span class="line">02&#x2F;09,40235,23589,909,3283</span><br><span class="line">02&#x2F;10,42708,21675,1017,3998</span><br><span class="line">02&#x2F;11,44730,16067,1114,4742</span><br><span class="line">02&#x2F;12,59882,13435,1368,5915</span><br><span class="line">02&#x2F;13,63932,10109,1381,6728</span><br><span class="line">02&#x2F;14,66576,8969,1524,8101</span><br><span class="line">02&#x2F;15,68584,8228,1666,9425</span><br><span class="line">02&#x2F;16,70635,7264,1772,10853</span><br><span class="line">02&#x2F;17,72528,6242,1870,12561</span><br><span class="line">02&#x2F;18,74279,5248,2006,14387</span><br><span class="line">02&#x2F;19,75002,4922,2121,16157</span><br><span class="line">02&#x2F;20,75993,5206,2239,18266</span><br><span class="line">02&#x2F;21,76392,5365,2348,20673</span><br><span class="line">02&#x2F;22,77041,4148,2445,22907</span><br><span class="line">02&#x2F;23,77262,3434,2595,24757</span><br><span class="line">02&#x2F;24,77779,2824,2666,27353</span><br><span class="line">02&#x2F;25,78190,2491,2718,29775</span><br><span class="line">02&#x2F;26,78630,2358,2747,32531</span><br><span class="line">02&#x2F;27,78959,2308,2791,36157</span><br><span class="line">02&#x2F;28,79389,1418,2838,39049</span><br><span class="line">02&#x2F;29,79968,851,2873,41675</span><br><span class="line">03&#x2F;01,80174,715,2915,44518</span><br><span class="line">03&#x2F;02,80302,587,2946,47260</span><br><span class="line">03&#x2F;03,80422,520,2984,49914</span><br><span class="line">03&#x2F;04,80565,522,3015,52109</span><br><span class="line">03&#x2F;05,80710,482,3045,53793</span><br><span class="line">03&#x2F;06,80813,502,3073,55477</span><br><span class="line">03&#x2F;07,80859,458,3100,57143</span><br><span class="line">03&#x2F;08,80904,421,3123,58684</span><br><span class="line">03&#x2F;09,80924,349,3140,59982</span><br><span class="line">03&#x2F;10,80955,285,3162,61567</span><br><span class="line">03&#x2F;11,80992,253,3173,62887</span><br><span class="line">03&#x2F;12,81003,147,3180,64216</span><br><span class="line">03&#x2F;13,81021,115,3194,65649</span><br><span class="line">03&#x2F;14,81048,113,3204,67022</span><br><span class="line">03&#x2F;15,81077,134,3218,67863</span><br><span class="line">03&#x2F;16,81116,128,3231,68799</span><br><span class="line">03&#x2F;17,81151,119,3242,69725</span><br><span class="line">03&#x2F;18,81235,105,3250,70547</span><br><span class="line">03&#x2F;19,81300,104,3253,71284</span><br><span class="line">03&#x2F;20,81416,106,3261,71876</span><br><span class="line">03&#x2F;21,81498,118,3267,72382</span><br><span class="line">03&#x2F;22,81600,136,3276,72841</span><br><span class="line">03&#x2F;23,81747,132,3283,73299</span><br><span class="line">03&#x2F;24,81846,134,3287,73791</span><br><span class="line">03&#x2F;25,81960,159,3293,74196</span><br><span class="line">03&#x2F;26,82078,189,3298,74737</span><br><span class="line">03&#x2F;27,82213,184,3301,75122</span><br><span class="line">03&#x2F;28,82341,174,3306,75600</span><br><span class="line">03&#x2F;29,82447,168,3311,75937</span><br><span class="line">03&#x2F;30,82545,183,3314,76225</span><br><span class="line">03&#x2F;31,82631,172,3321,76415</span><br><span class="line">04&#x2F;01,82724,153,3327,76610</span><br><span class="line">04&#x2F;02,82802,135,3331,76785</span><br><span class="line">04&#x2F;03,82861,114,3335,76984</span><br><span class="line">04&#x2F;04,82930,107,3338,77210</span><br><span class="line">04&#x2F;05,83005,88,3340,77348</span><br><span class="line">04&#x2F;06,83071,89,3340,77450</span><br><span class="line">04&#x2F;07,83157,83,3342,77586</span><br><span class="line">04&#x2F;08,83249,73,3344,77711</span><br><span class="line">04&#x2F;09,83305,53,3345,77838</span><br><span class="line">04&#x2F;10,83369,44,3349,77935</span><br><span class="line">04&#x2F;11,83482,82,3349,78020</span><br><span class="line">04&#x2F;12,83602,72,3351,78145</span><br><span class="line">04&#x2F;13,83696,72,3351,78262</span><br><span class="line">04&#x2F;14,83745,73,3352,78389</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>1130 Infix Expression</title>
    <url>/2020/04/12/1130-Infix-Expression/</url>
    <content><![CDATA[<p>Given a syntax tree (binary), you are supposed to output the corresponding infix expression, with parentheses reflecting the precedences of the operators.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 20) which is the total number of nodes in the syntax tree. Then N lines follow, each gives the information of a node (the <em>i</em>-th line corresponds to the <em>i</em>-th node) in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data left_child right_child</span><br></pre></td></tr></table></figure>

<p>where <code>data</code> is a string of no more than 10 characters, <code>left_child</code> and <code>right_child</code> are the indices of this node’s left and right children, respectively. The nodes are indexed from 1 to N. The NULL link is represented by −1. The figures 1 and 2 correspond to the samples 1 and 2, respectively.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://images.ptausercontent.com/4d1c4a98-33cc-45ff-820f-c548845681ba.JPG" alt="infix1.JPG"></th>
<th align="center"><img src="https://images.ptausercontent.com/b5a3c36e-91ad-494a-8853-b46e1e8b60cc.JPG" alt="infix2.JPG"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Figure 1</td>
<td align="center">Figure 2</td>
</tr>
</tbody></table>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, print in a line the infix expression, with parentheses reflecting the precedences of the operators. Note that there must be no extra parentheses for the final expression, as is shown by the samples. There must be no space between any symbols.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">* 8 7</span><br><span class="line">a -1 -1</span><br><span class="line">* 4 1</span><br><span class="line">+ 2 5</span><br><span class="line">b -1 -1</span><br><span class="line">d -1 -1</span><br><span class="line">- -1 6</span><br><span class="line">c -1 -1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(a+b)*(c*(-d))</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">2.35 -1 -1</span><br><span class="line">* 6 1</span><br><span class="line">- -1 4</span><br><span class="line">% 7 8</span><br><span class="line">+ 2 3</span><br><span class="line">a -1 -1</span><br><span class="line">str -1 -1</span><br><span class="line">871 -1 -1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(a*2.35)+(-(str%871))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node &#123;</span><br><span class="line">	string data;</span><br><span class="line">	int l, r;</span><br><span class="line">&#125;a[100];</span><br><span class="line">string dfs(int root) &#123;</span><br><span class="line">	if(a[root].l &#x3D;&#x3D; -1 &amp;&amp; a[root].r &#x3D;&#x3D; -1)&#123;</span><br><span class="line">		return a[root].data;</span><br><span class="line">	&#125;</span><br><span class="line">	if(a[root].l &#x3D;&#x3D; -1 &amp;&amp; a[root].r !&#x3D; -1)&#123;</span><br><span class="line">		return &quot;(&quot; +  a[root].data + dfs(a[root].r) + &quot;)&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	if(a[root].l !&#x3D; -1 &amp;&amp; a[root].r !&#x3D; -1)&#123;</span><br><span class="line">		return &quot;(&quot; +  dfs(a[root].l) + a[root].data + dfs(a[root].r) + &quot;)&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	int sum[100] &#x3D; &#123;0&#125;, n, root &#x3D; 1;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	for(int i  &#x3D; 1; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; a[i].data &gt;&gt; a[i].l &gt;&gt; a[i].r;</span><br><span class="line">		if(a[i].l !&#x3D; -1)&#123;</span><br><span class="line">			sum[a[i].l] &#x3D; 1;</span><br><span class="line">		&#125;</span><br><span class="line">		if(a[i].r !&#x3D; -1)&#123;</span><br><span class="line">			sum[a[i].r] &#x3D; 1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	while(sum[root] &#x3D;&#x3D; 1) &#123;</span><br><span class="line">		root++;</span><br><span class="line">	&#125;</span><br><span class="line">	string ans &#x3D; dfs(root);</span><br><span class="line">	if(ans[0] &#x3D;&#x3D; &#39;(&#39;) ans &#x3D; ans.substr(1,ans.size()-2);</span><br><span class="line">	cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开始没看懂题意，直到看到示例才大概知道其需要根据给出的节点输出中缀表达式，并且用()来划分运算级别。知道每个节点的子节点下标直接dfs递归，但需要记住左不空右空不存在</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1131 Subway Map</title>
    <url>/2020/04/09/1131-Subway-Map/</url>
    <content><![CDATA[<p>In the big cities, the subway systems always look so complex to the visitors. To give you some sense, the following figure shows the map of Beijing subway. Now you are supposed to help people with your computer skills! Given the starting position of your user, your task is to find the quickest way to his/her destination.</p>
<p><img src="https://images.ptausercontent.com/55799c23-4bdb-4e32-af7f-6d41accfdd2b.jpg" alt="subwaymap.jpg"></p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤ 100), the number of subway lines. Then <em>N</em> lines follow, with the <em>i</em>-th (<em>i</em>=1,⋯,<em>N</em>) line describes the <em>i</em>-th subway line in the format:</p>
<p><em>M</em> S[1] S[2] … S[<em>M</em>]</p>
<p>where <em>M</em> (≤ 100) is the number of stops, and S[<em>i</em>]’s (<em>i</em>=1,⋯,<em>M</em>) are the indices of the stations (the indices are 4-digit numbers from 0000 to 9999) along the line. It is guaranteed that the stations are given in the correct order – that is, the train travels between S[<em>i</em>] and S[<em>i</em>+1] (<em>i</em>=1,⋯,<em>M</em>−1) without any stop.</p>
<p>Note: It is possible to have loops, but not self-loop (no train starts from S and stops at S without passing through another station). Each station interval belongs to a unique subway line. Although the lines may cross each other at some stations (so called “transfer stations”), no station can be the conjunction of more than 5 lines.</p>
<p>After the description of the subway, another positive integer <em>K</em> (≤ 10) is given. Then <em>K</em> lines follow, each gives a query from your user: the two indices as the starting station and the destination, respectively.</p>
<p>The following figure shows the sample map.</p>
<p><img src="https://images.ptausercontent.com/932c8f1b-7dd5-489d-a774-a91c1fabba7f.jpg" alt="samplemap.jpg"></p>
<p>Note: It is guaranteed that all the stations are reachable, and all the queries consist of legal station numbers.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print in a line the minimum number of stops. Then you are supposed to show the optimal path in a friendly format as the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Take Line#X1 from S1 to S2.</span><br><span class="line">Take Line#X2 from S2 to S3.</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>where <code>X</code><em>i</em>‘s are the line numbers and <code>S</code><em>i</em>‘s are the station indices. Note: Besides the starting and ending stations, only the transfer stations shall be printed.</p>
<p>If the quickest path is not unique, output the one with the minimum number of transfers, which is guaranteed to be unique.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">7 1001 3212 1003 1204 1005 1306 7797</span><br><span class="line">9 9988 2333 1204 2006 2005 2004 2003 2302 2001</span><br><span class="line">13 3011 3812 3013 3001 1306 3003 2333 3066 3212 3008 2302 3010 3011</span><br><span class="line">4 6666 8432 4011 1306</span><br><span class="line">3</span><br><span class="line">3011 3013</span><br><span class="line">6666 2001</span><br><span class="line">2004 3001</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">Take Line#3 from 3011 to 3013.</span><br><span class="line">10</span><br><span class="line">Take Line#4 from 6666 to 1306.</span><br><span class="line">Take Line#3 from 1306 to 2302.</span><br><span class="line">Take Line#2 from 2302 to 2001.</span><br><span class="line">6</span><br><span class="line">Take Line#2 from 2004 to 1204.</span><br><span class="line">Take Line#1 from 1204 to 1306.</span><br><span class="line">Take Line#3 from 1306 to 3001.</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">v</span><span class="params">(<span class="number">10000</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">10000</span>],minSum,minTransfer,start,End;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;<span class="built_in">line</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;path,tempPath;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">transfer</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">-1</span>,preline=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">line</span>[a[i<span class="number">-1</span>]*<span class="number">10000</span>+a[i]]!=preline) &#123;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		preline=<span class="built_in">line</span>[a[i<span class="number">-1</span>]*<span class="number">10000</span>+a[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (node==End&amp;&amp;(cnt&lt;minSum||(cnt==minSum&amp;&amp;<span class="built_in">transfer</span>(tempPath)&lt;minTransfer))) &#123;</span><br><span class="line">		minSum=cnt;</span><br><span class="line">		minTransfer=<span class="built_in">transfer</span>(tempPath);</span><br><span class="line">		path=tempPath;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (node==End) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[node].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (visit[v[node][i]]==<span class="number">0</span>) &#123;</span><br><span class="line">			visit[v[node][i]]=<span class="number">1</span>;</span><br><span class="line">			tempPath.push_back(v[node][i]);</span><br><span class="line">			dfs(v[node][i], cnt+<span class="number">1</span>);</span><br><span class="line">			visit[v[node][i]]=<span class="number">0</span>;</span><br><span class="line">			tempPath.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,k,pre,temp;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m,&amp;pre);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">			v[pre].push_back(temp);</span><br><span class="line">			v[temp].push_back(pre);</span><br><span class="line">			<span class="built_in">line</span>[pre*<span class="number">10000</span>+temp]=<span class="built_in">line</span>[temp*<span class="number">10000</span>+pre]=i+<span class="number">1</span>;</span><br><span class="line">			pre=temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;start,&amp;End);</span><br><span class="line">		minSum=<span class="number">10000</span>,minTransfer=<span class="number">10000</span>;</span><br><span class="line">		tempPath.<span class="built_in">clear</span>();</span><br><span class="line">		tempPath.push_back(start);</span><br><span class="line">		visit[start]=<span class="number">1</span>;</span><br><span class="line">		dfs(start, <span class="number">0</span>);</span><br><span class="line">		visit[start]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minSum);</span><br><span class="line">		<span class="keyword">int</span> preline=<span class="number">0</span>,preTransfer=start;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;path.<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">line</span>[path[j<span class="number">-1</span>]*<span class="number">10000</span>+path[j]]!=preline) &#123;</span><br><span class="line">				<span class="keyword">if</span> (preline!=<span class="number">0</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"Take Line#%d from %04d to %04d.\n"</span>,preline,preTransfer,path[j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				preline=<span class="built_in">line</span>[path[j<span class="number">-1</span>]*<span class="number">10000</span>+path[j]];</span><br><span class="line">				preTransfer=path[j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Take Line#%d from %04d to %04d.\n"</span>,preline,preTransfer,End);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出每条地铁线路的站点号以及测试路线的起始站，要求按照需要乘坐站数最少、换乘次数最少来查询。采用将每条线路编号与站点间map，在DFS遍历后得到的vector中每个数据前后比较即可得到换乘次数，DFS的层数即是乘坐的站数，输出结果时也要用到map来划段。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1134 Vertex Cover</title>
    <url>/2020/04/08/1134-Vertex-Cover/</url>
    <content><![CDATA[<p>A <strong>vertex cover</strong> of a graph is a set of vertices such that each edge of the graph is incident to at least one vertex of the set. Now given a graph with several vertex sets, you are supposed to tell if each of them is a vertex cover or not.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers <em>N</em> and <em>M</em> (both no more than 104), being the total numbers of vertices and the edges, respectively. Then <em>M</em> lines follow, each describes an edge by giving the indices (from 0 to <em>N</em>−1) of the two ends of the edge.</p>
<p>After the graph, a positive integer <em>K</em> (≤ 100) is given, which is the number of queries. Then <em>K</em> lines of queries follow, each in the format:</p>
<p><em>N**v</em> <em>v</em>[1] <em>v</em>[2]⋯<em>v</em>[<em>N*</em>v*]</p>
<p>where <em>N**v</em> is the number of vertices in the set, and <em>v</em>[<em>i</em>]’s are the indices of the vertices.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, print in a line <code>Yes</code> if the set is a vertex cover, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 11</span><br><span class="line">8 7</span><br><span class="line">6 8</span><br><span class="line">4 5</span><br><span class="line">8 4</span><br><span class="line">8 1</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">9 8</span><br><span class="line">9 1</span><br><span class="line">1 0</span><br><span class="line">2 4</span><br><span class="line">5</span><br><span class="line">4 0 3 8 4</span><br><span class="line">6 6 1 7 5 4 9</span><br><span class="line">3 1 8 4</span><br><span class="line">2 2 8</span><br><span class="line">7 9 8 7 6 5 4 2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,k,nv,a,b,num;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		v[a].push_back(i);</span><br><span class="line">		v[b].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nv);</span><br><span class="line">		<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vc(m,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nv;j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;v[num].<span class="built_in">size</span>();k++) &#123;</span><br><span class="line">				vc[v[num][k]]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vc[j]==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断给出的图中每条边至少存在一点在测试集合中，解题思路将每个点与边的代号绑定，从测试集合出发判断边是否符合条件</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1135 Is It A Red-Black Tree</title>
    <url>/2020/03/28/1135-Is-It-A-Red-Black-Tree/</url>
    <content><![CDATA[<p>There is a kind of balanced binary search tree named <strong>red-black tree</strong> in the data structure. It has the following 5 properties:</p>
<ul>
<li>(1) Every node is either red or black.</li>
<li>(2) The root is black.</li>
<li>(3) Every leaf (NULL) is black.</li>
<li>(4) If a node is red, then both its children are black.</li>
<li>(5) For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</li>
</ul>
<p>For example, the tree in Figure 1 is a red-black tree, while the ones in Figure 2 and 3 are not.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://images.ptausercontent.com/eff80bd4-c833-4818-9786-81680d1b304a.jpg" alt="rbf1.jpg"></th>
<th align="center"><img src="https://images.ptausercontent.com/b11184df-eaab-451c-b7d4-7fc1dc82b028.jpg" alt="rbf2.jpg"></th>
<th align="center"><img src="https://images.ptausercontent.com/625c532b-22fc-47b9-80ea-0537cf00d922.jpg" alt="rbf3.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Figure 1</td>
<td align="center">Figure 2</td>
<td align="center">Figure 3</td>
</tr>
</tbody></table>
<p>For each given binary search tree, you are supposed to tell if it is a legal red-black tree.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains several test cases. The first line gives a positive integer K (≤30) which is the total number of cases. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the preorder traversal sequence of the tree. While all the keys in a tree are positive integers, we use negative signs to represent red nodes. All the numbers in a line are separated by a space. The sample input cases correspond to the trees shown in Figure 1, 2 and 3.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in a line “Yes” if the given tree is a red-black tree, or “No” if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">9</span><br><span class="line">7 -2 1 5 -4 -11 8 14 -15</span><br><span class="line">9</span><br><span class="line">11 -2 1 -7 5 -4 8 14 -15</span><br><span class="line">8</span><br><span class="line">10 -7 5 -6 8 15 -11 17</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">struct node&#123;</span><br><span class="line">	int roots;</span><br><span class="line">	struct node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line">node* create(node *root,int v)&#123;</span><br><span class="line">	if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">		root&#x3D;new node();</span><br><span class="line">		root-&gt;roots&#x3D;v;</span><br><span class="line">		root-&gt;left&#x3D;root-&gt;right&#x3D;NULL;</span><br><span class="line">	&#125;else if (abs(v)&lt;&#x3D;abs(root-&gt;roots)) &#123;</span><br><span class="line">		root-&gt;left&#x3D;create(root-&gt;left, v);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		root-&gt;right&#x3D;create(root-&gt;right, v);</span><br><span class="line">	&#125;</span><br><span class="line">	return root;</span><br><span class="line">&#125;</span><br><span class="line">bool judge1(node *root)&#123;</span><br><span class="line">	if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	if (root-&gt;roots&lt;0) &#123;</span><br><span class="line">		if (root-&gt;left!&#x3D;NULL&amp;&amp;root-&gt;left-&gt;roots&lt;0) &#123;</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">		if (root-&gt;right!&#x3D;NULL&amp;&amp;root-&gt;right-&gt;roots&lt;0) &#123;</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return judge1(root-&gt;left)&amp;&amp;judge1(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">int getnum(node *root)&#123;</span><br><span class="line">	if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	int l&#x3D;getnum(root-&gt;left);</span><br><span class="line">	int r&#x3D;getnum(root-&gt;right);</span><br><span class="line">	return root-&gt;roots&gt;0?max(l,r)+1:max(l,r);</span><br><span class="line">&#125;</span><br><span class="line">bool judge2(node *root)&#123;</span><br><span class="line">	if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	int l&#x3D;getnum(root-&gt;left);</span><br><span class="line">	int r&#x3D;getnum(root-&gt;right);</span><br><span class="line">	if (l!&#x3D;r) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	return judge2(root-&gt;left)&amp;&amp;judge2(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">int main( )&#123;</span><br><span class="line">	int k,n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;k);</span><br><span class="line">	for (int i&#x3D;0;i&lt;k;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">		v.resize(n);</span><br><span class="line">		node *root&#x3D;NULL;</span><br><span class="line">		for (int j&#x3D;0;j&lt;n;j++) &#123;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;v[j]);</span><br><span class="line">			root&#x3D;create(root, v[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		if (v[0]&lt;0||judge1(root)&#x3D;&#x3D;false||judge2(root)&#x3D;&#x3D;false) &#123;</span><br><span class="line">			printf(&quot;No\n&quot;);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			printf(&quot;Yes\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出二叉搜索树的前序遍历，根据给出的条件判断是否为红黑树，主要对红节点子节点是否全为黑，以及任意节点到根节点路径上黑节点个数是否一致</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1137 Final Grading</title>
    <url>/2020/03/28/1137-Final-Grading/</url>
    <content><![CDATA[<p>For a student taking the online course “Data Structures” on China University MOOC (<a href="http://www.icourse163.org/" target="_blank" rel="noopener">http://www.icourse163.org/</a>), to be qualified for a certificate, he/she must first obtain no less than 200 points from the online programming assignments, and then receive a final grade no less than 60 out of 100. The final grade is calculated by <em>G</em>=(<em>G<strong>m</strong>i<strong>d<em>−</em>t</strong>e<strong>r</strong>m<em>×40%+</em>G<strong>f</strong>i<strong>n</strong>a<strong>l*×60%) if *G</strong>m<strong>i</strong>d<em>−</em>t<strong>e</strong>r**m</em>&gt;<em>G<strong>f</strong>i<strong>n</strong>a**l</em>, or <em>G<strong>f</strong>i<strong>n</strong>a**l</em> will be taken as the final grade <em>G</em>. Here <em>G<strong>m</strong>i<strong>d<em>−</em>t</strong>e<strong>r</strong>m</em> and <em>G<strong>f</strong>i<strong>n</strong>a**l</em> are the student’s scores of the mid-term and the final exams, respectively.</p>
<p>The problem is that different exams have different grading sheets. Your job is to write a program to merge all the grading sheets into one.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives three positive integers: P , the number of students having done the online programming assignments; M, the number of students on the mid-term list; and N, the number of students on the final exam list. All the numbers are no more than 10,000.</p>
<p>Then three blocks follow. The first block contains P online programming scores <em>G**p</em>‘s; the second one contains M mid-term scores <em>G<strong>m</strong>i<strong>d<em>−</em>t</strong>e<strong>r</strong>m</em>‘s; and the last one contains N final exam scores <em>G<strong>f</strong>i<strong>n</strong>a**l</em>‘s. Each score occupies a line with the format: <code>StudentID Score</code>, where <code>StudentID</code> is a string of no more than 20 English letters and digits, and <code>Score</code> is a nonnegative integer (the maximum score of the online programming is 900, and that of the mid-term and final exams is 100).</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, print the list of students who are qualified for certificates. Each student occupies a line with the format:</p>
<p><code>StudentID</code> <em>G**p</em> <em>G<strong>m</strong>i<strong>d<em>−</em>t</strong>e<strong>r</strong>m</em> <em>G<strong>f</strong>i<strong>n</strong>a**l</em> <em>G</em></p>
<p>If some score does not exist, output “−1” instead. The output must be sorted in descending order of their final grades (<em>G</em> must be rounded up to an integer). If there is a tie, output in ascending order of their <code>StudentID</code>‘s. It is guaranteed that the <code>StudentID</code>‘s are all distinct, and there is at least one qullified student.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 6 7</span><br><span class="line">01234 880</span><br><span class="line">a1903 199</span><br><span class="line">ydjh2 200</span><br><span class="line">wehu8 300</span><br><span class="line">dx86w 220</span><br><span class="line">missing 400</span><br><span class="line">ydhfu77 99</span><br><span class="line">wehu8 55</span><br><span class="line">ydjh2 98</span><br><span class="line">dx86w 88</span><br><span class="line">a1903 86</span><br><span class="line">01234 39</span><br><span class="line">ydhfu77 88</span><br><span class="line">a1903 66</span><br><span class="line">01234 58</span><br><span class="line">wehu8 84</span><br><span class="line">ydjh2 82</span><br><span class="line">missing 99</span><br><span class="line">dx86w 81</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">missing 400 -1 99 99</span><br><span class="line">ydjh2 200 98 82 88</span><br><span class="line">dx86w 220 88 81 84</span><br><span class="line">wehu8 300 55 84 84</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> gp,gm,gf,g;</span><br><span class="line">&#125;node;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.g!=b.g?a.g&gt;b.g:a.name&lt;b.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,p;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p,&amp;m,&amp;n);</span><br><span class="line">	<span class="built_in">vector</span>&lt;Node&gt;stu,ans;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;<span class="built_in">map</span>;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> score,cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;score;</span><br><span class="line">		<span class="keyword">if</span> (score&gt;=<span class="number">200</span>) &#123;</span><br><span class="line">			node.name=s;</span><br><span class="line">			node.gp=score;</span><br><span class="line">			node.gm=node.gf=<span class="number">-1</span>;</span><br><span class="line">			node.g=<span class="number">0</span>;</span><br><span class="line">			stu.push_back(node);</span><br><span class="line">			<span class="built_in">map</span>[s]=cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;score;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[s]!=<span class="number">0</span>) &#123;</span><br><span class="line">			stu[<span class="built_in">map</span>[s]<span class="number">-1</span>].gm=score;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;score;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[s]!=<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp=<span class="built_in">map</span>[s]<span class="number">-1</span>;</span><br><span class="line">			stu[temp].gf=score;</span><br><span class="line">			stu[temp].g=score;</span><br><span class="line">			<span class="keyword">if</span> (stu[temp].gm&gt;score) &#123;</span><br><span class="line">				stu[temp].g=stu[temp].gm*<span class="number">0.4</span>+stu[temp].gf*<span class="number">0.6</span>+<span class="number">0.5</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stu.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].g&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">			ans.push_back(stu[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ans.<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans[j].name;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" %d %d %d %d\n"</span>,ans[j].gp,ans[j].gm,ans[j].gf,ans[j].g);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的对成绩数据处理排序输出，使用vector、map即可</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1138 Postorder Traversal</title>
    <url>/2020/03/28/1138-Postorder-Traversal/</url>
    <content><![CDATA[<p>Suppose that all the keys in a binary tree are distinct positive integers. Given the preorder and inorder traversal sequences, you are supposed to output the first number of the postorder traversal sequence of the corresponding binary tree.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 50,000), the total number of nodes in the binary tree. The second line gives the preorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the first number of the postorder traversal sequence of the corresponding binary tree.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">2 3 1 5 4 7 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pre,in;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(<span class="keyword">int</span> prel,<span class="keyword">int</span> inl,<span class="keyword">int</span> inr)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (inl&gt;inr||flag==<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i=inl;</span><br><span class="line">	<span class="keyword">while</span> (in[i]!=pre[prel]) &#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	postorder(prel+<span class="number">1</span>, inl, i<span class="number">-1</span>);</span><br><span class="line">	postorder(prel+i-inl+<span class="number">1</span>, i+<span class="number">1</span>, inr);</span><br><span class="line">	<span class="keyword">if</span> (flag==<span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,in[i]);</span><br><span class="line">		flag=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	pre.resize(n);</span><br><span class="line">	in.resize(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pre[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	postorder(<span class="number">0</span>, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>已知前序中序序列，求后序遍历第一个数，由根节点递归遍历找到最左子树（其次兄弟结点）即可</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1139 First Contact</title>
    <url>/2020/03/25/1139-First-Contact/</url>
    <content><![CDATA[<p>Unlike in nowadays, the way that boys and girls expressing their feelings of love was quite subtle in the early years. When a boy A had a crush on a girl B, he would usually not contact her directly in the first place. Instead, he might ask another boy C, one of his close friends, to ask another girl D, who was a friend of both B and C, to send a message to B – quite a long shot, isn’t it? Girls would do analogously.</p>
<p>Here given a network of friendship relations, you are supposed to help a boy or a girl to list all their friends who can possibly help them making the first contact.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers N (1 &lt;N ≤ 300) and M, being the total number of people and the number of friendship relations, respectively. Then M lines follow, each gives a pair of friends. Here a person is represented by a 4-digit ID. To tell their genders, we use a negative sign to represent girls.</p>
<p>After the relations, a positive integer K (≤ 100) is given, which is the number of queries. Then K lines of queries follow, each gives a pair of lovers, separated by a space. It is assumed that the first one is having a crush on the second one.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print in a line the number of different pairs of friends they can find to help them, then in each line print the IDs of a pair of friends.</p>
<p>If the lovers A and B are of opposite genders, you must first print the friend of A who is of the same gender of A, then the friend of B, who is of the same gender of B. If they are of the same gender, then both friends must be in the same gender as theirs. It is guaranteed that each person has only one gender.</p>
<p>The friends must be printed in non-decreasing order of the first IDs, and for the same first ones, in increasing order of the seconds ones.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 18</span><br><span class="line">-2001 1001</span><br><span class="line">-2002 -2001</span><br><span class="line">1004 1001</span><br><span class="line">-2004 -2001</span><br><span class="line">-2003 1005</span><br><span class="line">1005 -2001</span><br><span class="line">1001 -2003</span><br><span class="line">1002 1001</span><br><span class="line">1002 -2004</span><br><span class="line">-2004 1001</span><br><span class="line">1003 -2002</span><br><span class="line">-2003 1003</span><br><span class="line">1004 -2002</span><br><span class="line">-2001 -2003</span><br><span class="line">1001 1003</span><br><span class="line">1003 -2001</span><br><span class="line">1002 -2001</span><br><span class="line">-2002 -2003</span><br><span class="line">5</span><br><span class="line">1001 -2001</span><br><span class="line">-2003 1001</span><br><span class="line">1005 -2001</span><br><span class="line">-2002 -2004</span><br><span class="line">1111 -2003</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1002 2004</span><br><span class="line">1003 2002</span><br><span class="line">1003 2003</span><br><span class="line">1004 2002</span><br><span class="line">4</span><br><span class="line">2001 1002</span><br><span class="line">2001 1003</span><br><span class="line">2002 1003</span><br><span class="line">2002 1004</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2003 2001</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt;arr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.a!=y.a?x.a&lt;y.a:x.b&lt;y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">10000</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> a,b;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		<span class="keyword">if</span> (a.length()==b.length()) &#123;</span><br><span class="line">			v[<span class="built_in">abs</span>(stoi(a))].push_back(<span class="built_in">abs</span>(stoi(b)));</span><br><span class="line">			v[<span class="built_in">abs</span>(stoi(b))].push_back(<span class="built_in">abs</span>(stoi(a)));</span><br><span class="line">		&#125;</span><br><span class="line">		arr[<span class="built_in">abs</span>(stoi(a))*<span class="number">10000</span>+<span class="built_in">abs</span>(stoi(b))]=arr[<span class="built_in">abs</span>(stoi(b))*<span class="number">10000</span>+<span class="built_in">abs</span>(stoi(a))]=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> c,d;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;d;</span><br><span class="line">		<span class="built_in">vector</span>&lt;node&gt;ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v[<span class="built_in">abs</span>(c)].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;v[<span class="built_in">abs</span>(d)].<span class="built_in">size</span>();k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (v[<span class="built_in">abs</span>(c)][j]==<span class="built_in">abs</span>(d)||<span class="built_in">abs</span>(c)==v[<span class="built_in">abs</span>(d)][k]) &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (arr[v[<span class="built_in">abs</span>(c)][j]*<span class="number">10000</span>+v[<span class="built_in">abs</span>(d)][k]]==<span class="literal">true</span>) &#123;</span><br><span class="line">					ans.push_back(node&#123;v[<span class="built_in">abs</span>(c)][j],v[<span class="built_in">abs</span>(d)][k]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), cmp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">int</span>(ans.<span class="built_in">size</span>()));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%04d %04d\n"</span>,ans[i].a,ans[i].b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在找到各自同性的朋友的前提下，若朋友互相认识，那么即可找到此伴侣，但是要排除没有通过朋友就找到此人的情况。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>八数码问题</title>
    <url>/2020/03/25/%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> GOAL = <span class="string">"123804765"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Situation</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> father;</span><br><span class="line">	<span class="built_in">string</span> code;<span class="comment">//当前状态</span></span><br><span class="line">	<span class="keyword">int</span> deep;</span><br><span class="line">	<span class="function">Situation <span class="title">up</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Situation <span class="title">down</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Situation <span class="title">left</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Situation <span class="title">right</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isGoal</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isInOpen</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;<span class="built_in">open</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isInClosed</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">string</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show_deque</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">deque</span>&lt;Situation&gt; <span class="title">showWay</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showAnswer</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>;<span class="comment">//显示解答</span></span><br><span class="line">	Situation() :father(<span class="string">""</span>), code(<span class="string">""</span>), deep(<span class="number">-1</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Situation <span class="title">Situation::up</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span>::size_type loc = code.<span class="built_in">find</span>(<span class="string">'0'</span>);<span class="comment">//0的位置,从0开始计数</span></span><br><span class="line">	Situation son;</span><br><span class="line">	son.code = code;</span><br><span class="line">	son.deep = deep + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (loc&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="keyword">char</span> temp = son.code[loc];<span class="comment">//即0</span></span><br><span class="line">		son.code[loc] = son.code[loc - <span class="number">3</span>];</span><br><span class="line">		son.code[loc<span class="number">-3</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		son.code = <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Situation <span class="title">Situation::down</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span>::size_type loc = code.<span class="built_in">find</span>(<span class="string">'0'</span>);<span class="comment">//0的位置,从0开始计数</span></span><br><span class="line">	Situation son;</span><br><span class="line">	son.code = code;</span><br><span class="line">	son.deep = deep + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (loc&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">		<span class="keyword">char</span> temp = son.code[loc];<span class="comment">//即0</span></span><br><span class="line">		son.code[loc] = son.code[loc + <span class="number">3</span>];</span><br><span class="line">		son.code[loc + <span class="number">3</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		son.code = <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Situation <span class="title">Situation::left</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span>::size_type loc = code.<span class="built_in">find</span>(<span class="string">'0'</span>);<span class="comment">//0的位置,从0开始计数</span></span><br><span class="line">	Situation son;</span><br><span class="line">	son.code = code;</span><br><span class="line">	son.deep = deep + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (loc!=<span class="number">0</span>&amp;&amp;loc!=<span class="number">3</span>&amp;&amp;loc!=<span class="number">6</span>)&#123;</span><br><span class="line">		<span class="keyword">char</span> temp = son.code[loc];<span class="comment">//即0</span></span><br><span class="line">		son.code[loc] = son.code[loc - <span class="number">1</span>];</span><br><span class="line">		son.code[loc - <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		son.code = <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Situation <span class="title">Situation::right</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span>::size_type loc = code.<span class="built_in">find</span>(<span class="string">'0'</span>);<span class="comment">//0的位置,从0开始计数</span></span><br><span class="line">	Situation son;</span><br><span class="line">	son.code = code;</span><br><span class="line">	son.deep = deep + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (loc!=<span class="number">2</span>&amp;&amp;loc!=<span class="number">5</span>&amp;&amp;loc!=<span class="number">8</span>)&#123;</span><br><span class="line">		<span class="keyword">char</span> temp = son.code[loc];<span class="comment">//即0</span></span><br><span class="line">		son.code[loc] = son.code[loc + <span class="number">1</span>];</span><br><span class="line">		son.code[loc + <span class="number">1</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		son.code = <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Situation::isGoal</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> code == GOAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Situation::isInOpen</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;<span class="built_in">open</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">open</span>.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (code==<span class="built_in">open</span>.at(i).code)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Situation::isInClosed</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; closed.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (code == closed.at(i).code)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Situation::show</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!code.empty())&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; code[<span class="number">0</span>] &lt;&lt; code[<span class="number">1</span>] &lt;&lt; code[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">			&lt;&lt; code[<span class="number">3</span>] &lt;&lt; code[<span class="number">4</span>] &lt;&lt; code[<span class="number">5</span>] &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">			&lt;&lt; code[<span class="number">6</span>] &lt;&lt; code[<span class="number">7</span>] &lt;&lt; code[<span class="number">8</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"空的"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Situation::show</span><span class="params">(<span class="built_in">string</span> code)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!code.empty())&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; code[<span class="number">0</span>] &lt;&lt; code[<span class="number">1</span>] &lt;&lt; code[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">			&lt;&lt; code[<span class="number">3</span>] &lt;&lt; code[<span class="number">4</span>] &lt;&lt; code[<span class="number">5</span>] &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">			&lt;&lt; code[<span class="number">6</span>] &lt;&lt; code[<span class="number">7</span>] &lt;&lt; code[<span class="number">8</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"空的"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Situation::show_deque</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;m_deque)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_deque.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		m_deque.at(i).show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径</span></span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;Situation&gt; <span class="title">Situation::showWay</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>&#123;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; closed.size() &lt;&lt; endl;</span></span><br><span class="line">	<span class="built_in">deque</span>&lt;Situation&gt; dequeList;</span><br><span class="line">	Situation temp = closed.back();</span><br><span class="line">	dequeList.push_back(temp);</span><br><span class="line">	<span class="comment">//closed表从后往前，根据father值找到路径</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = closed.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span> (temp.father==closed.at(i).code)&#123;</span><br><span class="line">			dequeList.push_back(closed.at(i));</span><br><span class="line">			temp = closed.at(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; dequeList.size() &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">return</span> dequeList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Situation::showAnswer</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;closed)</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="built_in">deque</span>&lt;Situation&gt; <span class="title">way</span><span class="params">(showWay(closed))</span></span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"共需要"</span> &lt;&lt; way.<span class="built_in">size</span>() &lt;&lt; <span class="string">"步"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = way.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		way.at(i).show();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出目标</span></span><br><span class="line">	show(GOAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">(<span class="built_in">deque</span>&lt;Situation&gt; &amp;<span class="built_in">open</span>, <span class="built_in">deque</span>&lt;Situation&gt; &amp;closed,<span class="keyword">int</span> range)</span></span>&#123;</span><br><span class="line">	Situation a;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">open</span>.empty())&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">open</span>.front().code == GOAL)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"成功："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			a.showAnswer(closed);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">open</span>.empty())&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		closed.push_back(<span class="built_in">open</span>.front());</span><br><span class="line">		<span class="built_in">open</span>.pop_front();</span><br><span class="line">		<span class="comment">//节点n的深度是否等于深度界限</span></span><br><span class="line">		<span class="keyword">if</span> (closed.back().deep == range)&#123;</span><br><span class="line">			<span class="comment">//loop(open,closed,range);不能用递归</span></span><br><span class="line">			<span class="keyword">continue</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//扩展节点n,把其后裔节点放入OPEN表的末端</span></span><br><span class="line">			Situation son1 = closed.back().up();</span><br><span class="line">			Situation son2 = closed.back().down();</span><br><span class="line">			Situation son3 = closed.back().left();</span><br><span class="line">			Situation son4 = closed.back().right();</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			广度优先搜索和深度优先搜索的唯一区别就是子节点放到open表的位置：</span></span><br><span class="line"><span class="comment">			（1）广度优先搜索放到open表的后面</span></span><br><span class="line"><span class="comment">			（2）深度优先搜索放到open表的前面</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="keyword">if</span> (!son1.code.empty())&#123;</span><br><span class="line">				<span class="keyword">if</span> (!son1.isInOpen(<span class="built_in">open</span>)&amp;&amp;!son1.isInClosed(closed))&#123;</span><br><span class="line">					son1.father = closed.back().code;</span><br><span class="line">					<span class="built_in">open</span>.push_front(son1);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!son2.code.empty())&#123;</span><br><span class="line">				<span class="keyword">if</span> (!son2.isInOpen(<span class="built_in">open</span>) &amp;&amp; !son2.isInClosed(closed))&#123;</span><br><span class="line">					son2.father = closed.back().code;</span><br><span class="line">					<span class="built_in">open</span>.push_front(son2);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!son3.code.empty())&#123;</span><br><span class="line">				<span class="keyword">if</span> (!son3.isInOpen(<span class="built_in">open</span>) &amp;&amp; !son3.isInClosed(closed))&#123;</span><br><span class="line">					son3.father = closed.back().code;</span><br><span class="line">					<span class="built_in">open</span>.push_front(son3);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			 <span class="keyword">if</span> (!son4.code.empty())&#123;</span><br><span class="line">				<span class="keyword">if</span> (!son4.isInOpen(<span class="built_in">open</span>) &amp;&amp; !son4.isInClosed(closed))&#123;</span><br><span class="line">					son4.father = closed.back().code;</span><br><span class="line">					<span class="built_in">open</span>.push_front(son4);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//是否有任何后继节点为目标节点</span></span><br><span class="line">			<span class="keyword">if</span> (son1.isGoal())&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"后继节点中有目标节点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				son1.showAnswer(closed);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (son2.isGoal())&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"后继节点中有目标节点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				son2.showAnswer(closed);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (son3.isGoal())&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"后继节点中有目标节点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				son3.showAnswer(closed);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (son4.isGoal())&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"后继节点中有目标节点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				son4.showAnswer(closed);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> original = <span class="string">"208163754"</span>;</span><br><span class="line">	Situation first;</span><br><span class="line">	<span class="built_in">deque</span>&lt;Situation&gt; <span class="built_in">open</span>, closed;<span class="comment">//open存放未扩展节点，closed存放已扩展节点</span></span><br><span class="line">	<span class="keyword">int</span> range = <span class="number">10</span>;<span class="comment">//深度界限</span></span><br><span class="line">	first.code = original;</span><br><span class="line">	first.deep = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">open</span>.push_back(first);</span><br><span class="line">	loop(<span class="built_in">open</span>,closed,range);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>采用有限深度优先解决八数码问题</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>1141 PAT Ranking of Institutions</title>
    <url>/2020/03/24/1141-PAT-Ranking-of-Institutions/</url>
    <content><![CDATA[<p>After each PAT, the PAT Center will announce the ranking of institutions based on their students’ performances. Now you are asked to generate the ranklist.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤105), which is the number of testees. Then N lines follow, each gives the information of a testee in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID Score School</span><br></pre></td></tr></table></figure>

<p>where <code>ID</code> is a string of 6 characters with the first one representing the test level: <code>B</code> stands for the basic level, <code>A</code> the advanced level and <code>T</code> the top level; <code>Score</code> is an integer in [0, 100]; and <code>School</code>is the institution code which is a string of no more than 6 English letters (case insensitive). Note: it is guaranteed that <code>ID</code> is unique for each testee.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, first print in a line the total number of institutions. Then output the ranklist of institutions in nondecreasing order of their ranks in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rank School TWS Ns</span><br></pre></td></tr></table></figure>

<p>where <code>Rank</code> is the rank (start from 1) of the institution; <code>School</code> is the institution code (all in lower case); ; <code>TWS</code> is the <strong>total weighted score</strong> which is defined to be the integer part of <code>ScoreB/1.5 + ScoreA + ScoreT*1.5</code>, where <code>ScoreX</code> is the total score of the testees belong to this institution on level <code>X</code>; and <code>Ns</code> is the total number of testees who belong to this institution.</p>
<p>The institutions are ranked according to their <code>TWS</code>. If there is a tie, the institutions are supposed to have the same rank, and they shall be printed in ascending order of <code>Ns</code>. If there is still a tie, they shall be printed in alphabetical order of their codes.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">A57908 85 Au</span><br><span class="line">B57908 54 LanX</span><br><span class="line">A37487 60 au</span><br><span class="line">T28374 67 CMU</span><br><span class="line">T32486 24 hypu</span><br><span class="line">A66734 92 cmu</span><br><span class="line">B76378 71 AU</span><br><span class="line">A47780 45 lanx</span><br><span class="line">A72809 100 pku</span><br><span class="line">A03274 45 hypu</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 cmu 192 2</span><br><span class="line">1 au 192 3</span><br><span class="line">3 pku 100 1</span><br><span class="line">4 hypu 81 2</span><br><span class="line">4 lanx 81 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">	string school;</span><br><span class="line">	int tws,ns;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(node a,node b)&#123;</span><br><span class="line">	if (a.tws!&#x3D;b.tws) &#123;</span><br><span class="line">		return a.tws&gt;b.tws;</span><br><span class="line">	&#125;else if (a.ns!&#x3D;b.ns) &#123;</span><br><span class="line">		return a.ns&lt;b.ns;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		return a.school&lt;b.school;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">	int n;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	unordered_map&lt;string, int&gt;cnt;</span><br><span class="line">	unordered_map&lt;string, double&gt;sum;</span><br><span class="line">	for (int i&#x3D;0;i&lt;n;i++) &#123;</span><br><span class="line">		string id,school;</span><br><span class="line">		cin&gt;&gt;id;</span><br><span class="line">		double score;</span><br><span class="line">		cin&gt;&gt;score;</span><br><span class="line">		cin&gt;&gt;school;</span><br><span class="line">		for (int j&#x3D;0;j&lt;school.length();j++) &#123;</span><br><span class="line">			school[j]&#x3D;tolower(school[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		if (id[0]&#x3D;&#x3D;&#39;B&#39;) &#123;</span><br><span class="line">			score&#x3D;score&#x2F;1.5;</span><br><span class="line">		&#125;else if (id[0]&#x3D;&#x3D;&#39;T&#39;) &#123;</span><br><span class="line">			score&#x3D;score*1.5;</span><br><span class="line">		&#125;</span><br><span class="line">		sum[school]+&#x3D;score;</span><br><span class="line">		cnt[school]++;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;node&gt;ans;</span><br><span class="line">	for (auto it&#x3D;cnt.begin();it!&#x3D;cnt.end();it++) &#123;</span><br><span class="line">		ans.push_back(node&#123;it-&gt;first,(int)sum[it-&gt;first],cnt[it-&gt;first]&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(ans.begin(), ans.end(), cmp);</span><br><span class="line">	int rank&#x3D;0,pres&#x3D;-1;</span><br><span class="line">	printf(&quot;%d\n&quot;,(int)ans.size());</span><br><span class="line">	for (int i&#x3D;0;i&lt;ans.size();i++) &#123;</span><br><span class="line">		if (pres!&#x3D;ans[i].tws) &#123;</span><br><span class="line">			rank&#x3D;i+1;</span><br><span class="line">		&#125;</span><br><span class="line">		pres&#x3D;ans[i].tws;</span><br><span class="line">		printf(&quot;%d &quot;,rank);</span><br><span class="line">		cout&lt;&lt;ans[i].school;</span><br><span class="line">		printf(&quot; %d %d\n&quot;,ans[i].tws,ans[i].ns);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面按照题目要求对数据整理，随后直接push到vector中并排序，最后按照编号输出信息</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1142 Maximal Clique</title>
    <url>/2020/03/12/1142-Maximal-Clique/</url>
    <content><![CDATA[<p>A <strong>clique</strong> is a subset of vertices of an undirected graph such that every two distinct vertices in the clique are adjacent. A <strong>maximal clique</strong> is a clique that cannot be extended by including one more adjacent vertex. (Quoted from <a href="https://en.wikipedia.org/wiki/Clique_(graph_theory)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Clique_(graph_theory)</a>)</p>
<p>Now it is your job to judge if a given subset of vertices can form a maximal clique.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers Nv (≤200), the number of vertices in the graph, and Ne, the number of undirected edges. Then Ne lines follow, each gives a pair of vertices of an edge. The vertices are numbered from 1 to Nv.</p>
<p>After the graph, there is another positive integer M (≤ 100). Then M lines of query follow, each first gives a positive number K (≤ Nv), then followed by a sequence of K distinct vertices. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the M queries, print in a line <code>Yes</code> if the given subset of vertices can form a maximal clique; or if it is a clique but not a <strong>maximal clique</strong>, print <code>Not Maximal</code>; or if it is not a clique at all, print <code>Not a Clique</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 10</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">6 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">2 3</span><br><span class="line">8 2</span><br><span class="line">2 7</span><br><span class="line">5 3</span><br><span class="line">3 4</span><br><span class="line">6</span><br><span class="line">4 5 4 3 6</span><br><span class="line">3 2 8 7</span><br><span class="line">2 2 3</span><br><span class="line">1 1</span><br><span class="line">3 4 3 6</span><br><span class="line">3 3 2 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Not Maximal</span><br><span class="line">Not a Clique</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nv,ne,a,b,k,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nv,&amp;ne);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ne;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		e[a][b]=e[b][a]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v(k);</span><br><span class="line">		<span class="keyword">int</span> hash[<span class="number">210</span>]=&#123;<span class="number">0</span>&#125;,isclique=<span class="number">1</span>,ismaximal=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[j]);</span><br><span class="line">			hash[v[j]]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isclique==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> l=j+<span class="number">1</span>;l&lt;k;l++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (e[v[j]][v[l]]==<span class="number">0</span>) &#123;</span><br><span class="line">					isclique=<span class="number">0</span>;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"Not a Clique\n"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isclique==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nv;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (hash[j]==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;k;l++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (e[v[l]][j]==<span class="number">0</span>) &#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (l==k<span class="number">-1</span>) &#123;</span><br><span class="line">						ismaximal=<span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ismaximal==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"Not Maximal\n"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ismaximal==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断无向图中给出的点是否都相连，并判断能否添加新节点满足前面条件</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1143 Lowest Common Ancestor</title>
    <url>/2020/03/12/1143-Lowest-Common-Ancestor/</url>
    <content><![CDATA[<p>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</p>
<p>A binary search tree (BST) is recursively defined as a binary tree which has the following properties:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>Given any two nodes in a BST, you are supposed to find their LCA.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the BST, respectively. In the second line, N distinct integers are given as the preorder traversal sequence of the BST. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of <strong>int</strong>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given pair of U and V, print in a line <code>LCA of U and V is A.</code> if the LCA is found and <code>A</code> is the key. But if <code>A</code> is one of U and V, print <code>X is an ancestor of Y.</code> where <code>X</code> is <code>A</code> and <code>Y</code> is the other node. If U or V is not found in the BST, print in a line <code>ERROR: U is not found.</code> or <code>ERROR: V is not found.</code> or <code>ERROR: U and V are not found.</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">6 3 1 2 5 4 8 7</span><br><span class="line">2 5</span><br><span class="line">8 7</span><br><span class="line">1 9</span><br><span class="line">12 -3</span><br><span class="line">0 8</span><br><span class="line">99 99</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LCA of 2 and 5 is 3.</span><br><span class="line">8 is an ancestor of 7.</span><br><span class="line">ERROR: 9 is not found.</span><br><span class="line">ERROR: 12 and -3 are not found.</span><br><span class="line">ERROR: 0 is not found.</span><br><span class="line">ERROR: 99 and 99 are not found.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">map&lt;int,bool&gt; mp;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">	int m,n,u,v,a;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">	vector&lt;int&gt;pre(n);</span><br><span class="line">	for (int i&#x3D;0;i&lt;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;pre[i]);</span><br><span class="line">		mp[pre[i]]&#x3D;true;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;0;i&lt;m;i++) &#123;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;u,&amp;v);</span><br><span class="line">		for (int j&#x3D;0;j&lt;n;j++) &#123;</span><br><span class="line">			a&#x3D;pre[j];</span><br><span class="line">			if ((a&gt;&#x3D;u&amp;&amp;a&lt;&#x3D;v)||(a&gt;&#x3D;v&amp;&amp;a&lt;&#x3D;u)) &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (mp[u]&#x3D;&#x3D;false&amp;&amp;mp[v]&#x3D;&#x3D;false) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d and %d are not found.\n&quot;,u,v);</span><br><span class="line">		&#125;else if (mp[u]&#x3D;&#x3D;false||mp[v]&#x3D;&#x3D;false) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d is not found.\n&quot;,mp[u]&#x3D;&#x3D;false?u:v);</span><br><span class="line">		&#125;else if (a&#x3D;&#x3D;u||a&#x3D;&#x3D;v) &#123;</span><br><span class="line">			printf(&quot;%d is an ancestor of %d.\n&quot;,a,a&#x3D;&#x3D;u?v:u);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			printf(&quot;LCA of %d and %d is %d.\n&quot;, u, v, a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出二叉搜索树前序序列和两个节点的值，判断其最近的祖先，当给出的节点的值在判断节点的两侧或本身为根节点即可</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1147 Heaps</title>
    <url>/2020/03/12/1147-Heaps/</url>
    <content><![CDATA[<p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heap_(data_structure)</a>)</p>
<p>Your job is to tell if a given complete binary tree is a heap.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 100), the number of trees to be tested; and N (1 &lt; N ≤ 1,000), the number of keys in each tree, respectively. Then M lines follow, each contains N distinct integer keys (all in the range of <strong>int</strong>), which gives the level order traversal sequence of a complete binary tree.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given tree, print in a line <code>Max Heap</code> if it is a max heap, or <code>Min Heap</code> for a min heap, or <code>Not Heap</code> if it is not a heap at all. Then in the next line print the tree’s postorder traversal sequence. All the numbers are separated by a space, and there must no extra space at the beginning or the end of the line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 8</span><br><span class="line">98 72 86 60 65 12 23 50</span><br><span class="line">8 38 25 58 52 82 70 60</span><br><span class="line">10 28 15 12 34 9 8 56</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Max Heap</span><br><span class="line">50 60 65 72 12 23 86 98</span><br><span class="line">Min Heap</span><br><span class="line">60 58 52 38 82 70 25 8</span><br><span class="line">Not Heap</span><br><span class="line">56 12 34 28 9 8 15 10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[1005], m, n;</span><br><span class="line">void postorder(int index) &#123;</span><br><span class="line">	if (index &gt; n)&#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	postorder(index * 2);</span><br><span class="line">	postorder(index * 2 + 1);</span><br><span class="line">	printf(&quot;%d%s&quot;, a[index], index &#x3D;&#x3D; 1 ? &quot;\n&quot; : &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	scanf(&quot;%d %d&quot;, &amp;m, &amp;n);</span><br><span class="line">	while (m--) &#123;</span><br><span class="line">		int minn &#x3D; 1, maxn &#x3D; 1;</span><br><span class="line">		for (int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;</span><br><span class="line">			scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">			if (a[i] &gt; a[i &#x2F; 2])&#123;</span><br><span class="line">				maxn &#x3D; 0;</span><br><span class="line">			&#125;</span><br><span class="line">			if (a[i] &lt; a[i &#x2F; 2])&#123;</span><br><span class="line">				minn &#x3D; 0;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (maxn &#x3D;&#x3D; 1)&#123;</span><br><span class="line">			printf(&quot;Max Heap\n&quot;);</span><br><span class="line">		&#125;else if (minn &#x3D;&#x3D; 1)&#123;</span><br><span class="line">			printf(&quot;Min Heap\n&quot;);</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			printf(&quot;Not Heap\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		postorder(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出层序遍历，判断为大顶堆、小顶堆或两者都不是，并输出其后序遍历</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1146 Topological Order</title>
    <url>/2020/03/12/1146-Topological-Order/</url>
    <content><![CDATA[<p>This is a problem given in the Graduate Entrance Exam in 2018: Which of the following is NOT a topological order obtained from the given directed graph? Now you are supposed to write a program to test each of the options.</p>
<p><img src="https://images.ptausercontent.com/5d35ed2a-4d19-4f13-bf3f-35ed59cebf05.jpg" alt="gre.jpg"></p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers N (≤1,000), the number of vertices in the graph, and M (≤ 10,000), the number of directed edges. Then M lines follow, each gives the start and the end vertices of an edge. The vertices are numbered from 1 to N. After the graph, there is another positive integer K (≤ 100). Then K lines of query follow, each gives a permutation of all the vertices. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>Print in a line all the indices of queries which correspond to “NOT a topological order”. The indices start from zero. All the numbers are separated by a space, and there must no extra space at the beginning or the end of the line. It is graranteed that there is at least one answer.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">5 2</span><br><span class="line">5 4</span><br><span class="line">2 3</span><br><span class="line">2 6</span><br><span class="line">3 4</span><br><span class="line">6 4</span><br><span class="line">5</span><br><span class="line">1 5 2 3 6 4</span><br><span class="line">5 1 2 6 3 4</span><br><span class="line">5 1 2 3 6 4</span><br><span class="line">5 2 1 6 3 4</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main( ) &#123;</span><br><span class="line">	int m,n,a,b,k,flag&#x3D;0,pre[1001];</span><br><span class="line">	vector&lt;int&gt; v[1001];</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">	for (int i&#x3D;0;i&lt;m;i++) &#123;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">		v[a].push_back(b);</span><br><span class="line">		pre[b]++;</span><br><span class="line">	&#125;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;k);</span><br><span class="line">	for (int i&#x3D;0;i&lt;k;i++) &#123;</span><br><span class="line">		int judge&#x3D;1;</span><br><span class="line">		vector&lt;int&gt; dpre(pre,pre+n+1);</span><br><span class="line">		for (int j&#x3D;0;j&lt;n;j++) &#123;</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">			if (dpre[a]!&#x3D;0) &#123;</span><br><span class="line">				judge&#x3D;0;</span><br><span class="line">			&#125;</span><br><span class="line">			for (int it:v[a]) &#123;</span><br><span class="line">				dpre[it]--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (judge&#x3D;&#x3D;1) &#123;</span><br><span class="line">			continue;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%s%d&quot;,flag&#x3D;&#x3D;1?&quot; &quot;:&quot;&quot;,i);</span><br><span class="line">		flag&#x3D;1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否是拓扑序列，判断入度不为0来决定是否输出当前编号</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1145 Hashing - Average Search Time</title>
    <url>/2020/03/12/1145-Hashing-Average-Search-Time/</url>
    <content><![CDATA[<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table first. Then try to find another sequence of integer keys from the table and output the average search time (the number of comparisons made to find whether or not the key is in the table). The hash function is defined to be <em>H</em>(<em>k<strong>e</strong>y</em>)=<em>k<strong>e</strong>y</em>%<em>T<strong>S</strong>i<strong>z</strong>e</em> where <em>T<strong>S</strong>i<strong>z</strong>e</em> is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p>
<p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 3 positive numbers: MSize, N, and M, which are the user-defined table size, the number of input numbers, and the number of keys to be found, respectively. All the three numbers are no more than 104. Then N distinct positive integers are given in the next line, followed by M positive integer keys in the next line. All the numbers in a line are separated by a space and are no more than 105.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, in case it is impossible to insert some number, print in a line <code>X cannot be inserted.</code> where <code>X</code> is the input number. Finally print in a line the average search time for all the M keys, accurate up to 1 decimal place.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5 4</span><br><span class="line">10 6 4 15 11</span><br><span class="line">11 4 15 2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 cannot be inserted.</span><br><span class="line">2.8</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isprime(int n)&#123;</span><br><span class="line">	if (n&lt;&#x3D;1) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;2;i&lt;&#x3D;sqrt(n);i++) &#123;</span><br><span class="line">		if (n%i&#x3D;&#x3D;0) &#123;</span><br><span class="line">			return false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return true;</span><br><span class="line">&#125;</span><br><span class="line">int main( )&#123;</span><br><span class="line">	int size,m,n,a;</span><br><span class="line">	scanf(&quot;%d%d%d&quot;,&amp;size,&amp;n,&amp;m);</span><br><span class="line">	while (!isprime(size)) &#123;</span><br><span class="line">		size++;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;int&gt;v(size);</span><br><span class="line">	for (int i&#x3D;0;i&lt;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">		int flag&#x3D;0;</span><br><span class="line">		for (int j&#x3D;0;j&lt;size;j++) &#123;</span><br><span class="line">			int pos&#x3D;(a+j*j)%size;</span><br><span class="line">			if (v[pos]&#x3D;&#x3D;0) &#123;</span><br><span class="line">				v[pos]&#x3D;a;</span><br><span class="line">				flag&#x3D;1;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (!flag) &#123;</span><br><span class="line">			printf(&quot;%d cannot be inserted.\n&quot;,a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	int ans&#x3D;0;</span><br><span class="line">	for (int i&#x3D;0;i&lt;m;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">		for (int j&#x3D;0;j&lt;&#x3D;size;j++) &#123;</span><br><span class="line">			ans++;</span><br><span class="line">			int pos&#x3D;(a+j*j)%size;</span><br><span class="line">			if (v[pos]&#x3D;&#x3D;a||v[pos]&#x3D;&#x3D;0) &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%.1lf\n&quot;,ans*1.0&#x2F;m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用平方探测法解决哈希冲突，即向长度为a的数组插入数字b时，需要插入的位置为pos=(b+i*i)%a,(i&lt;a)</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1151 LCA in a Binary Tree</title>
    <url>/2020/03/12/1151-LCA-in-a-Binary-Tree/</url>
    <content><![CDATA[<p>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</p>
<p>Given any two nodes in a binary tree, you are supposed to find their LCA.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the binary tree, respectively. In each of the following two lines, N distinct integers are given as the inorder and preorder traversal sequences of the binary tree, respectively. It is guaranteed that the binary tree can be uniquely determined by the input sequences. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of <strong>int</strong>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given pair of U and V, print in a line <code>LCA of U and V is A.</code> if the LCA is found and <code>A</code> is the key. But if <code>A</code> is one of U and V, print <code>X is an ancestor of Y.</code> where <code>X</code> is <code>A</code> and <code>Y</code> is the other node. If U or V is not found in the binary tree, print in a line <code>ERROR: U is not found.</code> or <code>ERROR: V is not found.</code> or <code>ERROR: U and V are not found.</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">7 2 3 4 6 5 1 8</span><br><span class="line">5 3 7 2 6 4 8 1</span><br><span class="line">2 6</span><br><span class="line">8 1</span><br><span class="line">7 9</span><br><span class="line">12 -3</span><br><span class="line">0 8</span><br><span class="line">99 99</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LCA of 2 and 6 is 3.</span><br><span class="line">8 is an ancestor of 1.</span><br><span class="line">ERROR: 9 is not found.</span><br><span class="line">ERROR: 12 and -3 are not found.</span><br><span class="line">ERROR: 0 is not found.</span><br><span class="line">ERROR: 99 and 99 are not found.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">map&lt;int, int&gt;pos;</span><br><span class="line">vector&lt;int&gt;in,pre;</span><br><span class="line">void lca(int inl,int inr,int preroot,int a,int b)&#123;</span><br><span class="line">	if (inl&gt;inr) &#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	int inroot&#x3D;pos[pre[preroot]],aIn&#x3D;pos[a],bIn&#x3D;pos[b];</span><br><span class="line">	if (aIn&lt;inroot&amp;&amp;bIn&lt;inroot) &#123;</span><br><span class="line">		lca(inl, inroot-1, preroot+1, a, b);</span><br><span class="line">	&#125;else if ((aIn&lt;inroot&amp;&amp;bIn&gt;inroot)||(aIn&gt;inroot&amp;&amp;bIn&lt;inroot)) &#123;</span><br><span class="line">		printf(&quot;LCA of %d and %d is %d.\n&quot;,a,b,in[inroot]);</span><br><span class="line">	&#125;else if(aIn&gt;inroot&amp;&amp;bIn&gt;inroot)&#123;</span><br><span class="line">		lca(inroot+1, inr, preroot+1+(inroot-inl), a, b);</span><br><span class="line">	&#125;else if (aIn&#x3D;&#x3D;inroot) &#123;</span><br><span class="line">		printf(&quot;%d is an ancestor of %d.\n&quot;,a,b);</span><br><span class="line">	&#125;else if (bIn&#x3D;&#x3D;inroot) &#123;</span><br><span class="line">		printf(&quot;%d is an ancestor of %d.\n&quot;,b,a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">	int m,n,a,b;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">	in.resize(n+1),pre.resize(n+1);</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;in[i]);</span><br><span class="line">		pos[in[i]]&#x3D;i;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;pre[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;0;i&lt;m;i++) &#123;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">		if (pos[a]&#x3D;&#x3D;0&amp;&amp;pos[b]&#x3D;&#x3D;0) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d and %d are not found.\n&quot;,a,b);</span><br><span class="line">		&#125;else if (pos[a]&#x3D;&#x3D;0||pos[b]&#x3D;&#x3D;0) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d is not found.\n&quot;,pos[a]&#x3D;&#x3D;0?a:b);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			lca(1, n, 1, a, b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出中序与先序序列，找到给出的点的最近公共祖先，只需要利用给出的先序序列确定出根节点，只要明白ab同侧则继续递归找到当前的子树的下一层，当ab异侧则当前子树根节点即为所求。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2020/03/08/spring/</url>
    <content><![CDATA[<p>Spring<br>Spring是分屏的JavaSE/EE full-stack 轻量级开源框架。以IOC（inverseof control控制反转）和AOP（Aspect Oriented Programming面向切面编程为内核）<br>服务器端：表示层（web）、业务逻辑层（service）、持久层（dao）<br>全站式开源框架：为每一个层都提供技术支持<br>Web：struts、spring MVC提供与struts框架的整合<br>Service：spring 常用于service管理实务、记录日志等，不仅仅在service层<br>Dao：hibernate、jdbctemplate<br>轻量级：相对于EJB（企业级）<br>体系结构：1）core container由beans模块（提供beanfactory，工厂模式的经典实现）、core核心模块（提供spring框架的解百纳组成部分）、context上下文模块（建立前两者基础上，是访问定义和配置的任何对象的媒介）和Expression language表达式语言模块组成。2）data access/integration（数据访问/集成），包括JDBC（提供抽象层，减少数据库操作的编码）、ORM、OXM、JMS、Transaction。3）web模块包括web（提供了基本的web开发集成特性）、servlet、struts、portlet组件<br>1、IOC（inverseof control控制反转），将对象的实例的创建权交予工厂。包括beanfactory这一基础的Ioc容器以及Applicationcontext这一beanfactory的子接口（应用上下文）创建方法为：// 1.定义配置文件路径(类路径)String xmlPath = “applicationContext.xml”;<br>// 2.初始化spring容器，加载配置文件ApplicationContext applicationContext = new ClassPathXmlApplicationContext(xmlPath);从类路径的xml文件载入上下文定义信息，把上下文定义文件当作类路径资源。<br>2、Hello word<br>1）导入jar<br>commons-logging-1.2.jar、spring-beans-3.2.2.RELEASE.jar、spring-context-3.2.2.RELEASE.jar、spring-core-3.2.2.RELEASE.jar、spring-expression-3.2.2.RELEASE.jar<br>2）编写配置文件<br>schema约束的配置文件<br>applicationContext.xml<br>3）Spring api获得实例<br>String xmlPath = “applicationContext.xml”;定义配置文件路径(类路径)<br>ApplicationContext applicationContext = new ClassPathXmlApplicationContext(xmlPath);初始化spring容器，加载配置文件<br>①UserDao userDao = (UserDao)applicationContext.getBean(“userDao”);找到配置文件<br>②&lt;bean id=”userDao”class=”cn.itcast.ioc.UserDaoImpl”/&gt;配置文件需要找到实现类<br>③public class UserDaoImpl implements UserDao {实现类<br>public void save() {System.out.println(“spring : hello user dao”);}}<br>④ public interface UserDao {public void save();}<br>DI<br>Dependency injection 依赖注入，一个对象使用另一个对象B的过程。从spring容器获得A对象，使spring自动将A需要的B进行设置，此设置称为注入。<br>实现：<br>UserService userService = (UserService)applicationContext.getBean(“userService”);配置文件—&gt;<bean id="userService" class="cn.itcast.ioc.UserServiceImpl">找到DI实例—&gt;name:实现类的属性名，不需提供setter方法，在UserServiceImpl中存在<br>ref:spring容器中另一个bean的名称，即上面的IOC实现类名称<br>value:属性值，JDK提供的值   <property name="userDao" ref="userDao"/><br>将IOC实例注入到userservice中—–&gt;public class UserServiceImpl implements UserService {private UserDao userDao;//使用UserDao接口声明一个对象<br>public void setUserDao(UserDao userDao) {//添加UserDao对象的set方法，用于依赖注入this.userDao = userDao;}<br>public void addUser() {//实现了UserService中的方法<br>this.userDao.save(); //调用UserDao中的save()方法<br>}}</p>
<p>TestApp.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.ioc;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">public class TestApp &#123;</span><br><span class="line">	@Test</span><br><span class="line">	public void demo01() &#123;</span><br><span class="line">		&#x2F;&#x2F; 1.定义配置文件路径(类路径)</span><br><span class="line">		String xmlPath &#x3D; &quot;applicationContext.xml&quot;;</span><br><span class="line">		&#x2F;&#x2F; 2.初始化spring容器，加载配置文件</span><br><span class="line">		ApplicationContext applicationContext &#x3D; </span><br><span class="line">			               new ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">		&#x2F;&#x2F; 3.通过容器获取userDao实例</span><br><span class="line">		UserDao userDao &#x3D; (UserDao)applicationContext.getBean(&quot;userDao&quot;);</span><br><span class="line">		&#x2F;&#x2F; 4.调用userDao的save()方法</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125;</span><br><span class="line">	@Test</span><br><span class="line">	public void demo02() &#123;</span><br><span class="line">		&#x2F;&#x2F; 1.定义配置文件路径(类路径)</span><br><span class="line">		String xmlPath &#x3D; &quot;applicationContext.xml&quot;;</span><br><span class="line">		&#x2F;&#x2F; 2.初始化spring容器，加载配置文件</span><br><span class="line">		ApplicationContext applicationContext &#x3D; </span><br><span class="line">			                new ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">		&#x2F;&#x2F; 3.通过容器获取userService实例</span><br><span class="line">		UserService userService &#x3D; (UserService)applicationContext.getBean(&quot;userService&quot;);</span><br><span class="line">		&#x2F;&#x2F; 4.调用userService的addUser()方法</span><br><span class="line">		userService.addUser();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>applicationContext.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">	xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans </span><br><span class="line"> 	 http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">	&lt;!-- 将指定对象配置给spring，让spring创建其的实例 --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;cn.itcast.ioc.UserDaoImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--注册一个名称为userService的实例 --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;cn.itcast.ioc.UserServiceImpl&quot;&gt;</span><br><span class="line">    &lt;!--将userDao实例注入到userService实例中</span><br><span class="line">    name:实现类的属性名，不需提供setter方法，在UserServiceImpl中存在</span><br><span class="line">    ref:spring容器中另一个bean的名称，即上面的IOC实现类名称</span><br><span class="line">    value:属性值，JDK提供的值</span><br><span class="line">     --&gt;</span><br><span class="line">	   &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>UserDaoImpl.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.ioc;</span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">	public void save() &#123;</span><br><span class="line">		System.out.println(&quot;spring : hello user dao&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserDao.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.ioc;</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">	public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserServiceImpl.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.ioc;</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">	&#x2F;&#x2F;使用UserDao接口声明一个对象</span><br><span class="line">	private UserDao userDao;</span><br><span class="line">	&#x2F;&#x2F;添加UserDao对象的set方法，用于依赖注入</span><br><span class="line">	public void setUserDao(UserDao userDao) &#123;</span><br><span class="line">		this.userDao &#x3D; userDao;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;实现了UserService中的方法</span><br><span class="line">	public void addUser() &#123;</span><br><span class="line">	this.userDao.save(); &#x2F;&#x2F;调用UserDao中的save()方法</span><br><span class="line">    System.out.println(&quot;spring : hello user Service&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.ioc;</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">	public void addUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>hibernate的检索与实务处理</title>
    <url>/2020/03/08/hibernate%E7%9A%84%E6%A3%80%E7%B4%A2%E4%B8%8E%E5%AE%9E%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2的文件上传和下载</title>
    <url>/2020/03/08/struts2%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>public void writefile(){<br>FileUtils.copyFile(upload,new File(“c:/upload”,uploadFileName)<br>}然后在execute中调用即可<br>Struts2文件上传问题解决：<br>如果文件上传出问题，会被workflow拦截器拦截，会跳转到input视图<br><constant name="struts.multipart.maxSize" value="20971520"/><br>struts.xml中配置全局文件大小上限<br>限制文件大小和类型：<br>在struts2中通过上传拦截器FileUpload来实现，在FileUpload中设置3个属性<br>1）maximumSize：上传文件的最大长度，默认为2MB<br>2）allowedTypes：允许上传文件类型，各类型之间以逗号分隔<br>3）allowedExtensions：允许上传文件的扩展名，各扩展名之间以逗号分隔<br>在struts.xml中覆盖三个属性<br>可以在错误页面通过&lt;s:fileError&gt;显示上传错误原因，在拦截器FileUpload中有一个方法acceptFile方法，这个方法中定义了错误信息，在struts-message.properties中定义了上传错误信息，可以进行国际化。<br>struts.messages.error.uploading=Error uploading: {0}<br>struts.messages.error.file.too.large=File {0} is too large to be uploaded. Maximum allowed size is {4} bytes!<br>struts.messages.error.content.type.not.allowed=Content-Type not allowed: {0} “{1}” “{2}” {3}<br>struts.messages.error.file.extension.not.allowed=File extension not allowed: {0} “{1}” “{2}” {3}<br>{0}：<input type="file" name="uploadimage">中name属性的值<br>{1}：上传文件的真实名称<br>{2}：上传文件保存到临时目录的名称<br>{3}：上传文件类型（对struts.messages.error.file.too.large是上传文件大小）<br>第一步：创建新的资源文件，例如fileuploadmessage.properties，放置在src下，在该资源文件下增加如下信息<br>struts.messages.error.uploading=上传错误: {0}<br>struts.messages.error.file.too.large=上传文件太大struts.messages.error.content.type.not.allowed=上传文件类型不允许: {0} “{1}” “{2}” {3}<br>struts.messages.error.file.extension.not.allowed=上传文件后缀不允许: {0} “{1}” “{2}” {3}<br>第二步：在struts.xml文件加载该资源文件<br><constant name="struts.custom.i18n.resources" values="cn....XXX.fileuploadmessage"/><br>多文件上传：<br>以此允许上传多个文件，在action中接收时，定义的变量类型可以是数组或list集合<br>Struts2中文件下载<br><result name="" type="stream"></p>
<p>fileupload.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;</span><br><span class="line">                       &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;上传页面&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;s:form action&#x3D;&quot;&#x2F;fileUpload.action&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;s:file name&#x3D;&quot;file&quot; label&#x3D;&quot;上传文件&quot;&#x2F;&gt;</span><br><span class="line">    &lt;s:submit value&#x3D;&quot;上传&quot;&#x2F;&gt;</span><br><span class="line">    &lt;s:reset value&#x3D;&quot;重置&quot;&#x2F;&gt; </span><br><span class="line"> &lt;&#x2F;s:form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;!-- 设置文件上传允许最大值 为10M--&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.multipart.maxSize&quot; value&#x3D;&quot;10485760&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">&lt;!-- 配置上传文件的出错信息的资源文件 --&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.custom.i18n.resources&quot; value&#x3D;&quot;cn.itcast.action.FileUploadMessage&quot;&#x2F;&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;struts2&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">&lt;!-- 文件上传（限制大小和类型） --&gt;</span><br><span class="line"> &lt;action name&#x3D;&quot;fileUpload&quot; class&#x3D;&quot;cn.itcast.action.FileUploadAction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;result.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;!--定义上传出错要跳转的页面 --&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;fileUpload.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;interceptor-ref name&#x3D;&quot;defaultStack&quot;&gt;</span><br><span class="line">      &lt;!--限制上传文件最大值为4M --&gt;</span><br><span class="line">      &lt;param name&#x3D;&quot;fileUpload.maximumSize&quot;&gt;4194304&lt;&#x2F;param&gt; </span><br><span class="line">             &lt;!--限制上传文件的扩展名 --&gt;           </span><br><span class="line">      &lt;param name&#x3D;&quot;fileUpload.allowedExtensions&quot;&gt;</span><br><span class="line">         .txt,.doc,.jpg</span><br><span class="line">      &lt;&#x2F;param&gt;</span><br><span class="line">      &lt;!--限制上传文件的类型 --&gt;</span><br><span class="line">      &lt;param name&#x3D;&quot;fileUpload.allowedTypes&quot;&gt;</span><br><span class="line">         text&#x2F;plain,application&#x2F;msword,image&#x2F;jpeg</span><br><span class="line">      &lt;&#x2F;param&gt;</span><br><span class="line">    &lt;&#x2F;interceptor-ref&gt;</span><br><span class="line"> &lt;&#x2F;action&gt;</span><br><span class="line">&lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>FileUploadAction.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import org.apache.struts2.ServletActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class FileUploadAction extends ActionSupport&#123;	    </span><br><span class="line">	private static final long serialVersionUID &#x3D; 1L;</span><br><span class="line">     &#x2F;&#x2F;提交过来的文件</span><br><span class="line">     private File file;</span><br><span class="line">     &#x2F;&#x2F;提交过来的file的名字</span><br><span class="line">     private String fileFileName;</span><br><span class="line">     &#x2F;&#x2F;提交过来的file的类型</span><br><span class="line">     private String fileContentType;</span><br><span class="line">     public File getFile()</span><br><span class="line">     &#123;</span><br><span class="line">         return file;</span><br><span class="line">     &#125;</span><br><span class="line">     public void setFile(File file)</span><br><span class="line">     &#123;</span><br><span class="line">         this.file &#x3D; file;</span><br><span class="line">     &#125;</span><br><span class="line">     public String getFileFileName()</span><br><span class="line">     &#123;</span><br><span class="line">         return fileFileName;</span><br><span class="line">     &#125;</span><br><span class="line">     public void setFileFileName(String fileFileName)</span><br><span class="line">     &#123;</span><br><span class="line">         this.fileFileName &#x3D; fileFileName;</span><br><span class="line">     &#125;</span><br><span class="line">     public String getFileContentType()</span><br><span class="line">     &#123;</span><br><span class="line">         return fileContentType;</span><br><span class="line">     &#125;</span><br><span class="line">     public void setFileContentType(String fileContentType)</span><br><span class="line">     &#123;</span><br><span class="line">         this.fileContentType &#x3D; fileContentType;</span><br><span class="line">     &#125;</span><br><span class="line">     public String execute() throws Exception</span><br><span class="line">     &#123;</span><br><span class="line">    	 &#x2F;&#x2F;文件输入流</span><br><span class="line">    	 InputStream is &#x3D; new FileInputStream(file);</span><br><span class="line">    	 &#x2F;&#x2F;设置文件保存的目录</span><br><span class="line">         String uploadPath &#x3D; ServletActionContext.getServletContext()</span><br><span class="line">                             .getRealPath(&quot;&#x2F;upload&quot;);</span><br><span class="line">         &#x2F;&#x2F;设置目标文件</span><br><span class="line">         File toFile &#x3D; new File(uploadPath, this.getFileFileName());</span><br><span class="line">         &#x2F;&#x2F;文件输出流</span><br><span class="line">         OutputStream os &#x3D; new FileOutputStream(toFile);</span><br><span class="line">         byte[] buffer &#x3D; new byte[8192];</span><br><span class="line">         int length &#x3D; 0;</span><br><span class="line">         &#x2F;&#x2F;读取file文件输出到toFile文件中</span><br><span class="line">         while(-1 !&#x3D; (length &#x3D; is.read(buffer, 0, buffer.length)))</span><br><span class="line">         &#123;</span><br><span class="line">             os.write(buffer);</span><br><span class="line">         &#125;</span><br><span class="line">         &#x2F;&#x2F;关闭输入流和输出流</span><br><span class="line">         is.close();</span><br><span class="line">         os.close();</span><br><span class="line">         return SUCCESS;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileUploadMessage.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struts.messages.error.uploading&#x3D;\u4E0A\u4F20\u9519\u8BEF\: &#123;0&#125;</span><br><span class="line">struts.messages.error.file.too.large&#x3D;\u6587\u4EF6\u8FC7\u5927: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br><span class="line">struts.messages.error.content.type.not.allowed&#x3D;\u4E0A\u4F20\u6587\u4EF6\u7684\u7C7B\u578B\u4E0D\u5141\u8BB8\: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br><span class="line">struts.messages.error.file.extension.not.allowed&#x3D;\u4E0A\u4F20\u6587\u4EF6\u7684\u540E\u7F00\u540D\u4E0D\u5141\u8BB8\: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br></pre></td></tr></table></figure>

<p>result.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;</span><br><span class="line">                       &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;result&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">文件上传成功！&lt;br&gt;</span><br><span class="line">上传文件名： $&#123;fileFileName&#125;&lt;br&gt;</span><br><span class="line">上传文件类型：$&#123;fileContentType&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>ognl表达式</title>
    <url>/2020/03/08/ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>1）ognl表达式：是对象导航图语言。也是一种struts2默认的表达式语言，xwork提供ognl支持。支持对象方法调用、支持类静态的方法调用和值访问、访问ognl上下文和actioncontext、支持赋值操作和表达式串联、操作集合对象。OGNL上下文概念就是一个map结构，实现了java.utils.Map的接口。</p>
<p>2）访问ognl上下文和actioncontext：</p>
<p>ognl存在一个上下文对象（map），ognl可以操作这个上下文，即可以向这个map存储和取出数据。在struts2中这个上下文对象就是actioncontext。</p>
<p>ognl与valuestack</p>
<p>3）什么是值栈（valuestack）？</p>
<p>valuestack是struts2中的一个接口，ognl操作的就是这个valuestack，真正操作的是其实现类，ognlvaluestack就是一个map。它是ognl基础。</p>
<p>valuestack：贯穿整个action的生命周期（每个action类的对象实例都拥有一个valuestack对象），相当于一个数据中转站，在其中保存当前action对象和其他相关对象。上述也就是说valuestack是随着action生命周期一致，每个action都拥有自己的valuestack。valuestack中存储的时action的相关信息与常用的web对象。</p>
<p>struts框架将valuestack对象保存在request范围中，名称是“struts.valuestack”</p>
<p>request.setAttribute(“struts.valuestack”,valuestack对象）</p>
<p>4）如何获得值栈对象？</p>
<p>1、通过request对象获取</p>
<p>ValueStack valuestack=(ValueStack) ServletActionContext.getrequest().getAttribute(</p>
<p>ServletActionContext.STRUTS_VALUESTACK_KEY);</p>
<p>2、通过actioncontext对象获取</p>
<p>ValueStack valuestack=ActionContext.getContext().getValueStack();</p>
<p>5）值栈的内部结构</p>
<p>valueStack 中包含两个部分arraylist（root） Map（context）</p>
<p>map中包含root。root中存储了action相关信息，map中存储常用的web对象（reuqest、session、application、parameters）</p>
<p>值栈在开发中的应用</p>
<p>valueStack 在开发中作用：在页面与action之间数据交换。</p>
<p>自动存储在valuestack中的对象：1）action对象会被自动压入valuestack中2）action如果实现了modeldriven接口那么modeldriveninterceptor拦截器会生效，将model对象压入valuestack中。如果是属性驱动，bean对象存在action对象中，模型驱动，bean对象直接存储在root中。</p>
<p>前提：使用模型驱动时，可以从action中获取model对象，转为在action中提供一个getmodel方法，如果在action中提供了get方法，就会在&lt;s:debug&gt;中查看到该属性</p>
<p>属性驱动</p>
<p>product.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class Product &#123;</span><br><span class="line">	private String name; &#x2F;&#x2F;商品名称</span><br><span class="line">	private double price; &#x2F;&#x2F;商品价格</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line">	public double getPrice() &#123;</span><br><span class="line">		return price;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setPrice(double price) &#123;</span><br><span class="line">		this.price &#x3D; price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ValueStack2Action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import cn.itcast.domain.Product;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class ValueStack2Action extends ActionSupport &#123;</span><br><span class="line">	private Product p3;</span><br><span class="line">	public Product getP3() &#123;</span><br><span class="line">		return p3;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setP3(Product p3) &#123;</span><br><span class="line">		this.p3 &#x3D; p3;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		return SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueStack2.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">	pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;查看valueStack信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;s:debug &#x2F;&gt;</span><br><span class="line">	商品名称：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;p3.name&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt; 商品价格：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;p3.price&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts2.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">	&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">	&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;!-- 开启访问静态方法支持 --&gt;</span><br><span class="line">	&lt;constant name&#x3D;&quot;struts.ognl.allowStaticMethodAccess&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;struts2&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">		&lt;action name&#x3D;&quot;valueStack2&quot; class&#x3D;&quot;cn.itcast.action.ValueStack2Action&quot;&gt;</span><br><span class="line">			&lt;result&gt;&#x2F;valueStack2.jsp&lt;&#x2F;result&gt;</span><br><span class="line">		&lt;&#x2F;action&gt;</span><br><span class="line">		&lt;action name&#x3D;&quot;valueStack3&quot; class&#x3D;&quot;cn.itcast.action.ValueStack3Action&quot;&gt;</span><br><span class="line">			&lt;result&gt;&#x2F;valueStack3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">		&lt;&#x2F;action&gt;</span><br><span class="line">	&lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>模型驱动</p>
<p>ValueStack2Action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">import com.opensymphony.xwork2.ModelDriven;</span><br><span class="line">import cn.itcast.domain.Product;</span><br><span class="line">&#x2F;&#x2F;模型驱动</span><br><span class="line">public class ValueStack3Action extends ActionSupport implements</span><br><span class="line">		ModelDriven&lt;Product&gt; &#123;</span><br><span class="line">	private Product p3 &#x3D; new Product();</span><br><span class="line">	@Override</span><br><span class="line">	public Product getModel() &#123;</span><br><span class="line">		return p3;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		return SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueStack3.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;查看valueStack信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;s:debug &#x2F;&gt;</span><br><span class="line">	商品名称：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;model.name&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt; 商品价格：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;model.price&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt;</span><br><span class="line">	使用EL表达式访问值栈中的数据：&lt;&#x2F;br&gt;</span><br><span class="line">	商品名称：$&#123;model.name&#125;</span><br><span class="line">	&lt;&#x2F;br&gt;</span><br><span class="line">        商品价格：$&#123;model.price&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2标签库</title>
    <url>/2020/03/08/struts2%E6%A0%87%E7%AD%BE%E5%BA%93/</url>
    <content><![CDATA[<p>①通用标签库<br>control tags：if、elseif、else、append、generator、merge、sort、subset<br>data tags：action、bean、date、debug、i18n、include、param、property、push、text<br>property标签：用于输出指定值<br>&lt;s:property value=”#name” default=”a default value”/&gt;<br>default 可选属性，如果需要输出的属性值为null，则显示该属性指定的值<br>escape 可选属性，指定是否格式化HTML代码<br>value 可选属性，指定需要输出的属性值，如果没有指定该属性，则默认输出valuestavk栈顶的值。<br>&lt;% request.setAttribute(“name”,”李四”); %&gt;<br>&lt;s:property value=”#request.name” default=”张三”/&gt;<br>&lt;s:property value=”‘<h1>hello</h1>‘“ escape=”false”/&gt;<br>set标签：用于将某个值放入指定范围<br>&lt;s:set value=”request.username” var=”XXX” scape=”a default value”/&gt;<br>var变量的名字，name、id和var表达的含义是一样的，name，id被var替代<br>scape：指定变量被放置的范围，该属性可以接受application、session、request、page、action。如果没有设置该属性，则默认放置在值栈的context中。<br>value：赋给变量的值如果没有设置该属性，即将valuestack栈顶的值赋给变量<br>interator标签：用于对集合进行迭代，包含list、set和数组<br>&lt;s:iterator value=”{‘aa’,’bb’,’cc’}” var=”i” status=”status”&gt;<br>&lt;s:if test=”#status.getCount()==1”&gt;<br><font color="red">&lt;s:property value=”i”/&gt;</font></s:if><br>value:指定被迭代的集合，没有则使用valuestack栈顶的集合<br>var：引用变量的名称<br>status：指定迭代时的interatorstatus实例,其实例包含的方法为：int getcount()返回当前迭代了几个元素、int getindex()返回当前迭代元素的索引、boolean iseven()返回当前被迭代元素的索引是否是偶数、boolean isodd()返回当前被迭代元素的是否是奇数、boolean isfirst()返回当前被迭代元素是否是第一个、boolean islast()返回当前被迭代元素是否是最后一个。<br>url标签：用于创建url，可以通过param标签提供request参数<br>&lt;s:url action=”book” namespace=”/“ var=”myurl”&gt;<br>&lt;s:param name=”id” value=”3”&gt;</s:param><br></s:url><br>value：如果不提供就用当前action，使用value后缀必加action<br>action：用来生成url的action，没有则使用value<br>namespace：命名空间<br>var：引用变量的名称<br>②UI标签库：页面布局<br>&lt;%@ taglib uri=”/struts-tags” prefix=”s” %&gt;<br>&lt;s:form action=” “ method=”post”&gt;<br>&lt;s:textfield name=”username” lable=”用户名”/&gt;<br>&lt;s:textfield name=”password” lable=”密码”/&gt;<br>&lt;s:submit value=”提交”/&gt;<br></s:form>表格页面，添加theme=”simple”即可消除。可以方面数据回显</p>
<p>regist.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">    &lt;%@ taglib uri&#x3D;&quot;&#x2F;struts-tags&quot; prefix&#x3D;&quot;s&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;traditional regist&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;&lt;s:fielderror&#x2F;&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;regist.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">密码:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">性别:&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot;&gt;男</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;female&quot;&gt;女&lt;br&#x2F;&gt;</span><br><span class="line">籍贯:&lt;select name&#x3D;&quot;city&quot;&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;广州&quot;&gt;广州&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;深圳&quot;&gt;深圳&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;&lt;br&#x2F;&gt;</span><br><span class="line">爱好:&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;篮球&quot;&gt;篮球</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;足球&quot;&gt;足球</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;乒乓球&quot;&gt;乒乓球&lt;br&#x2F;&gt;</span><br><span class="line">介绍:&lt;textarea name&#x3D;&quot;info&quot; rows&#x3D;&quot;6&quot; cols&#x3D;&quot;30&quot;&gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;UI regist&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;&lt;s:fielderror&#x2F;&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;s:form action&#x3D;&quot;regist.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;s:textfield name&#x3D;&quot;username&quot; label&#x3D;&quot;用户名&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:password name&#x3D;&quot;password&quot; showPassword&#x3D;&quot;true&quot; label&#x3D;&quot;密码&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:radio list&#x3D;&quot;#&#123; &#39;male&#39;:&#39;男&#39;,&#39;female&#39;:&#39;女&#39;&#125;&quot; name&#x3D;&quot;sex&quot; label&#x3D;&quot;性别&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:select list&#x3D;&quot;&#123;&#39;北京&#39;,&#39;上海&#39;,&#39;广州&#39;,&#39;深圳&#39;&#125;&quot; name&#x3D;&quot;city&quot; label&#x3D;&quot;籍贯&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:checkboxlist list&#x3D;&quot;&#123;&#39;篮球&#39;,&#39;足球&#39;,&#39;乒乓球&#39;&#125;&quot; name&#x3D;&quot;hobby&quot; label&#x3D;&quot;爱好&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:textarea name&#x3D;&quot;info&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;6&quot; label&#x3D;&quot;介绍&quot;&gt;&lt;&#x2F;s:textarea&gt;</span><br><span class="line">&lt;s:submit value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;s:form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>regist.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE validators PUBLIC</span><br><span class="line">  		&quot;-&#x2F;&#x2F;Apache Struts&#x2F;&#x2F;XWork Validator 1.0.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">  		&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;xwork-validator-1.0.3.dtd&quot;&gt;</span><br><span class="line">&lt;validators&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;username is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;password is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;sex&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;sex is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;&#x2F;validators&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">	&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">	&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.action.extension&quot; value&#x3D;&quot;action&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;demo1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name&#x3D;&quot;regist&quot; class&#x3D;&quot;cn.itcast.action.registaction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;regist.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>Registration.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class registaction extends ActionSupport&#123;</span><br><span class="line">	private String username;</span><br><span class="line">	private String password;</span><br><span class="line">	private String sex;</span><br><span class="line">	private String city;</span><br><span class="line">	private String[] hobby;</span><br><span class="line">	private String info;</span><br><span class="line">	public String getUsername() &#123;</span><br><span class="line">		return username;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setUsername(String username) &#123;</span><br><span class="line">		this.username &#x3D; username;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getPassword() &#123;</span><br><span class="line">		return password;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setPassword(String password) &#123;</span><br><span class="line">		this.password &#x3D; password;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getSex() &#123;</span><br><span class="line">		return sex;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setSex(String sex) &#123;</span><br><span class="line">		this.sex &#x3D; sex;</span><br><span class="line">	&#125;</span><br><span class="line">	public String[] getHobby() &#123;</span><br><span class="line">		return hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setHobby(String[] hobby) &#123;</span><br><span class="line">		this.hobby &#x3D; hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getInfo() &#123;</span><br><span class="line">		return info;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setInfo(String info) &#123;</span><br><span class="line">		this.info &#x3D; info;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getCity() &#123;</span><br><span class="line">		return city;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setCity(String city) &#123;</span><br><span class="line">		this.city &#x3D; city;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception&#123;</span><br><span class="line">		System.out.println(&quot;SUCCESS&quot;);</span><br><span class="line">		return NONE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2拦截器</title>
    <url>/2020/03/08/struts2%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<p>strutsh中的拦截器interceptor<br>1、应用<br>struts2中的拦截器信息在哪定义的？struts-default.xml文件<br>struts2中的拦截器怎样定义：<br>在struts.xml文件中按照以下语法来配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;interceptor name&#x3D;&quot;name&quot; class&#x3D;&quot;class&quot; &gt;&lt;param name&#x3D;&quot;paramname&quot;&gt;value&lt;&#x2F;param&gt;&lt;&#x2F;interceptor&gt;</span><br></pre></td></tr></table></figure>

<p>name为拦截器名称，class为其实现的类，param是为拦截器传参，分别是参数名与值。如果需要执行多个拦截动作需要配置成拦截器栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;interceptors&gt;&lt;interceptor-stack name&#x3D;stackname&quot;&gt;&lt;interceptor-ref name&#x3D;&quot;name&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;interceptor-stack&gt;&lt;&#x2F;interceptors&gt;</span><br></pre></td></tr></table></figure>

<p>其中stackname是栈的名称name为拦截器名称 interceptor-ref来指定多个拦截器<br>默认拦截器配置：&lt;default-interceptor-ref name=”拦截器的名称”/ &gt;<br>拦截器特点：查看源码大部分拦截器都extends Abstractinterceptor，这个类实现了interceptor接口，即struts2中的拦截器其实就是一个实现了interceptor接口的类。查看interceptor接口源码发现，定义了三个方法：Init、destory、intercept便是拦截器的生命周期。<br>拦截器作用：查看struts-default。xml文件中定义的defaultstack拦截器栈。它里面的每一个拦截器都有特定功能。<br>this.addactionerror()与this.addfielderror()区别前者用于校验，后者用来处理业务错误.在页面上要显示filederror使用的是&lt;s:filederror&gt;,actionerror使用的是&lt;s:actionerror&gt;<br>使用interceptor完成权限控制：自定义一个interceptor（做一个类去继承interceptor类）重定义interceptor方法要点：1）参数是actioninvocation类型，可以通过getaction()获取对象、getinvocationcontext()可以获取actioncontext对象。2）返回值：必须写成invocation.invoke代表向下执行。3）注册拦截器：在自己的struts.xml进行注册，如果在struts.xml中自定义了拦截器，那么继承失效<br>2、原理<br>struts2中的拦截器实现<br>1、struts2中的拦截器实现原理是AOP思想。AOP：面向切面（方面）编程，具体实现就是代理模式。<br>2、struts2中拦截器采用的是责任链模式。Java23设计模式中的一种，将所有操作像锁链一样串起来，在任意一个环节都可以让其继续执行，也可以断开。<br>查看struts2源码分析拦截器可知：1）：strutspreparedExecutefilter。完成两种操作①预处理操作：加载配置文件init方法②具体执行内容–拦截器dofilter方法中。2）actionproxy就是action的代理对象3）actioninvocation，这个对象是正真调用拦截器的对象。Invocation.invoke();4）采用递归调用拦截器，调用任意一个拦截器后都执行invocation.invoke,这相当于执行下一个拦截器后都执行了invokeactiononly(),这相当于执行action中的内容</p>
<p>demo3.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;登录&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;s:actionerror&#x2F;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;login3.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    USERNAME:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    PASSWORD:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts2.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs1_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;!-- 声明拦截器--&gt;</span><br><span class="line">    &lt;interceptors&gt;</span><br><span class="line">&lt;interceptor name&#x3D;&quot;mine&quot; class&#x3D;&quot;cn.itcast.utils.interceptor&quot;&#x2F;&gt;</span><br><span class="line">&lt;interceptor-stack name&#x3D;&quot;mystack&quot;&gt;</span><br><span class="line">&lt;interceptor-ref name&#x3D;&quot;defaultStack&quot;&#x2F;&gt;</span><br><span class="line">&lt;interceptor-ref name&#x3D;&quot;mine&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;interceptor-stack&gt;</span><br><span class="line">&lt;&#x2F;interceptors&gt;</span><br><span class="line">    &lt;!-- 用户登录操作--&gt;</span><br><span class="line">     &lt;action name&#x3D;&quot;login3&quot; class&#x3D;&quot;cn.itcast.action.login3action&quot;&gt;</span><br><span class="line">     &lt;result&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;book_*&quot; class&#x3D;&quot;cn.itcast.action.bookaction&quot; method&#x3D;&quot;&#123;1&#125;&quot;&gt;</span><br><span class="line">     &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login3&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;interceptor-ref name&#x3D;&quot;mystack&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>index.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;book&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_del&quot;&gt;book del&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_add&quot;&gt;book add&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_update&quot;&gt;book update&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_find&quot;&gt;book find&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;成功界面&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户$&#123;user.username&#125;登录成功</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>login3action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">import com.opensymphony.xwork2.ModelDriven;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">public class login3action extends ActionSupport implements ModelDriven&lt;User&gt;&#123;	private User user&#x3D;new User();</span><br><span class="line">	@Override</span><br><span class="line">	public User getModel() &#123;</span><br><span class="line">		&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">		return user;</span><br><span class="line">	&#125;</span><br><span class="line">	public String execute() throws Exception&#123;</span><br><span class="line">		ActionContext actionContext &#x3D; ActionContext.getContext();</span><br><span class="line">		if(&quot;Tom&quot;.equals(user.getUsername())&amp;&amp;&quot;123&quot;.equals(user.getPassword()))&#123;</span><br><span class="line">		&#x2F;&#x2F;System.out.println(user.getUsername()+&quot; &quot;+user.getPassword());</span><br><span class="line">			actionContext.getSession().put(&quot;user&quot;, user);</span><br><span class="line">			return SUCCESS;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				this.addActionError(&quot;user or password error&quot;);</span><br><span class="line">				return INPUT;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class User &#123;</span><br><span class="line">private String username;</span><br><span class="line">private String password;</span><br><span class="line">public String getUsername() &#123;</span><br><span class="line">return username;</span><br><span class="line">&#125;</span><br><span class="line">public void setUsername(String username) &#123;</span><br><span class="line">this.username&#x3D;username;</span><br><span class="line">&#125;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">return password;</span><br><span class="line">&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">this.password&#x3D;password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2核心配置</title>
    <url>/2020/03/08/struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Struts2框架不能见到web常用对象（request、respond、session），减少耦合<br>在struts2框架中获取servlet api有三种方式<br>1）直接在action汇总使用actioncontext去获取<br>这种方式不是直接获取servlet api，通过struts2框架将相关信息包装再返回<br>是通过servlet api执行后的结果封装到map集合中返回。<br>常用方法：1、怎样获取actioncontext对象:ActionContext context=ActionContext.getContext();<br>2、获取其他的servlet api：①get(key)相当于httpservletrequest的getattrbute(string name)方法②要获取请求参数 getParameter()相当于request.getParameterMap()③getsession()方法返回一个Map集合，相当于httpsession④getapplication()方法返回一个Map集合相当于servletcontext⑤context.put(key,value)相当于request.setAttribute(key,value).Actioncontext相当于是一个map集合<br>可以直接获取servlet api<br>2）实现接口，合适注入的方式获取servlet api<br>当我们自己的action为实现servletrequestaware接口，当action被加载时，struts2框架发现这个action实现了接口，就会通过注入的方式将web对象注入 action指定的方法中，我们在action中就可以得到这个web对象。<br>3）直接使用ServletActionContext<br>其下获取servlet api的方法是静态方法，我们在使用时直接使用类名调用ServletActionContext是ActionContext子类<br>Static HttpServletRequest get Request()<br>Static HttpServletResponse getResponse()<br>Static Servletcontext getServletcontext()<br>上面三种方式，建议使用actioncontext，因为它没有与servlet api耦合</p>
<p>通过actioncontext类访问方法访问servlet api（其本质就是通过调用actioncontext方法来使用map中key的值获取value）<br>index.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;Test2&#x2F;demo.action&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;msg&quot;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;send&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;% </span><br><span class="line">session.setAttribute(&quot;1&quot;,&quot;sessionvalue&quot;);</span><br><span class="line">application.setAttribute(&quot;2&quot;, &quot;applicationvalue&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs2_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;default-action-ref name&#x3D;&quot;index&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 继承actionsupport类完成action创建--&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo&quot; class&#x3D;&quot;cn.itcast.action.demoaction&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;  </span><br><span class="line">    &lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>demoaction.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">&#x2F;&#x2F;第一种方式，使用actioncontext</span><br><span class="line">public class demoaction extends ActionSupport &#123;</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;1获取actioncontext对象</span><br><span class="line">		ActionContext context&#x3D;ActionContext.getContext();</span><br><span class="line">		&#x2F;&#x2F;2获取请求参数request.getparameter(&quot;msg&quot;)</span><br><span class="line">		Map&lt;String,Object&gt; parameters&#x3D;context.getParameters();</span><br><span class="line">		System.out.println(((String[])parameters.get(&quot;msg&quot;))[0]);</span><br><span class="line">		&#x2F;&#x2F;3get相当于request.getattribute()</span><br><span class="line">		&#x2F;&#x2F;String msg&#x3D;(String)context.get(&quot;msg&quot;);&#x2F;&#x2F;相当于getattribute()</span><br><span class="line">		&#x2F;&#x2F;System.out.println(msg);</span><br><span class="line">&#x2F;&#x2F;4context.getsession()方法相当于获取一个httpsession对象，但他返回map集合</span><br><span class="line">		Map&lt;String,Object&gt; session&#x3D;context.getSession();</span><br><span class="line">		System.out.println(session.get(&quot;1&quot;));</span><br><span class="line">&#x2F;&#x2F;5使用context.getapplication相当于servletcontexxt对象中的内容，返回一个map</span><br><span class="line">		Map&lt;String,Object&gt; application&#x3D;context.getApplication();</span><br><span class="line">		System.out.println(application.get(&quot;2&quot;));</span><br><span class="line">		&#x2F;&#x2F;context的put方法</span><br><span class="line">		context.put(&quot;3&quot;, &quot;value&quot;);</span><br><span class="line">		System.out.println(context.get(&quot;3&quot;));</span><br><span class="line">		return SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;success&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">success.jsp hello struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>action请求参数处理：1）将action作为javabean处理请求参数（属性驱动）：直接在action中定义参数，属性的名称要与请求参数中的名称一致。更明确的说，应该与属性提供的get/set方法的后面的名称一致。 原理：通过struts3的拦截器完成的。主要是通过param拦截器完成。<br>问题一：struts2的action是否是多线程的？存在安全问题？<br>答：action是多线程的，解决线程安全问题的方案是，为每一个线程创建一个action实例。<br>问题二：将bean传递到service层，是否将action传递到service层？<br>答：不能，需要单独定义javabean，将action数据封装到bean。<br>2）创建单独的model对象，在action中创建model对象引用，提供get/set方法，在页面上通过ognl表达式（对象名.属性名）去封装（属性驱动）。通过param拦截器实现<br>3）通过modedriver方式（模型驱动）要求1）要求action实现一个接口modeldriven。重写getmodel()方法。2）要求在action中必须实例化一个javabean对象，在getmodel方法中将这个实例化后的对象返回。modeldriver这种方式的原理是通过modeldriven拦截器完成的。二、三对比来说，第二种可以再action定义多个对象，第三种只能定义一个。</p>
<p>result结果集类型：<br><result name="" type="">url</result>name属性对应的是action中方法执行后返回的字符串值，如果匹配会跳转指定的url，type属性定义跳转方式。chain-&gt;在action内部实现跳转，可以共享action数据、dispatcher-&gt;请求转发（默认）、redirect-&gt;重定向、redireaction-&gt;重定向到某个action，可以直接访问某个action、stream-&gt;回应是流，用于下载。<br>dispatcher与redirect用于跳转到页面，其他两者用于跳转到action</p>
<p>通过属性驱动的方法实现页面与action之间数据的交互(简单来说就是将提供的表单中的数据在一个java中包装后，在另一个java中采用调用其包装后的对象来实现调用，然后至于说ognl来封装的数据方式就是采用对象名.属性名的方式)</p>
<p>demo.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;              </span><br><span class="line">&lt;title&gt;使用ognl封装数据&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;login2.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">USERNAME:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.username&quot;&gt;&lt;br&gt;</span><br><span class="line">PASSWORD:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;user.password&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;send&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs1_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;login2&quot; class&#x3D;&quot;cn.itcast.action.login2action&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>user.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class User &#123;</span><br><span class="line">private String username;</span><br><span class="line">private String password;</span><br><span class="line">public String getUsername() &#123;</span><br><span class="line">return username;</span><br><span class="line">&#125;</span><br><span class="line">public void setUsername(String username) &#123;</span><br><span class="line">this.username&#x3D;username;&#125;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">return password;&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">this.password&#x3D;password;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>login2ation.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">&#x2F;&#x2F;创建单独的model，在页面使用ognl表达式</span><br><span class="line">public class login2action extends ActionSupport&#123;</span><br><span class="line">private User user;</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">return user;&#125;</span><br><span class="line">public void setUser(User user) &#123;</span><br><span class="line">this.user&#x3D;user;&#125;</span><br><span class="line">public String execute() throws Exception&#123;</span><br><span class="line">System.out.println(user.getUsername()+&quot; &quot;+user.getPassword());</span><br><span class="line">return SUCCESS;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2框架入门</title>
    <url>/2020/03/08/struts2%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>hello.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;struts basic&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;hello.action&quot;&gt;the struts basic&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;everyone.action&quot;&gt;the struts basic&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>everyone.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">everyone.jsp hello everyone struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;success&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">success.jsp hello struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line"> &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line"> &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;default&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;cn.itcast.action.helloaction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;OK&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure>

<p>cn.itcast.action</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">public class helloaction &#123;</span><br><span class="line">	public String execute() &#123;</span><br><span class="line">		return &quot;OK&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>struts2的一个入门案例，在jsp中引入一个.action超链接，然后和struts.xml中的name相匹配进入java包中获取相关的返回值，最后在显示另一个jsp页面内容</p>
]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>1150 Travelling Salesman Problem</title>
    <url>/2020/02/23/1150-Travelling-Salesman-Problem/</url>
    <content><![CDATA[<p>The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?” It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. (Quoted from “<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;</a>.)</p>
<p>In this problem, you are supposed to find, from a given list of cycles, the one that is the closest to the solution of a travelling salesman problem.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers <em>N</em> (2&lt;<em>N</em>≤200), the number of cities, and <em>M</em>, the number of edges in an undirected graph. Then <em>M</em> lines follow, each describes an edge in the format <code>City1 City2 Dist</code>, where the cities are numbered from 1 to <em>N</em> and the distance <code>Dist</code> is positive and is no more than 100. The next line gives a positive integer <em>K</em> which is the number of paths, followed by <em>K</em> lines of paths, each in the format:</p>
<p><em>n</em> <em>C</em>1 <em>C</em>2 … <em>C**n</em></p>
<p>where <em>n</em> is the number of cities in the list, and <em>C**i</em>‘s are the cities on a path.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each path, print in a line <code>Path X: TotalDist (Description)</code> where <code>X</code> is the index (starting from 1) of that path, <code>TotalDist</code> its total distance (if this distance does not exist, output <code>NA</code> instead), and <code>Description</code> is one of the following:</p>
<ul>
<li><code>TS simple cycle</code> if it is a simple cycle that visits every city;</li>
<li><code>TS cycle</code> if it is a cycle that visits every city, but not a simple cycle;</li>
<li><code>Not a TS cycle</code> if it is NOT a cycle that visits every city.</li>
</ul>
<p>Finally print in a line <code>Shortest Dist(X) = TotalDist</code> where <code>X</code> is the index of the cycle that is the closest to the solution of a travelling salesman problem, and <code>TotalDist</code> is its total distance. It is guaranteed that such a solution is unique.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 10</span><br><span class="line">6 2 1</span><br><span class="line">3 4 1</span><br><span class="line">1 5 1</span><br><span class="line">2 5 1</span><br><span class="line">3 1 8</span><br><span class="line">4 1 6</span><br><span class="line">1 6 1</span><br><span class="line">6 3 1</span><br><span class="line">1 2 1</span><br><span class="line">4 5 1</span><br><span class="line">7</span><br><span class="line">7 5 1 4 3 6 2 5</span><br><span class="line">7 6 1 3 4 5 2 6</span><br><span class="line">6 5 1 4 3 6 2</span><br><span class="line">9 6 2 1 6 3 4 5 2 6</span><br><span class="line">4 1 2 5 1</span><br><span class="line">7 6 1 2 5 4 3 1</span><br><span class="line">7 6 3 2 5 4 1 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Path 1: 11 (TS simple cycle)</span><br><span class="line">Path 2: 13 (TS simple cycle)</span><br><span class="line">Path 3: 10 (Not a TS cycle)</span><br><span class="line">Path 4: 8 (TS cycle)</span><br><span class="line">Path 5: 3 (Not a TS cycle)</span><br><span class="line">Path 6: 13 (Not a TS cycle)</span><br><span class="line">Path 7: NA (Not a TS cycle)</span><br><span class="line">Shortest Dist(4) &#x3D; 8</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int e[210][210], n, m, k, ans &#x3D; 100000, ansid;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">void check(int index) &#123;</span><br><span class="line">	int sum &#x3D; 0, cnt, flag &#x3D; 1;</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;cnt);</span><br><span class="line">	set&lt;int&gt; s;</span><br><span class="line">	vector&lt;int&gt; v(cnt);</span><br><span class="line">	for (int i &#x3D; 0; i &lt; cnt; i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;v[i]);</span><br><span class="line">		s.insert(v[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i &#x3D; 0; i &lt; cnt - 1; i++) &#123;</span><br><span class="line">		if(e[v[i]][v[i+1]] &#x3D;&#x3D; 0)&#123;</span><br><span class="line">		flag &#x3D; 0;</span><br><span class="line">		&#125;</span><br><span class="line">		sum +&#x3D; e[v[i]][v[i+1]];</span><br><span class="line">	&#125;</span><br><span class="line">	if (flag &#x3D;&#x3D; 0) &#123;</span><br><span class="line">		printf(&quot;Path %d: NA (Not a TS cycle)\n&quot;, index);</span><br><span class="line">	&#125; else if(v[0] !&#x3D; v[cnt-1] || s.size() !&#x3D; n) &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (Not a TS cycle)\n&quot;, index, sum);</span><br><span class="line">	&#125; else if(cnt !&#x3D; n + 1) &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (TS cycle)\n&quot;, index, sum);</span><br><span class="line">		if (sum &lt; ans) &#123;</span><br><span class="line">			ans &#x3D; sum;</span><br><span class="line">			ansid &#x3D; index;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (TS simple cycle)\n&quot;, index, sum);</span><br><span class="line">		if (sum &lt; ans) &#123;</span><br><span class="line">			ans &#x3D; sum;</span><br><span class="line">			ansid &#x3D; index;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">	for (int i &#x3D; 0; i &lt; m; i++) &#123;</span><br><span class="line">		int t1, t2, t;</span><br><span class="line">		scanf(&quot;%d%d%d&quot;, &amp;t1, &amp;t2, &amp;t);</span><br><span class="line">		e[t1][t2] &#x3D; e[t2][t1] &#x3D; t;</span><br><span class="line">	&#125;</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;k);</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; k; i++)&#123;</span><br><span class="line">		check(i);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;Shortest Dist(%d) &#x3D; %d\n&quot;, ansid, ans);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否为旅行商问题，即能否形成一条每个点只经过一次的回路，起始点通过两次</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1149 Dangerous Goods Packaging</title>
    <url>/2020/02/23/1149-Dangerous-Goods-Packaging/</url>
    <content><![CDATA[<p>When shipping goods with containers, we have to be careful not to pack some incompatible goods into the same container, or we might get ourselves in serious trouble. For example, oxidizing agent （氧化剂） must not be packed with flammable liquid （易燃液体）, or it can cause explosion.</p>
<p>Now you are given a long list of incompatible goods, and several lists of goods to be shipped. You are supposed to tell if all the goods in a list can be packed into the same container.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: <em>N</em> (≤104), the number of pairs of incompatible goods, and <em>M</em> (≤100), the number of lists of goods to be shipped.</p>
<p>Then two blocks follow. The first block contains N pairs of incompatible goods, each pair occupies a line; and the second one contains M lists of goods to be shipped, each list occupies a line in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K G[1] G[2] ... G[K]</span><br></pre></td></tr></table></figure>

<p>where <code>K</code> (≤1,000) is the number of goods and <code>G[i]</code>‘s are the IDs of the goods. To make it simple, each good is represented by a 5-digit ID number. All the numbers in a line are separated by spaces.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each shipping list, print in a line <code>Yes</code> if there are no incompatible goods in the list, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 3</span><br><span class="line">20001 20002</span><br><span class="line">20003 20004</span><br><span class="line">20005 20006</span><br><span class="line">20003 20001</span><br><span class="line">20005 20004</span><br><span class="line">20004 20006</span><br><span class="line">4 00001 20004 00002 20003</span><br><span class="line">5 98823 20002 20003 20006 10010</span><br><span class="line">3 12345 67890 23333</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k, t1, t2;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t1, &amp;t2);</span><br><span class="line">		m[t1].push_back(t2);</span><br><span class="line">		m[t2].push_back(t1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt, flag = <span class="number">0</span>, a[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cnt);</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(cnt)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">			a[v[i]] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m[v[i]].<span class="built_in">size</span>(); j++)</span><br><span class="line">				<span class="keyword">if</span> (a[m[v[i]][j]] == <span class="number">1</span>)<span class="comment">//对应于map的地址与映射</span></span><br><span class="line">					flag = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag ? <span class="string">"No"</span> :<span class="string">"Yes"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1148 Werewolf - Simple Version</title>
    <url>/2020/02/23/1148-Werewolf-Simple-Version/</url>
    <content><![CDATA[<p>Werewolf（狼人杀） is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game,</p>
<ul>
<li>player #1 said: “Player #2 is a werewolf.”;</li>
<li>player #2 said: “Player #3 is a human.”;</li>
<li>player #3 said: “Player #4 is a werewolf.”;</li>
<li>player #4 said: “Player #5 is a human.”; and</li>
<li>player #5 said: “Player #4 is a human.”.</li>
</ul>
<p>Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. Can you point out the werewolves?</p>
<p>Now you are asked to solve a harder version of this problem: given that there were <em>N</em> players, with 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. You are supposed to point out the werewolves.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (5≤<em>N</em>≤100). Then <em>N</em> lines follow and the <em>i</em>-th line gives the statement of the <em>i</em>-th player (1≤<em>i</em>≤<em>N</em>), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>If a solution exists, print in a line in ascending order the indices of the two werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the smallest solution sequence – that is, for two sequences <em>A</em>=<em>a</em>[1],…,<em>a</em>[<em>M</em>] and <em>B</em>=<em>b</em>[1],…,<em>b</em>[<em>M</em>], if there exists 0≤<em>k</em>&lt;<em>M</em> such that <em>a</em>[<em>i</em>]=<em>b</em>[<em>i</em>] (<em>i</em>≤<em>k</em>) and <em>a</em>[<em>k</em>+1]&lt;<em>b</em>[<em>k</em>+1], then <em>A</em> is said to be smaller than <em>B</em>. In case there is no solution, simply print <code>No Solution</code>.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">+3</span><br><span class="line">-4</span><br><span class="line">+5</span><br><span class="line">+4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">+6</span><br><span class="line">+3</span><br><span class="line">+1</span><br><span class="line">-5</span><br><span class="line">-2</span><br><span class="line">+4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2-the-solution-is-not-unique"><a href="#Sample-Output-2-the-solution-is-not-unique" class="headerlink" title="Sample Output 2 (the solution is not unique):"></a>Sample Output 2 (the solution is not unique):</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line">-5</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; wolf, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> error_count = <span class="number">0</span>;     </span><br><span class="line">	<span class="keyword">int</span> wolf_count = <span class="number">0</span>;     </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (wolf[<span class="built_in">abs</span>(key[i]) - <span class="number">1</span>] * key[i] &lt; <span class="number">0</span>) &#123;   </span><br><span class="line">			<span class="keyword">if</span> (wolf[i] == <span class="number">-1</span>)</span><br><span class="line">				wolf_count++;</span><br><span class="line">			error_count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (error_count == <span class="number">2</span> &amp;&amp; wolf_count == <span class="number">1</span>)   </span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key;</span><br><span class="line">	<span class="keyword">int</span> n, t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	key.resize(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; key[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">wolf</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">			wolf[i] = wolf[j] = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span> (judge(key, wolf, n)) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; j + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题采用双层循环遍历，假设出狼人的位置，然后根据撒谎人数为2，狼人撒谎一人来解决问题</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1155 Heap Paths</title>
    <url>/2020/02/22/1155-Heap-Paths/</url>
    <content><![CDATA[<p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heap_(data_structure)</a>)</p>
<p>One thing for sure is that all the keys along any path from the root to a leaf in a max/min heap must be in non-increasing/non-decreasing order.</p>
<p>Your job is to check every path in a given complete binary tree, in order to tell if it is a heap or not.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (1&lt;<em>N</em>≤1,000), the number of keys in the tree. Then the next line contains <em>N</em> distinct integer keys (all in the range of <strong>int</strong>), which gives the level order traversal sequence of a complete binary tree.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given tree, first print all the paths from the root to the leaves. Each path occupies a line, with all the numbers separated by a space, and no extra space at the beginning or the end of the line. The paths must be printed in the following order: for each node in the tree, all the paths in its right subtree must be printed before those in its left subtree.</p>
<p>Finally print in a line <code>Max Heap</code> if it is a max heap, or <code>Min Heap</code> for a min heap, or <code>Not Heap</code> if it is not a heap at all. </p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">98 72 86 60 65 12 23 50</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">98 86 23</span><br><span class="line">98 86 12</span><br><span class="line">98 72 65</span><br><span class="line">98 72 60 50</span><br><span class="line">Max Heap</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">8 38 25 58 52 82 70 60</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 25 70</span><br><span class="line">8 25 82</span><br><span class="line">8 38 52</span><br><span class="line">8 38 58 60</span><br><span class="line">Min Heap</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">10 28 15 12 34 9 8 56</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 15 8</span><br><span class="line">10 15 9</span><br><span class="line">10 28 34</span><br><span class="line">10 28 12 56</span><br><span class="line">Not Heap</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">int a[1001], n, isMin &#x3D; 1, isMax &#x3D; 1;</span><br><span class="line">void Dfs(int index) &#123;</span><br><span class="line">	if (index * 2 &gt; n &amp;&amp; index * 2 + 1 &gt; n) &#123;</span><br><span class="line">		if (index &lt;&#x3D; n) &#123;</span><br><span class="line">			for (int i &#x3D; 0; i &lt; v.size(); i++)</span><br><span class="line">				printf(&quot;%d%s&quot;, v[i], i !&#x3D; v.size() - 1 ? &quot; &quot; : &quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		v.push_back(a[index * 2 + 1]);</span><br><span class="line">		Dfs(index * 2 + 1);</span><br><span class="line">		v.pop_back();</span><br><span class="line">		v.push_back(a[index * 2]);</span><br><span class="line">		Dfs(index * 2);</span><br><span class="line">		v.pop_back();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">	v.push_back(a[1]);</span><br><span class="line">	Dfs(1);</span><br><span class="line">	for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;&#x2F;&#x2F;与子节点比较</span><br><span class="line">		if (a[i&#x2F;2] &gt; a[i]) isMin &#x3D; 0;</span><br><span class="line">		if (a[i&#x2F;2] &lt; a[i]) isMax &#x3D; 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if (isMin &#x3D;&#x3D; 1)&#123;</span><br><span class="line">		printf(&quot;Min Heap&quot;);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		printf(&quot;%s&quot;, isMax &#x3D;&#x3D; 1 ? &quot;Max Heap&quot; : &quot;Not Heap&quot;); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出一个层次遍历的一组数据，判断其深度优先遍历后的排序情况</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1154 Vertex Coloring</title>
    <url>/2020/02/22/1154-Vertex-Coloring/</url>
    <content><![CDATA[<p>A <strong>proper vertex coloring</strong> is a labeling of the graph’s vertices with colors such that no two vertices sharing the same edge have the same color. A coloring using at most <em>k</em> colors is called a (proper) <strong><em>k\</em>-coloring</strong>.</p>
<p>Now you are supposed to tell if a given coloring is a proper <em>k</em>-coloring.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers <em>N</em> and <em>M</em> (both no more than 104), being the total numbers of vertices and edges, respectively. Then <em>M</em> lines follow, each describes an edge by giving the indices (from 0 to <em>N</em>−1) of the two ends of the edge.</p>
<p>After the graph, a positive integer <em>K</em> (≤ 100) is given, which is the number of colorings you are supposed to check. Then <em>K</em>lines follow, each contains <em>N</em> colors which are represented by non-negative integers in the range of <strong>int</strong>. The <em>i</em>-th color is the color of the <em>i</em>-th vertex.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each coloring, print in a line <code>k-coloring</code> if it is a proper <code>k</code>-coloring for some positive <code>k</code>, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 11</span><br><span class="line">8 7</span><br><span class="line">6 8</span><br><span class="line">4 5</span><br><span class="line">8 4</span><br><span class="line">8 1</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">9 8</span><br><span class="line">9 1</span><br><span class="line">1 0</span><br><span class="line">2 4</span><br><span class="line">4</span><br><span class="line">0 1 0 1 4 1 0 1 3 0</span><br><span class="line">0 1 0 1 4 1 0 1 0 0</span><br><span class="line">8 1 0 1 4 1 0 5 3 0</span><br><span class="line">1 2 3 4 5 6 7 8 8 9</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4-coloring</span><br><span class="line">No</span><br><span class="line">6-coloring</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t1, t2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;node&gt; <span class="title">v</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;v[i].t1, &amp;v[i].t2);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">10009</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">			se.insert(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[v[i].t1] == a[v[i].t2]) &#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d-coloring\n"</span>, se.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出n条边及其对应的颜色，判断是否存在相同颜色的边，若有则输出no，没有则要表明存在几种颜色。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1045 Favorite Color Stripe</title>
    <url>/2020/02/15/1045-Favorite-Color-Stripe/</url>
    <content><![CDATA[<p>Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutting off those unwanted pieces and sewing the remaining parts together to form her favorite color stripe.</p>
<p>It is said that a normal human eye can distinguish about less than 200 different colors, so Eva’s favorite colors are limited. However the original stripe could be very long, and Eva would like to have the remaining favorite stripe with the maximum length. So she needs your help to find her the best result.</p>
<p>Note that the solution might not be unique, but you only have to tell her the maximum length. For example, given a stripe of colors {2 2 4 1 5 5 6 3 1 1 5 6}. If Eva’s favorite colors are given in her favorite order as {2 3 1 5 6}, then she has 4 possible best solutions {2 2 1 1 1 5 6}, {2 2 1 5 5 5 6}, {2 2 1 5 5 6 6}, and {2 2 3 1 1 5 6}.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤200) which is the total number of colors involved (and hence the colors are numbered from 1 to <em>N</em>). Then the next line starts with a positive integer <em>M</em>(≤200) followed by <em>M</em> Eva’s favorite color numbers given in her favorite order. Finally the third line starts with a positive integer <em>L</em> (≤104) which is the length of the given stripe, followed by <em>L</em> colors on the stripe. All the numbers in a line a separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, simply print in a line the maximum length of Eva’s favorite stripe.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">5 2 3 1 5 6</span><br><span class="line">12 2 2 4 1 5 5 6 3 1 1 5 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<p>最长不下降子序列（LIS）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> HashTable[maxc];</span><br><span class="line"><span class="keyword">int</span> A[maxn], dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, x;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">fill</span>(HashTable, HashTable+maxc, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">		HashTable[x] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> L, num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">		<span class="keyword">if</span>(HashTable[x] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			A[num++] = HashTable[x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">		dp[i] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(A[j] &lt;= A[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">				dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最长公共子序列（LCS）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxc], B[maxn], dp[maxc][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> L;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;B[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		dp[i][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//边界</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= L; j++) &#123;</span><br><span class="line">		dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= L; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> MAX = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(A[i] == B[j]) &#123;</span><br><span class="line">				dp[i][j] = MAX + <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				dp[i][j] = MAX;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][L]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1044 Shopping in Mars</title>
    <url>/2020/02/13/1044-Shopping-in-Mars/</url>
    <content><![CDATA[<p>Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M$15. We may have 3 options:</p>
<ol>
<li>Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15).</li>
<li>Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15).</li>
<li>Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15).</li>
</ol>
<p>Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.</p>
<p>If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 numbers: <em>N</em> (≤105), the total number of diamonds on the chain, and <em>M</em> (≤108), the amount that the customer has to pay. Then the next line contains <em>N</em> positive numbers <em>D</em>1⋯<em>D**N</em> (<em>D*<em>i</em>≤103 for all *i</em>=1,⋯,<em>N</em>) which are the values of the diamonds. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print <code>i-j</code> in a line for each pair of <code>i</code> ≤ <code>j</code> such that <em>D</em><code>i</code> + … + <em>D</em><code>j</code> = <em>M</em>. Note that if there are more than one solution, all the solutions must be printed in increasing order of <code>i</code>.</p>
<p>If there is no solution, output <code>i-j</code> for pairs of <code>i</code> ≤ <code>j</code> such that <em>D</em><code>i</code> + … + <em>D</em><code>j</code> &gt;<em>M</em> with (<em>D</em><code>i</code> + … + <em>D</em><code>j</code> −<em>M</em>) minimized. Again all the solutions must be printed in increasing order of <code>i</code>.</p>
<p>It is guaranteed that the total value of diamonds is sufficient to pay the given amount.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16 15</span><br><span class="line">3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-5</span><br><span class="line">4-6</span><br><span class="line">7-8</span><br><span class="line">11-11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 13</span><br><span class="line">2 4 5 7 9</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2-4</span><br><span class="line">4-5</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="keyword">int</span> n, S, nearS = <span class="number">100000010</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> left = L, right = R, mid;</span><br><span class="line">	<span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">		mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum[mid] &gt; x) &#123;</span><br><span class="line">			right = mid;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			left = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;S);</span><br><span class="line">	sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i]);</span><br><span class="line">		sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = upper_bound(i, n + <span class="number">1</span>, sum[i - <span class="number">1</span>] + S);</span><br><span class="line">		<span class="keyword">if</span>(sum[j - <span class="number">1</span>] - sum[i - <span class="number">1</span>] == S) &#123;</span><br><span class="line">			nearS = S;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(j &lt;= n &amp;&amp; sum[j] - sum[i - <span class="number">1</span>] &lt; nearS) &#123;</span><br><span class="line">			nearS = sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = upper_bound(i, n + <span class="number">1</span>, sum[i - <span class="number">1</span>] + nearS);</span><br><span class="line">		<span class="keyword">if</span>(sum[j - <span class="number">1</span>] - sum[i - <span class="number">1</span>] == nearS) &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">"%d-%d\n"</span>, i, j - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1043 Is It a Binary Search Tree</title>
    <url>/2020/02/13/1043-Is-It-a-Binary-Search-Tree/</url>
    <content><![CDATA[<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>If we swap the left and right subtrees of every node, then the resulting tree is called the <strong>Mirror Image</strong> of a BST.</p>
<p>Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤1000). Then <em>N</em> integer keys are given in the next line. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line <code>YES</code> if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or <code>NO</code> if not. Then if the answer is <code>YES</code>, print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 5 7 10 8 11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">5 7 6 8 11 10 8</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">11 8 10 7 5 6 8</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 8 5 10 9 11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">    int data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line">void insert(node* &amp;root,int data)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        root&#x3D;new node;</span><br><span class="line">        root-&gt;data&#x3D;data;</span><br><span class="line">        root-&gt;left&#x3D;root-&gt;right&#x3D;NULL;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (data&lt;root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;left, data);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        insert(root-&gt;right, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void preorder(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preorder(root-&gt;left, vi);</span><br><span class="line">    preorder(root-&gt;right, vi);</span><br><span class="line">&#125;</span><br><span class="line">void preordermin(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preordermin(root-&gt;right, vi);</span><br><span class="line">    preordermin(root-&gt;left, vi);</span><br><span class="line">&#125;</span><br><span class="line">void postorder(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(root-&gt;left, vi);</span><br><span class="line">    postorder(root-&gt;right, vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">void postordermin(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    postordermin(root-&gt;right, vi);</span><br><span class="line">    postordermin(root-&gt;left, vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt;origin,pre,prem,post,postm;</span><br><span class="line">int main( )&#123;</span><br><span class="line">    int n,data;</span><br><span class="line">    node* root&#x3D;NULL;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for (int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;data);</span><br><span class="line">        origin.push_back(data);</span><br><span class="line">        insert(root, data);</span><br><span class="line">    &#125;</span><br><span class="line">    preorder(root, pre);</span><br><span class="line">    preordermin(root, prem);</span><br><span class="line">    postorder(root, post);</span><br><span class="line">    postordermin(root, postm);</span><br><span class="line">    if (origin&#x3D;&#x3D;pre) &#123;</span><br><span class="line">        printf(&quot;YES\n&quot;);</span><br><span class="line">        for (int i&#x3D;0; i&lt;post.size(); i++) &#123;</span><br><span class="line">            printf(&quot;%d&quot;,post[i]);</span><br><span class="line">            if (i&lt;post.size()-1) &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if (origin&#x3D;&#x3D;prem)&#123;</span><br><span class="line">        printf(&quot;YES\n&quot;);</span><br><span class="line">        for (int i&#x3D;0; i&lt;postm.size(); i++) &#123;</span><br><span class="line">            printf(&quot;%d&quot;,postm[i]);</span><br><span class="line">            if (i&lt;postm.size()-1) &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;NO\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题需要理解题意，判断是否为（镜像树）先序序列，是则输出后序序列。此题可借助递归来遍历树即可。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1034 Head of a Gang</title>
    <url>/2020/02/11/1034-Head-of-a-Gang/</url>
    <content><![CDATA[<p>One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between <em>A</em> and <em>B</em>, we say that <em>A</em> and <em>B</em> is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A “Gang” is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threshold <em>K</em>. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two positive numbers <em>N</em> and <em>K</em> (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then <em>N</em> lines follow, each in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name1 Name2 Time</span><br></pre></td></tr></table></figure>

<p>where <code>Name1</code> and <code>Name2</code> are the names of people at the two ends of the call, and <code>Time</code> is the length of the call. A name is a string of three capital letters chosen from <code>A</code>-<code>Z</code>. A time length is a positive integer which is no more than 1000 minutes.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 59</span><br><span class="line">AAA BBB 10</span><br><span class="line">BBB AAA 20</span><br><span class="line">AAA CCC 40</span><br><span class="line">DDD EEE 5</span><br><span class="line">EEE DDD 70</span><br><span class="line">FFF GGG 30</span><br><span class="line">GGG HHH 20</span><br><span class="line">HHH FFF 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">AAA 3</span><br><span class="line">GGG 3</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 70</span><br><span class="line">AAA BBB 10</span><br><span class="line">BBB AAA 20</span><br><span class="line">AAA CCC 40</span><br><span class="line">DDD EEE 5</span><br><span class="line">EEE DDD 70</span><br><span class="line">FFF GGG 30</span><br><span class="line">GGG HHH 20</span><br><span class="line">HHH FFF 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; intToString;<span class="comment">//存放编号-&gt;姓名</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; stringToInt;<span class="comment">//存放姓名-&gt;编号</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; Gang;<span class="comment">//存放head的姓名（inttostring(head))-&gt;numMember</span></span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn] = &#123;<span class="number">0</span>&#125;, weight[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, k, numPerson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> nowVisit, <span class="keyword">int</span>&amp; head, <span class="keyword">int</span>&amp; numMember, <span class="keyword">int</span>&amp; totalValue)</span> </span>&#123;</span><br><span class="line">	numMember++;</span><br><span class="line">	vis[nowVisit] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(weight[nowVisit] &gt; weight[head]) &#123;</span><br><span class="line">		head = nowVisit;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPerson; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(G[nowVisit][i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			totalValue += G[nowVisit][i];</span><br><span class="line">			G[nowVisit][i] = G[i][nowVisit] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(vis[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">				DFS(i, head, numMember, totalValue);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPerson; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> head = i, numMember = <span class="number">0</span>, totalValue = <span class="number">0</span>;</span><br><span class="line">			DFS(i, head, numMember, totalValue);</span><br><span class="line">			<span class="keyword">if</span>(numMember &gt; <span class="number">2</span> &amp;&amp; totalValue &gt; k) &#123;</span><br><span class="line">				Gang[intToString[head]] = numMember;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(stringToInt.<span class="built_in">find</span>(str) != stringToInt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		<span class="keyword">return</span> stringToInt[str];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		stringToInt[str] = numPerson;</span><br><span class="line">		intToString[numPerson] = str;</span><br><span class="line">		<span class="keyword">return</span> numPerson++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	<span class="built_in">string</span> str1, str2;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; w;</span><br><span class="line">		<span class="keyword">int</span> id1 = change(str1);</span><br><span class="line">		<span class="keyword">int</span> id2 = change(str2);</span><br><span class="line">		weight[id1] += w;</span><br><span class="line">		weight[id2] += w;</span><br><span class="line">		G[id1][id2] += w;</span><br><span class="line">		G[id2][id1] += w;</span><br><span class="line">	&#125;</span><br><span class="line">	DFSTrave();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Gang.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span>(it = Gang.<span class="built_in">begin</span>(); it != Gang.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断每一个连通块的节点的权重与边权，采用DFS对所有块遍历即可，将满足条件的head放入Gang中并输出对应的numMember。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1033 To Fill or Not to Fill</title>
    <url>/2020/02/11/1033-To-Fill-or-Not-to-Fill/</url>
    <content><![CDATA[<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: <em>C<strong>m</strong>a**x</em> (≤ 100), the maximum capacity of the tank; <em>D</em> (≤30000), the distance between Hangzhou and the destination city; <em>D<strong>a</strong>v**g</em> (≤20), the average distance per unit gas that the car can run; and <em>N</em> (≤ 500), the total number of gas stations. Then <em>N</em> lines follow, each contains a pair of non-negative numbers: <em>P**i</em>, the unit gas price, and <em>D**i</em> (≤<em>D</em>), the distance between this station and Hangzhou, for <em>i</em>=1,⋯,<em>N</em>. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print <code>The maximum travel distance = X</code> where <code>X</code> is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 1300 12 8</span><br><span class="line">6.00 1250</span><br><span class="line">7.00 600</span><br><span class="line">7.00 150</span><br><span class="line">7.10 0</span><br><span class="line">7.20 200</span><br><span class="line">7.50 400</span><br><span class="line">7.30 1000</span><br><span class="line">6.85 300</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">749.17</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 1300 12 2</span><br><span class="line">7.10 0</span><br><span class="line">7.00 600</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The maximum travel distance &#x3D; 1200.00</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">station</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> price, dis;</span><br><span class="line">&#125;st[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(station a, station b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b. dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> Cmax, D, Davg;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%d"</span>, &amp;Cmax, &amp;D, &amp;Davg, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;st[i].price, &amp;st[i].dis);</span><br><span class="line">    &#125;</span><br><span class="line">    st[n].price = <span class="number">0</span>;</span><br><span class="line">    st[n].dis = D;</span><br><span class="line">    sort(st, st + n, cmp);</span><br><span class="line">    <span class="keyword">if</span>(st[<span class="number">0</span>].dis != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = 0.00\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>, nowTank = <span class="number">0</span>, MAX = Cmax * Davg;</span><br><span class="line">        <span class="keyword">while</span>(now &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">double</span> priceMin = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= n &amp;&amp; st[i].dis - st[now].dis &lt;= MAX; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(st[i].price &lt; priceMin) &#123;</span><br><span class="line">                    priceMin = st[i].price;</span><br><span class="line">                    k = i;</span><br><span class="line">                    <span class="keyword">if</span>(priceMin &lt; st[now].price) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">double</span> need = (st[k].dis - st[now].dis) / Davg;</span><br><span class="line">            <span class="keyword">if</span>(priceMin &lt; st[now].price) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nowTank &lt; need) &#123;</span><br><span class="line">                    ans += (need - nowTank) * st[now].price;</span><br><span class="line">                    nowTank = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nowTank -= need;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += (Cmax - nowTank) * st[now].price;</span><br><span class="line">                nowTank = Cmax - need;</span><br><span class="line">            &#125;</span><br><span class="line">            now = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now == n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2f\n"</span>, st[now].dis + MAX);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题是典型的贪心算法，需要考虑在当前加油站需要加多少油可以到达最近的价格低于当前的加油站，以及考虑加满油后汽车所能行驶的最大距离。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1030 Travel Plan</title>
    <url>/2020/02/10/1030-Travel-Plan/</url>
    <content><![CDATA[<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination. If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers <em>N</em>, <em>M</em>, <em>S</em>, and <em>D</em>, where <em>N</em> (≤500) is the number of cities (and hence the cities are numbered from 0 to <em>N</em>−1); <em>M</em> is the number of highways; <em>S</em> and <em>D</em>are the starting and the destination cities, respectively. Then <em>M</em> lines follow, each provides the information of a highway, in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">City1 City2 Distance Cost</span><br></pre></td></tr></table></figure>

<p>where the numbers are all integers no more than 500, and are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5 0 3</span><br><span class="line">0 1 1 20</span><br><span class="line">1 3 2 30</span><br><span class="line">0 3 4 10</span><br><span class="line">0 2 2 20</span><br><span class="line">2 3 1 20</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 2 3 3 40</span><br></pre></td></tr></table></figure>

<h4 id="1-Dijkstra算法"><a href="#1-Dijkstra算法" class="headerlink" title="(1) Dijkstra算法"></a>(1) Dijkstra算法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], c[MAXV], pre[MAXV];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="built_in">fill</span>(c, c + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pre[i] = i;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	c[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					c[v] = c[u] + cost[u][v];</span><br><span class="line">					pre[v] = u;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					<span class="keyword">if</span>(c[u] + cost[u][v] &lt; c[v]) &#123;</span><br><span class="line">						c[v] = c[u] + cost[u][v];</span><br><span class="line">						pre[v] = u;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == st) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, v);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DFS(pre[v]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G[u][v], &amp;cost[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">		cost[v][u] = cost[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(st);</span><br><span class="line">	DFS(ed);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[ed], c[ed]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Dijkstra-DFS"><a href="#2-Dijkstra-DFS" class="headerlink" title="(2) Dijkstra+DFS"></a>(2) Dijkstra+DFS</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], minCost = INF;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath, path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		pre[i].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					pre[v].<span class="built_in">clear</span>();</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == st) &#123;</span><br><span class="line">		tempPath.push_back(v);</span><br><span class="line">		<span class="keyword">int</span> tempCost = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = tempPath.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> id = tempPath[i], idNext = tempPath[i - <span class="number">1</span>];</span><br><span class="line">			tempCost += cost[id][idNext];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tempCost &lt; minCost) &#123;</span><br><span class="line">			minCost = tempCost;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125;</span><br><span class="line">		tempPath.pop_back();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.push_back(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		DFS(pre[v][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G[u][v], &amp;cost[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">		cost[v][u] = cost[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(st);</span><br><span class="line">	DFS(ed);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[ed], minCost);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种解法，总的来说前者较为简单只需要在选择路径最短的同时考虑耗时的问题，而后者在使用dijkstra算法来获取最短路径，再使用dfs来比较出耗费最小的一条。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1026 Table Tennis</title>
    <url>/2020/02/09/1026-Table-Tennis/</url>
    <content><![CDATA[<p>A table tennis club has N tables available to the public. The tables are numbered from 1 to N. For any pair of players, if there are some tables open when they arrive, they will be assigned to the available table with the smallest number. If all the tables are occupied, they will have to wait in a queue. It is assumed that every pair of players can play for at most 2 hours.</p>
<p>Your job is to count for everyone in queue their waiting time, and for each table the number of players it has served for the day.</p>
<p>One thing that makes this procedure a bit complicated is that the club reserves some tables for their VIP members. When a VIP table is open, the first VIP pair in the queue will have the priviledge to take it. However, if there is no VIP in the queue, the next pair of players can take it. On the other hand, if when it is the turn of a VIP pair, yet no VIP table is available, they can be assigned as any ordinary players.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <code>N</code> (≤10000) - the total number of pairs of players. Then <code>N</code> lines follow, each contains 2 times and a VIP tag: <code>HH:MM:SS</code> - the arriving time, <code>P</code> - the playing time in minutes of a pair of players, and <code>tag</code> - which is 1 if they hold a VIP card, or 0 if not. It is guaranteed that the arriving time is between 08:00:00 and 21:00:00 while the club is open. It is assumed that no two customers arrives at the same time. Following the players’ info, there are 2 positive integers: <code>K</code> (≤100) - the number of tables, and <code>M</code> (&lt; K) - the number of VIP tables. The last line contains <code>M</code> table numbers.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the arriving time, serving time and the waiting time for each pair of players in the format shown by the sample. Then print in a line the number of players served by each table. Notice that the output must be listed in chronological order of the serving time. The waiting time must be rounded up to an integer minute(s). If one cannot get a table before the closing time, their information must NOT be printed.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">20:52:00 10 0</span><br><span class="line">08:00:00 20 0</span><br><span class="line">08:02:00 30 0</span><br><span class="line">20:51:00 10 0</span><br><span class="line">08:10:00 5 0</span><br><span class="line">08:12:00 10 1</span><br><span class="line">20:50:00 10 0</span><br><span class="line">08:01:30 15 1</span><br><span class="line">20:53:00 10 1</span><br><span class="line">3 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08:00:00 08:00:00 0</span><br><span class="line">08:01:30 08:01:30 0</span><br><span class="line">08:02:00 08:02:00 0</span><br><span class="line">08:12:00 08:16:30 5</span><br><span class="line">08:10:00 08:20:00 10</span><br><span class="line">20:50:00 20:50:00 0</span><br><span class="line">20:51:00 20:51:00 0</span><br><span class="line">20:52:00 20:52:00 0</span><br><span class="line">3 3 2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> arriveTime, startTime, trainTime;</span><br><span class="line">	<span class="keyword">bool</span> isVIP;</span><br><span class="line">&#125; newPlayer;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Table</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> endTime, numServe;</span><br><span class="line">	<span class="keyword">bool</span> isVIP;</span><br><span class="line">&#125; table[K];</span><br><span class="line"><span class="built_in">vector</span>&lt;Player&gt; player;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertTime</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h * <span class="number">3600</span> + m * <span class="number">60</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpArriveTime</span><span class="params">(Player a, Player b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.arriveTime &lt; b.arriveTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpStartTime</span><span class="params">(Player a, Player b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.startTime &lt; b.startTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextVIPPlayer</span><span class="params">(<span class="keyword">int</span> VIPi)</span> </span>&#123;</span><br><span class="line">	VIPi++;</span><br><span class="line">	<span class="keyword">while</span>(VIPi &lt; player.<span class="built_in">size</span>() &amp;&amp; player[VIPi].isVIP == <span class="number">0</span>) &#123;</span><br><span class="line">		VIPi++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> VIPi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allotTable</span><span class="params">(<span class="keyword">int</span> pID, <span class="keyword">int</span> tID)</span> </span>&#123;<span class="comment">//将tID桌分配给pID球员</span></span><br><span class="line">	<span class="keyword">if</span>(player[pID].arriveTime &lt;= table[tID].endTime) &#123;</span><br><span class="line">		player[pID].startTime = table[tID].endTime;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		player[pID].startTime = player[pID].arriveTime;</span><br><span class="line">	&#125;</span><br><span class="line">	table[tID].endTime = player[pID].startTime + player[pID].trainTime;</span><br><span class="line">	table[tID].numServe++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k, m, VIPtable;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> stTime = convertTime(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> edTime = convertTime(<span class="number">21</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> h, m, s, trainTime, isVIP;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d %d"</span>, &amp;h, &amp;m, &amp;s, &amp;trainTime, &amp;isVIP);</span><br><span class="line">		newPlayer.arriveTime = convertTime(h, m, s);</span><br><span class="line">		newPlayer.startTime = edTime;</span><br><span class="line">		<span class="keyword">if</span>(newPlayer.arriveTime &gt;= edTime) <span class="keyword">continue</span>;</span><br><span class="line">		newPlayer.trainTime = trainTime &lt;= <span class="number">120</span> ? trainTime * <span class="number">60</span> : <span class="number">7200</span>;</span><br><span class="line">		newPlayer.isVIP = isVIP;</span><br><span class="line">		player.push_back(newPlayer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">		table[i].endTime = stTime;</span><br><span class="line">		table[i].numServe = table[i].isVIP = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;VIPtable);</span><br><span class="line">		table[VIPtable].isVIP = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(player.<span class="built_in">begin</span>(), player.<span class="built_in">end</span>(), cmpArriveTime);</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, VIPi = <span class="number">-1</span>;</span><br><span class="line">	VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">	<span class="keyword">while</span>(i &lt; player.<span class="built_in">size</span>()) &#123;<span class="comment">//分四种情况，球员是(否)为vip与球桌是(否)为vip</span></span><br><span class="line">		<span class="keyword">int</span> idx = <span class="number">-1</span>, minEndTime = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(table[j].endTime &lt; minEndTime) &#123;</span><br><span class="line">				minEndTime = table[j].endTime;</span><br><span class="line">				idx = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(table[idx].endTime &gt;= edTime) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(player[i].isVIP == <span class="number">1</span> &amp;&amp; i &lt; VIPi) &#123;</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(table[idx].isVIP == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(player[i].isVIP == <span class="number">1</span>) &#123;</span><br><span class="line">				allotTable(i, idx);</span><br><span class="line">				<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">				i++;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(VIPi &lt; player.<span class="built_in">size</span>() &amp;&amp; player[VIPi].arriveTime &lt;= table[idx].endTime) &#123;</span><br><span class="line">					allotTable(VIPi, idx);</span><br><span class="line">					VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					allotTable(i, idx);</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(player[i].isVIP == <span class="number">0</span>) &#123;</span><br><span class="line">				allotTable(i, idx);</span><br><span class="line">				i++;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> VIPidx = <span class="number">-1</span>, minVIPEndTime = INF;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(table[j].isVIP == <span class="number">1</span> &amp;&amp; table[j].endTime &lt; minVIPEndTime) &#123;</span><br><span class="line">						minVIPEndTime = table[j].endTime;</span><br><span class="line">						VIPidx = j;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(VIPidx != <span class="number">-1</span> &amp;&amp; player[i].arriveTime &gt;= table[VIPidx].endTime) &#123;</span><br><span class="line">					allotTable(i, VIPidx);</span><br><span class="line">					<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">					i++;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					allotTable(i, idx);</span><br><span class="line">					<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(player.<span class="built_in">begin</span>(), player.<span class="built_in">end</span>(), cmpStartTime);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; player.<span class="built_in">size</span>() &amp;&amp; player[i].startTime &lt; edTime; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> t1 = player[i].arriveTime;</span><br><span class="line">		<span class="keyword">int</span> t2 = player[i].startTime;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>, t1 / <span class="number">3600</span>, t1 % <span class="number">3600</span> / <span class="number">60</span>, t1 % <span class="number">60</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>, t2 / <span class="number">3600</span>, t2 % <span class="number">3600</span> / <span class="number">60</span>, t2 % <span class="number">60</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>, round((t2 - t1) / <span class="number">60.0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, table[i].numServe);</span><br><span class="line">		<span class="keyword">if</span>(i &lt; k) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1023 Have Fun with Numbers</title>
    <url>/2020/02/09/1023-Have-Fun-with-Numbers/</url>
    <content><![CDATA[<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!</p>
<p>Now you are suppose to check if there are more numbers with this property. That is, double a given number with <em>k</em> digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input contains one test case. Each case contains one positive integer with no more than 20 digits.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567899</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">2469135798</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">21</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	bign() &#123;</span><br><span class="line">		<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">		len = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span> </span>&#123;<span class="comment">//转化bign型</span></span><br><span class="line">	bign a;</span><br><span class="line">	a.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		a.d[i] = str[a.len - i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bign <span class="title">multi</span><span class="params">(bign a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//乘法</span></span><br><span class="line">	bign c;</span><br><span class="line">	<span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = a.d[i] * b + carry;</span><br><span class="line">		c.d[c.len++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(carry != <span class="number">0</span>) &#123;</span><br><span class="line">		c.d[c.len++] = carry % <span class="number">10</span>;</span><br><span class="line">		carry /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.len != b.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		count[a.d[i]]++;</span><br><span class="line">		count[b.d[i]]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(count[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, a.d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">21</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">	bign a = change(str);</span><br><span class="line">	bign mul = multi(a, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(Judge(a, mul) == <span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">	<span class="built_in">print</span>(mul);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1022 Digital Library</title>
    <url>/2020/02/05/1022-Digital-Library/</url>
    <content><![CDATA[<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤104) which is the total number of books. Then <em>N</em> blocks follow, each contains the information of a book in 6 lines:</p>
<ul>
<li>Line #1: the 7-digit ID number;</li>
<li>Line #2: the book title – a string of no more than 80 characters;</li>
<li>Line #3: the author – a string of no more than 80 characters;</li>
<li>Line #4: the key words – each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;</li>
<li>Line #5: the publisher – a string of no more than 80 characters;</li>
<li>Line #6: the published year – a 4-digit number which is in the range [1000, 3000].</li>
</ul>
<p>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>
<p>After the book information, there is a line containing a positive integer <em>M</em> (≤1000) which is the number of user’s search queries. Then <em>M</em> lines follow, each in one of the formats shown below:</p>
<ul>
<li>1: a book title</li>
<li>2: name of an author</li>
<li>3: a key word</li>
<li>4: name of a publisher</li>
<li>5: a 4-digit number representing the year</li>
</ul>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print <code>Not Found</code> instead.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1111111</span><br><span class="line">The Testing Book</span><br><span class="line">Yue Chen</span><br><span class="line">test code debug sort keywords</span><br><span class="line">ZUCS Print</span><br><span class="line">2011</span><br><span class="line">3333333</span><br><span class="line">Another Testing Book</span><br><span class="line">Yue Chen</span><br><span class="line">test code sort keywords</span><br><span class="line">ZUCS Print2</span><br><span class="line">2012</span><br><span class="line">2222222</span><br><span class="line">The Testing Book</span><br><span class="line">CYLL</span><br><span class="line">keywords debug book</span><br><span class="line">ZUCS Print2</span><br><span class="line">2011</span><br><span class="line">6</span><br><span class="line">1: The Testing Book</span><br><span class="line">2: Yue Chen</span><br><span class="line">3: keywords</span><br><span class="line">4: ZUCS Print</span><br><span class="line">5: 2011</span><br><span class="line">3: blablabla</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: The Testing Book</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">2: Yue Chen</span><br><span class="line">1111111</span><br><span class="line">3333333</span><br><span class="line">3: keywords</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">3333333</span><br><span class="line">4: ZUCS Print</span><br><span class="line">1111111</span><br><span class="line">5: 2011</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">3: blablabla</span><br><span class="line">Not Found</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; mpTitle, mpAuthor, mpKey, mpPub, mpYear;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; mp, <span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mp.<span class="built_in">find</span>(str) == mp.<span class="built_in">end</span>()) <span class="built_in">printf</span>(<span class="string">"Not Found\n"</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = mp[str].<span class="built_in">begin</span>(); it != mp[str].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%07d\n"</span>, *it);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, id, type;</span><br><span class="line">	<span class="built_in">string</span> title, author, key, pub, year;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">		<span class="keyword">char</span> c = getchar();</span><br><span class="line">		getline(<span class="built_in">cin</span>, title);</span><br><span class="line">		mpTitle[title].insert(id);</span><br><span class="line">		getline(<span class="built_in">cin</span>, author);</span><br><span class="line">		mpAuthor[author].insert(id);</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; key) &#123;</span><br><span class="line">			mpKey[key].insert(id);</span><br><span class="line">			c = getchar();</span><br><span class="line">			<span class="keyword">if</span>(c == <span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getline(<span class="built_in">cin</span>, pub);</span><br><span class="line">		mpPub[pub].insert(id);</span><br><span class="line">		getline(<span class="built_in">cin</span>, year);</span><br><span class="line">		mpYear[year].insert(id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">string</span> temp;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d: "</span>, &amp;type);</span><br><span class="line">		getline(<span class="built_in">cin</span>, temp);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; type &lt;&lt; <span class="string">": "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span>(type == <span class="number">1</span>) query(mpTitle, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>) query(mpAuthor, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) query(mpKey, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">4</span>) query(mpPub, temp);</span><br><span class="line">		<span class="keyword">else</span> query(mpYear, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题还是采用map与set嵌套使用的方式来录入一定的数据，然后通过要查询的类型数据来输出相应的id</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1021 Deepest Root</title>
    <url>/2020/02/04/1021-Deepest-Root/</url>
    <content><![CDATA[<p>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called <strong>the deepest root</strong>.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤104) which is the number of nodes, and hence the nodes are numbered from 1 to <em>N</em>. Then <em>N</em>−1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print <code>Error: K components</code> where <code>K</code> is the number of connected components in the graph.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: 2 components</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp, Ans;</span><br><span class="line"><span class="keyword">bool</span> isRoot[N];</span><br><span class="line"><span class="keyword">int</span> father[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//找x根节点</span></span><br><span class="line">	<span class="keyword">int</span> a = x;</span><br><span class="line">	<span class="keyword">while</span>(x != father[x]) &#123;</span><br><span class="line">		x = father[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//合并a,b</span></span><br><span class="line">	<span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">	<span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">	<span class="keyword">if</span>(faA != faB) &#123;</span><br><span class="line">		father[faA] = faB;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	    father[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calBlock</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//计算连通块</span></span><br><span class="line">	<span class="keyword">int</span> Block = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		isRoot[findFather(i)] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		Block += isRoot[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxH = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> Height, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Height &gt; maxH) &#123;</span><br><span class="line">		temp.<span class="built_in">clear</span>();</span><br><span class="line">		temp.push_back(u);</span><br><span class="line">		maxH = Height;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(Height == maxH) &#123;</span><br><span class="line">		temp.push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(G[u][i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">		DFS(G[u][i], Height + <span class="number">1</span>, u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	init(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">		G[a].push_back(b);</span><br><span class="line">		G[b].push_back(a);</span><br><span class="line">		Union(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> Block = calBlock(n);</span><br><span class="line">	<span class="keyword">if</span>(Block != <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Error: %d components\n"</span>, Block);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		DFS(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">		Ans = temp;</span><br><span class="line">		DFS(Ans[<span class="number">0</span>], <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			Ans.push_back(temp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(Ans.<span class="built_in">begin</span>(), Ans.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(Ans[i] != Ans[i - <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否形成树，并且求最大树高的根节点。采用并查集的方法，将节点连接通过连通块个数来判断，然后DFS遍历出最深的根节点。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1020 Tree Traversals</title>
    <url>/2020/02/04/1020-Tree-Traversals/</url>
    <content><![CDATA[<p>Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">2 3 1 5 7 6 4</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 6 3 5 7 2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> pre[maxn],in[maxn],post[maxn],n;</span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">(<span class="keyword">int</span> postl,<span class="keyword">int</span> postr,<span class="keyword">int</span> inl,<span class="keyword">int</span> inr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (postl&gt;postr) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node * root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=post[postr];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (k=inl; k&lt;=inr; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in[k]==post[postr]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numleft=k-inl;</span><br><span class="line">    root-&gt;lchild=creat(postl, postl+numleft<span class="number">-1</span>, inl, k<span class="number">-1</span>);</span><br><span class="line">    root-&gt;rchild=creat(postl+numleft, postr<span class="number">-1</span>, k+<span class="number">1</span>, inr);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt;q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node* now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,now-&gt;data);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span> (num&lt;n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;lchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">                q.push(now-&gt;lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;rchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">                q.push(now-&gt;rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    node *root=creat(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    BFS(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要抓住后序序列的最后元素（根节点）与中序序列对应的元素即为中序序列的根节点，随后使用递归来遍历出左右子树的值，题意要求输出层次则使用DFS。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1018 Public Bike Management</title>
    <url>/2020/02/03/1018-Public-Bike-Management/</url>
    <content><![CDATA[<p>There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bike at any station and return it to any other stations in the city.</p>
<p>The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations. A station is said to be in <strong>perfect</strong> condition if it is exactly half-full. If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station to perfect. And more, all the stations on the way will be adjusted as well.</p>
<p>When a problem station is reported, PBMC will always choose the shortest path to reach that station. If there are more than one shortest path, the one that requires the least number of bikes sent from PBMC will be chosen.</p>
<p><img src="https://images.ptausercontent.com/213" alt="img"></p>
<p>The above figure illustrates an example. The stations are represented by vertices and the roads correspond to the edges. The number on an edge is the time taken to reach one end station from another. The number written inside a vertex <em>S</em> is the current number of bikes stored at <em>S</em>. Given that the maximum capacity of each station is 10. To solve the problem at <em>S</em>3, we have 2 different shortest paths:</p>
<ol>
<li>PBMC -&gt; <em>S</em>1 -&gt; <em>S</em>3. In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from <em>S</em>1 and then take 5 bikes to <em>S</em>3, so that both stations will be in perfect conditions.</li>
<li>PBMC -&gt; <em>S</em>2 -&gt; <em>S</em>3. This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.</li>
</ol>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 4 numbers: <em>C<strong>m</strong>a**x</em> (≤100), always an even number, is the maximum capacity of each station; <em>N</em> (≤500), the total number of stations; <em>S**p</em>, the index of the problem station (the stations are numbered from 1 to <em>N</em>, and PBMC is represented by the vertex 0); and <em>M</em>, the number of roads. The second line contains <em>N</em> non-negative numbers <em>C**i</em> (<em>i</em>=1,⋯,<em>N</em>) where each <em>C**i</em> is the current number of bikes at <em>S*<em>i</em>respectively. Then *M</em> lines follow, each contains 3 numbers: <em>S**i</em>, <em>S**j</em>, and <em>T<strong>i</strong>j</em> which describe the time <em>T<strong>i</strong>j</em> taken to move betwen stations <em>S**i</em> and <em>S**j</em>. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in one line. First output the number of bikes that PBMC must send. Then after one space, output the path in the format: 0−&gt;<em>S</em>1−&gt;⋯−&gt;<em>S**p</em>. Finally after another space, output the number of bikes that we must take back to PBMC after the condition of <em>S**p</em> is adjusted to perfect.</p>
<p>Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC. The judge’s data guarantee that such a path is unique.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 3 3 5</span><br><span class="line">6 7 0</span><br><span class="line">0 1 1</span><br><span class="line">0 2 1</span><br><span class="line">0 3 3</span><br><span class="line">1 3 1</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 0-&gt;2-&gt;3 0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Cmax, Sp, numPath = <span class="number">0</span>, G[MAXV][MAXV], weight[MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], minNeed = INF, minRemain = INF;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath, path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		pre[i].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					pre[v].<span class="built_in">clear</span>();</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == <span class="number">0</span>) &#123;</span><br><span class="line">		tempPath.push_back(v);</span><br><span class="line">		<span class="keyword">int</span> need = <span class="number">0</span>, remain = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = tempPath.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> id = tempPath[i];</span><br><span class="line">			<span class="keyword">if</span>(weight[id] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				remain += weight[id];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(remain &gt; <span class="built_in">abs</span>(weight[id])) &#123;</span><br><span class="line">					remain -= <span class="built_in">abs</span>(weight[id]);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					need += <span class="built_in">abs</span>(weight[id]) - remain;</span><br><span class="line">					remain = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(need &lt; minNeed) &#123;</span><br><span class="line">			minNeed = need;</span><br><span class="line">			minRemain = remain;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(need == minNeed &amp;&amp; remain &lt; minRemain) &#123;</span><br><span class="line">			minRemain = remain;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125;</span><br><span class="line">		tempPath.pop_back();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.push_back(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		DFS(pre[v][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;Cmax, &amp;n, &amp;Sp, &amp; m);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</span><br><span class="line">		weight[i] -= Cmax / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(<span class="number">0</span>);</span><br><span class="line">	DFS(Sp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, minNeed);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, path[i]);</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" %d"</span>, minRemain);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题使用dijksta+DFS的方法来解决自行车管理，由于需要考虑到完美状态的问题，在录入数据时便将数据折半然后求最大容量与之差，得‘’-‘’则表示需要补给车辆反之需要撤走车辆。使用dijksta来解决最短路径，DFS来解决最小的need或最小的remain</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1017 Queueing at Bank</title>
    <url>/2020/02/03/1017-Queueing-at-Bank/</url>
    <content><![CDATA[<p>Suppose a bank has <em>K</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.</p>
<p>Now given the arriving time <em>T</em> and the processing time <em>P</em> of each customer, you are supposed to tell the average waiting time of all the customers.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 numbers: <em>N</em> (≤104) - the total number of customers, and <em>K</em> (≤100) - the number of windows. Then <em>N</em> lines follow, each contains 2 times: <code>HH:MM:SS</code> - the arriving time, and <em>P</em> - the processing time in minutes of a customer. Here <code>HH</code> is in the range [00, 23], <code>MM</code> and <code>SS</code> are both in [00, 59]. It is assumed that no two customers arrives at the same time.</p>
<p>Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 3</span><br><span class="line">07:55:00 16</span><br><span class="line">17:00:01 2</span><br><span class="line">07:59:59 15</span><br><span class="line">08:01:00 60</span><br><span class="line">08:00:00 30</span><br><span class="line">08:00:02 2</span><br><span class="line">08:03:00 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8.2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> k=<span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">10000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">customer</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> cometime,needtime;</span><br><span class="line">&#125;newcustomer;</span><br><span class="line"><span class="built_in">vector</span>&lt;customer&gt;custom;<span class="comment">//使用队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">changetime</span><span class="params">(<span class="keyword">int</span> h,<span class="keyword">int</span> m,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h*<span class="number">3600</span>+m*<span class="number">60</span>+s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(customer a,customer b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.cometime&lt;b.cometime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> endtime[k];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c,w,totaltime=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> stime=changetime(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> etime=changetime(<span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c,&amp;w);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w;i++) &#123;</span><br><span class="line">		endtime[i]=stime;<span class="comment">//初始化结束时间</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> h,m,s,needtime;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d"</span>,&amp;h,&amp;m,&amp;s,&amp;needtime);</span><br><span class="line">		<span class="keyword">int</span> cometime=changetime(h, m, s);</span><br><span class="line">		<span class="keyword">if</span> (cometime&gt;etime) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		newcustomer.cometime=cometime;</span><br><span class="line">		newcustomer.needtime=needtime&lt;=<span class="number">60</span>?needtime*<span class="number">60</span>:<span class="number">3600</span>;</span><br><span class="line">		custom.push_back(newcustomer);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(custom.<span class="built_in">begin</span>(), custom.<span class="built_in">end</span>(), cmp);<span class="comment">//借助队列调用sort函数排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;custom.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> idx=<span class="number">-1</span>,minetime=INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w;j++) &#123;<span class="comment">//选择最早结束服务的窗口</span></span><br><span class="line">			<span class="keyword">if</span> (endtime[j]&lt;minetime) &#123;</span><br><span class="line">				minetime=endtime[j];</span><br><span class="line">				idx=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (endtime[idx]&lt;=custom[i].cometime) &#123;</span><br><span class="line">			endtime[idx]=custom[i].cometime+custom[i].needtime;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			totaltime+=(endtime[idx]-custom[i].cometime);</span><br><span class="line">			endtime[idx]+=custom[i].needtime;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (custom.<span class="built_in">size</span>()==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.1f"</span>,totaltime/<span class="number">60.0</span>/custom.<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1016 Phone Bills</title>
    <url>/2020/02/02/1016-Phone-Bills/</url>
    <content><![CDATA[<p>A long-distance telephone company charges its customers by the following rules:</p>
<p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p>
<p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p>
<p>The next line contains a positive number <em>N</em> (≤1000), followed by <em>N</em> lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (<code>mm:dd:hh:mm</code>), and the word <code>on-line</code> or <code>off-line</code>.</p>
<p>For each test case, all dates will be within a single month. Each <code>on-line</code> record is paired with the chronologically next record for the same customer provided it is an <code>off-line</code> record. Any <code>on-line</code> records that are not paired with an <code>off-line</code> record are ignored, as are <code>off-line</code> records not paired with an <code>on-line</code> record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you must print a phone bill for each customer.</p>
<p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (<code>dd:hh:mm</code>), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 10</span><br><span class="line">10</span><br><span class="line">CYLL 01:01:06:01 on-line</span><br><span class="line">CYLL 01:28:16:05 off-line</span><br><span class="line">CYJJ 01:01:07:00 off-line</span><br><span class="line">CYLL 01:01:08:03 off-line</span><br><span class="line">CYJJ 01:01:05:59 on-line</span><br><span class="line">aaa 01:01:01:03 on-line</span><br><span class="line">aaa 01:02:00:01 on-line</span><br><span class="line">CYLL 01:28:15:41 on-line</span><br><span class="line">aaa 01:05:02:24 on-line</span><br><span class="line">aaa 01:04:23:59 off-line</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CYJJ 01</span><br><span class="line">01:05:59 01:07:00 61 $12.10</span><br><span class="line">Total amount: $12.10</span><br><span class="line">CYLL 01</span><br><span class="line">01:06:01 01:08:03 122 $24.40</span><br><span class="line">28:15:41 28:16:05 24 $3.85</span><br><span class="line">Total amount: $28.25</span><br><span class="line">aaa 01</span><br><span class="line">02:00:01 04:23:59 4318 $638.80</span><br><span class="line">Total amount: $638.80</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> space[<span class="number">25</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">record</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line">	<span class="keyword">int</span> month, dd, hh, mm;</span><br><span class="line">	<span class="keyword">bool</span> status;</span><br><span class="line">&#125; rec[maxn], temp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(record a,record b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="built_in">strcmp</span>(a.name, b.name);</span><br><span class="line">	<span class="keyword">if</span> (s!=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> s&lt;<span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.month!=b.month) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.month&lt;b.month;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.dd!=b.dd) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.dd&lt;b.dd;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.hh!=b.hh) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.hh&lt;b.hh;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a.mm&lt;b.mm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getmoney</span><span class="params">(<span class="keyword">int</span> on,<span class="keyword">int</span> off,<span class="keyword">int</span>&amp; time,<span class="keyword">int</span>&amp; money)</span></span>&#123;</span><br><span class="line">	temp=rec[on];</span><br><span class="line">	<span class="keyword">while</span> (temp.dd&lt;rec[off].dd||temp.hh&lt;rec[off].hh||temp.mm&lt;rec[off].mm) &#123;</span><br><span class="line">		time++;</span><br><span class="line">		money+=space[temp.hh];</span><br><span class="line">		temp.mm++;</span><br><span class="line">		<span class="keyword">if</span> (temp.mm&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">			temp.mm=<span class="number">0</span>;</span><br><span class="line">			temp.hh++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (temp.hh&gt;=<span class="number">24</span>) &#123;</span><br><span class="line">			temp.hh=<span class="number">0</span>;</span><br><span class="line">			temp.dd++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;space[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,rec[i].name);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d:%d"</span>,&amp;rec[i].month,&amp;rec[i].dd,&amp;rec[i].hh,&amp;rec[i].mm);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">line</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="built_in">line</span>, <span class="string">"on-line"</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">			rec[i].status=<span class="literal">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			rec[i].status=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(rec,rec+n,cmp);</span><br><span class="line">	<span class="keyword">int</span> on=<span class="number">0</span>,off,next;</span><br><span class="line">	<span class="keyword">while</span> (on&lt;n) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">print</span>=<span class="number">0</span>;</span><br><span class="line">		next=on;</span><br><span class="line">		<span class="keyword">while</span> (next&lt;n&amp;&amp;<span class="built_in">strcmp</span>(rec[next].name, rec[on].name)==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">print</span>==<span class="number">0</span>&amp;&amp;rec[next].status==<span class="literal">true</span>) &#123;</span><br><span class="line">				<span class="built_in">print</span>=<span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">print</span>==<span class="number">1</span>&amp;&amp;rec[next].status==<span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="built_in">print</span>=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			next++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">print</span>&lt;<span class="number">2</span>) &#123;</span><br><span class="line">			on=next;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> allmoney=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s %02d\n"</span>,rec[on].name,rec[on].month);</span><br><span class="line">		<span class="keyword">while</span> (on&lt;next) &#123;</span><br><span class="line">			<span class="keyword">while</span> (on&lt;next<span class="number">-1</span>&amp;&amp;!(rec[on].status==<span class="literal">true</span>&amp;&amp;rec[on+<span class="number">1</span>].status==<span class="literal">false</span>)) &#123;</span><br><span class="line">				on++;</span><br><span class="line">			&#125;</span><br><span class="line">			off=on+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (off==next) &#123;</span><br><span class="line">				on=next;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,rec[on].dd,rec[on].hh,rec[on].mm);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,rec[off].dd,rec[off].hh,rec[off].mm);</span><br><span class="line">			<span class="keyword">int</span> time=<span class="number">0</span>,money=<span class="number">0</span>;</span><br><span class="line">			getmoney(on, off, time, money);</span><br><span class="line">			allmoney+=money;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d $%.2f\n"</span>,time,money/<span class="number">100.0</span>);</span><br><span class="line">			on=off+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Total amount: $%.2f\n"</span>,allmoney/<span class="number">100.0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题需要考虑每个用户的多个开始结束时间，要注意对用户信息进行排序这样可以便于找到on,off</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1014 Waiting in Line</title>
    <url>/2020/02/01/1014-Waiting-in-Line/</url>
    <content><![CDATA[<p>Suppose a bank has <em>N</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p>
<ul>
<li>The space inside the yellow line in front of each window is enough to contain a line with <em>M</em> customers. Hence when all the <em>N</em> lines are full, all the customers after (and including) the (<em>N**M</em>+1)st one will have to wait in a line behind the yellow line.</li>
<li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.</li>
<li><em>C<strong>u</strong>s<strong>t</strong>o<strong>m</strong>e<strong>r</strong>i</em> will take <em>T**i</em> minutes to have his/her transaction processed.</li>
<li>The first <em>N</em> customers are assumed to be served at 8:00am.</li>
</ul>
<p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p>
<p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, <em>c*</em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>1is served at <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 while <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>2 is served at <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>2. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>3 will wait in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 and <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>4will wait in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>2. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r*5 will wait behind the yellow line.</p>
<p>At 08:01, <em>c*</em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>1 is done and <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>5 enters the line in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 since that line seems shorter now. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>2 will leave at 08:02, <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>4 at 08:06, <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>3 at 08:07, and finally <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r*5 at 08:10.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: <em>N</em> (≤20, number of windows), <em>M</em> (≤10, the maximum capacity of each line inside the yellow line), <em>K</em> (≤1000, number of customers), and <em>Q</em> (≤1000, number of customer queries).</p>
<p>The next line contains <em>K</em> positive integers, which are the processing time of the <em>K</em> customers.</p>
<p>The last line contains <em>Q</em> positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to <em>K</em>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>Q</em> customers, print in one line the time at which his/her transaction is finished, in the format <code>HH:MM</code> where <code>HH</code> is in [08, 17] and <code>MM</code> is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output <code>Sorry</code> instead.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2 7 5</span><br><span class="line">1 2 6 4 3 534 2</span><br><span class="line">3 4 5 6 7</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08:07</span><br><span class="line">08:06</span><br><span class="line">08:10</span><br><span class="line">17:00</span><br><span class="line">Sorry</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNode = <span class="number">1111</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, query, q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertToMinute</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h * <span class="number">60</span> + m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Window</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> endTime, popTime;<span class="comment">//当前队伍的最后服务时间，队首客户的服务结束时间</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">&#125; window[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxNode], needTime[maxNode];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;k, &amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;needTime[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        window[i].popTime = window[i].endTime = convertToMinute(<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(n * m, k); i++) &#123;</span><br><span class="line">        window[inIndex % n].q.push(inIndex);</span><br><span class="line">        window[inIndex % n].endTime += needTime[inIndex];</span><br><span class="line">        <span class="keyword">if</span>(inIndex &lt; n) window[inIndex].popTime = needTime[inIndex];</span><br><span class="line">        ans[inIndex] = window[inIndex % n].endTime;</span><br><span class="line">        inIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; inIndex &lt; k; inIndex++) &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">-1</span>, minPopTime = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(window[i].popTime &lt; minPopTime) &#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                minPopTime = window[i].popTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Window&amp; W = window[idx];</span><br><span class="line">        W.q.pop();</span><br><span class="line">        W.q.push(inIndex);</span><br><span class="line">        W.endTime += needTime[inIndex];</span><br><span class="line">        W.popTime += needTime[W.q.front()];</span><br><span class="line">        ans[inIndex] = W.endTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; query; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">if</span>(ans[q - <span class="number">1</span>] - needTime[q - <span class="number">1</span>] &gt;= convertToMinute(<span class="number">17</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Sorry\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>, ans[q - <span class="number">1</span>] / <span class="number">60</span>, ans[q - <span class="number">1</span>] % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1013 Battle Over Cities</title>
    <url>/2020/02/01/1013-Battle-Over-Cities/</url>
    <content><![CDATA[<p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p>
<p>For example, if we have 3 cities and 2 highways connecting <em>c*</em>i<strong>t</strong>y<em>1-</em>c<strong>i</strong>t<strong>y*2 and *c</strong>i<strong>t</strong>y<em>1-</em>c<strong>i</strong>t<strong>y*3. Then if *c</strong>i<strong>t</strong>y<em>1 is occupied by the enemy, we must have 1 highway repaired, that is the highway <em>c</em></em>i<strong>t</strong>y<em>2-</em>c<strong>i</strong>t*<em>y</em>3.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 3 numbers <em>N</em> (&lt;1000), <em>M</em> and <em>K</em>, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then <em>M</em>lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to <em>N</em>. Finally there is a line containing <em>K</em> numbers, which represent the cities we concern.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>K</em> cities, output in a line the number of highways need to be repaired if that city is lost.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[N];<span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];<span class="comment">//确定是否被访问</span></span><br><span class="line"><span class="keyword">int</span> currentpoint;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (v==currentpoint) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vis[v]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (vis[G[v][i]]==<span class="literal">false</span>) &#123;</span><br><span class="line">			dfs(G[v][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		G[a].push_back(b);</span><br><span class="line">		G[b].push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;currentpoint);</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));<span class="comment">//初始化数组</span></span><br><span class="line">		<span class="keyword">int</span> block=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i!=currentpoint&amp;&amp;vis[i]==<span class="literal">false</span>) &#123;</span><br><span class="line">				dfs(i);</span><br><span class="line">				block++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,block<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将删除节点后的每个独立的线路分块，只需要统计这些块的个数即可得到所需要添加的路线数</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1012 The Best Rank</title>
    <url>/2020/02/01/1012-The-Best-Rank/</url>
    <content><![CDATA[<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>
<p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StudentID  C  M  E  A</span><br><span class="line">310101     98 85 88 90</span><br><span class="line">310102     70 95 88 84</span><br><span class="line">310103     82 87 94 88</span><br><span class="line">310104     91 91 91 91</span><br></pre></td></tr></table></figure>

<p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p>
<p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>
<p>If a student is not on the grading list, simply output <code>N/A</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">310101 98 85 88</span><br><span class="line">310102 70 95 88</span><br><span class="line">310103 82 87 94</span><br><span class="line">310104 91 91 91</span><br><span class="line">310105 85 90 90</span><br><span class="line">310101</span><br><span class="line">310102</span><br><span class="line">310103</span><br><span class="line">310104</span><br><span class="line">310105</span><br><span class="line">999999</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 C</span><br><span class="line">1 M</span><br><span class="line">1 E</span><br><span class="line">1 A</span><br><span class="line">3 A</span><br><span class="line">N&#x2F;A</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">int</span> grade[<span class="number">4</span>];</span><br><span class="line">&#125;stu[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">char</span> course[<span class="number">4</span>] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Rank[<span class="number">1000000</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> px;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.grade[px] &gt; b.grade[px];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;stu[i].id, &amp;stu[i].grade[<span class="number">1</span>], &amp;stu[i].grade[<span class="number">2</span>], &amp;stu[i].grade[<span class="number">3</span>]);</span><br><span class="line">		stu[i].grade[<span class="number">0</span>] = (stu[i].grade[<span class="number">1</span>] + stu[i].grade[<span class="number">2</span>] + stu[i].grade[<span class="number">3</span>]) / <span class="number">3</span>+<span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(px = <span class="number">0</span>; px &lt; <span class="number">4</span>; px++)&#123;</span><br><span class="line">		sort(stu, stu + n, cmp);</span><br><span class="line">		Rank[stu[<span class="number">0</span>].id][px] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(stu[i].grade[px] == stu[i - <span class="number">1</span>].grade[px])&#123;</span><br><span class="line">				Rank[stu[i].id][px] = Rank[stu[i - <span class="number">1</span>].id][px];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				Rank[stu[i].id][px] = i + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> findid;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;findid);</span><br><span class="line">		<span class="keyword">if</span>(Rank[findid][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"N/A\n"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(Rank[findid][j] &lt; Rank[findid][k])&#123;</span><br><span class="line">					k = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>, Rank[findid][k], course[k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题需要注意的是当考生的得分相同时需要将排名置为相同并且将后面的排名设置正确，当一个考生含有多个相同最优排名时要注意按照ACME的顺序输出，此项操作在开始时的赋值中确定。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1010 Radix</title>
    <url>/2020/01/31/1010-Radix/</url>
    <content><![CDATA[<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p>
<p>Now for any pair of positive integers <em>N</em>1 and <em>N</em>2, your task is to find the radix of one number while that of the other is given.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N1 N2 tag radix</span><br></pre></td></tr></table></figure>

<p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 110 1 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 ab 1 2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Impossible</span><br></pre></td></tr></table></figure>

<p>本题主要的思路是采用二分查找将已经确定的数值化成十进制以此为媒介来逐一排除需求的数，当实际解题时要注意确定进制的上下界。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL <span class="built_in">map</span>[<span class="number">255</span>];</span><br><span class="line">LL inf=(<span class="number">1L</span>L&lt;&lt;<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c=<span class="string">'0'</span>;c&lt;=<span class="string">'9'</span>;c++) &#123;</span><br><span class="line">		<span class="built_in">map</span>[c]=c-<span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++) &#123;</span><br><span class="line">		<span class="built_in">map</span>[c]=c-<span class="string">'a'</span>+<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">change10</span><span class="params">(<span class="keyword">char</span> a[],LL radix,LL t)</span></span>&#123;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		ans=ans*radix+<span class="built_in">map</span>[a[i]];</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;<span class="number">0</span>||ans&gt;t)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> n2[],LL radix,LL t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(n2);</span><br><span class="line">	LL num=change10(n2, radix, t);</span><br><span class="line">	<span class="keyword">if</span> (num&lt;<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t&gt;num) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (t==num) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binarysearch</span><span class="params">(<span class="keyword">char</span> n2[],LL left,LL right,LL t)</span></span>&#123;</span><br><span class="line">	LL mid;</span><br><span class="line">	<span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">		mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> flag=cmp(n2, mid, t);</span><br><span class="line">		<span class="keyword">if</span> (flag==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">			left=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			right=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmost</span><span class="params">(<span class="keyword">char</span> n2[])</span></span>&#123;<span class="comment">//求最大的数位</span></span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">-1</span>,len=<span class="built_in">strlen</span>(n2);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[n2[i]]&gt;ans) &#123;</span><br><span class="line">			ans=<span class="built_in">map</span>[n2[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> n1[<span class="number">20</span>],n2[<span class="number">20</span>],temp[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tag,radix;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%s%d%d"</span>,n1,n2,&amp;tag,&amp;radix);</span><br><span class="line">	<span class="keyword">if</span> (tag==<span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(temp, n1);</span><br><span class="line">		<span class="built_in">strcpy</span>(n1, n2);</span><br><span class="line">		<span class="built_in">strcpy</span>(n2, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	LL t=change10(n1, radix, inf);</span><br><span class="line">	LL low=findmost(n2);</span><br><span class="line">	LL high=<span class="built_in">max</span>(low,t)+<span class="number">1</span>;</span><br><span class="line">	LL ans=binarysearch(n2, low, high, t);</span><br><span class="line">	<span class="keyword">if</span> (ans==<span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1009 Product of Polynomials</title>
    <url>/2020/01/31/1009-Product-of-Polynomials/</url>
    <content><![CDATA[<p>This time, you are supposed to find <em>A</em>×<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p>
<p><em>K</em> <em>N</em>1 <em>a<strong>N<em>1 *N</em>2 *a</strong>N<em>2 … <em>N</em></em>K</em> <em>a<strong>N</strong>K</em></p>
<p>where <em>K</em> is the number of nonzero terms in the polynomial, <em>N**i</em> and <em>a<strong>N</strong>i</em> (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10, 0≤<em>N**K</em>&lt;⋯&lt;<em>N</em>2&lt;<em>N</em>1≤1000. </p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place. </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 3.6 2 6.0 1 1.6</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> bn;</span><br><span class="line">	<span class="keyword">double</span> an;</span><br><span class="line">&#125;poly[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> result[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,sum_an=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;poly[i].bn,&amp;poly[i].an);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> bn;</span><br><span class="line">		<span class="keyword">double</span> an;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;bn,&amp;an);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">			result[bn+poly[j].bn]+=(an*poly[j].an);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (result[i]!=<span class="number">0.0</span>) &#123;</span><br><span class="line">			sum_an++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,sum_an);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2000</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (result[i]!=<span class="number">0.0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,result[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1007 Maximum Subsequence Sum</title>
    <url>/2020/01/30/1007-Maximum-Subsequence-Sum/</url>
    <content><![CDATA[<p>Given a sequence of <em>K</em> integers { <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }. A continuous subsequence is defined to be { <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>
<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. </p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space. </p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],dp[maxn],s[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//a存放序列，dp存放以a[i]结尾的序列和，s[i]存放dp[i]的开始元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">if</span> (a[i]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">			flag=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag==<span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>,a[<span class="number">0</span>],a[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">0</span>]=a[<span class="number">0</span>];<span class="comment">//设置边界</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[i<span class="number">-1</span>]+a[i]&gt;a[i]) &#123;</span><br><span class="line">			dp[i]=dp[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			s[i]=s[i<span class="number">-1</span>];</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[i]=a[i];</span><br><span class="line">			s[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[i]&gt;dp[k]) &#123;</span><br><span class="line">			k=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,dp[k],a[s[k]],a[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1006 Sign In and Sign Out</title>
    <url>/2020/01/30/1006-Sign-In-and-Sign-Out/</url>
    <content><![CDATA[<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID_number Sign_in_time Sign_out_time</span><br></pre></td></tr></table></figure>

<p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p>
<p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">CS301111 15:30:28 17:00:10</span><br><span class="line">SC3021234 08:00:00 11:25:25</span><br><span class="line">CS301133 21:45:00 21:58:40</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SC3021234 CS301133</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> id[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> h,m,s;</span><br><span class="line">&#125;temp,ans1,ans2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">great</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (node1.h!=node2.h) &#123;</span><br><span class="line">		<span class="keyword">return</span> node1.h&gt;node2.h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (node1.m!=node2.m) &#123;</span><br><span class="line">		<span class="keyword">return</span> node1.m&gt;node2.m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> node1.s&gt;node2.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	ans1.h=<span class="number">24</span>,ans1.m=<span class="number">60</span>,ans1.s=<span class="number">60</span>;</span><br><span class="line">	ans2.h=<span class="number">0</span>,ans2.m=<span class="number">0</span>,ans2.s=<span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s%d:%d:%d"</span>,temp.id,&amp;temp.h,&amp;temp.m,&amp;temp.s);</span><br><span class="line">		<span class="keyword">if</span> (great(temp, ans1)==<span class="literal">false</span>) &#123;</span><br><span class="line">			ans1=temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d"</span>,&amp;temp.h,&amp;temp.m,&amp;temp.s);</span><br><span class="line">		<span class="keyword">if</span> (great(temp, ans2)==<span class="literal">true</span>) &#123;</span><br><span class="line">			ans2=temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s %s"</span>,ans1.id,ans2.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1005 Spell It Right</title>
    <url>/2020/01/30/1005-Spell-It-Right/</url>
    <content><![CDATA[<p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p><code>12345</code></p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p><code>one five</code></p>
<p>需要注意在获取字符串时不能使用gets。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">10</span>][<span class="number">10</span>]=&#123;<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> digit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,s);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>,Len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		sum+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,num[<span class="number">0</span>]);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (sum!=<span class="number">0</span>) &#123;</span><br><span class="line">			digit[Len++]=sum%<span class="number">10</span>;</span><br><span class="line">			sum/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=Len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s"</span>,num[digit[i]]);</span><br><span class="line">			<span class="keyword">if</span> (i!=<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>ccx</title>
    <url>/2020/01/29/ccx/</url>
    <content><![CDATA[<p>遇见即是缘分，而错过亦是注定</p>
]]></content>
      <tags>
        <tag>mine</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
</search>
