<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1142 Maximal Clique</title>
    <url>/2020/03/12/1142-Maximal-Clique/</url>
    <content><![CDATA[<p>A <strong>clique</strong> is a subset of vertices of an undirected graph such that every two distinct vertices in the clique are adjacent. A <strong>maximal clique</strong> is a clique that cannot be extended by including one more adjacent vertex. (Quoted from <a href="https://en.wikipedia.org/wiki/Clique_(graph_theory)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Clique_(graph_theory)</a>)</p>
<p>Now it is your job to judge if a given subset of vertices can form a maximal clique.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers Nv (≤200), the number of vertices in the graph, and Ne, the number of undirected edges. Then Ne lines follow, each gives a pair of vertices of an edge. The vertices are numbered from 1 to Nv.</p>
<p>After the graph, there is another positive integer M (≤ 100). Then M lines of query follow, each first gives a positive number K (≤ Nv), then followed by a sequence of K distinct vertices. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the M queries, print in a line <code>Yes</code> if the given subset of vertices can form a maximal clique; or if it is a clique but not a <strong>maximal clique</strong>, print <code>Not Maximal</code>; or if it is not a clique at all, print <code>Not a Clique</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 10</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">6 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">2 3</span><br><span class="line">8 2</span><br><span class="line">2 7</span><br><span class="line">5 3</span><br><span class="line">3 4</span><br><span class="line">6</span><br><span class="line">4 5 4 3 6</span><br><span class="line">3 2 8 7</span><br><span class="line">2 2 3</span><br><span class="line">1 1</span><br><span class="line">3 4 3 6</span><br><span class="line">3 3 2 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Not Maximal</span><br><span class="line">Not a Clique</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1143 Lowest Common Ancestor</title>
    <url>/2020/03/12/1143-Lowest-Common-Ancestor/</url>
    <content><![CDATA[<p>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</p>
<p>A binary search tree (BST) is recursively defined as a binary tree which has the following properties:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>Given any two nodes in a BST, you are supposed to find their LCA.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the BST, respectively. In the second line, N distinct integers are given as the preorder traversal sequence of the BST. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of <strong>int</strong>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given pair of U and V, print in a line <code>LCA of U and V is A.</code> if the LCA is found and <code>A</code> is the key. But if <code>A</code> is one of U and V, print <code>X is an ancestor of Y.</code> where <code>X</code> is <code>A</code> and <code>Y</code> is the other node. If U or V is not found in the BST, print in a line <code>ERROR: U is not found.</code> or <code>ERROR: V is not found.</code> or <code>ERROR: U and V are not found.</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">6 3 1 2 5 4 8 7</span><br><span class="line">2 5</span><br><span class="line">8 7</span><br><span class="line">1 9</span><br><span class="line">12 -3</span><br><span class="line">0 8</span><br><span class="line">99 99</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LCA of 2 and 5 is 3.</span><br><span class="line">8 is an ancestor of 7.</span><br><span class="line">ERROR: 9 is not found.</span><br><span class="line">ERROR: 12 and -3 are not found.</span><br><span class="line">ERROR: 0 is not found.</span><br><span class="line">ERROR: 99 and 99 are not found.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1147 Heaps</title>
    <url>/2020/03/12/1147-Heaps/</url>
    <content><![CDATA[<p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heap_(data_structure)</a>)</p>
<p>Your job is to tell if a given complete binary tree is a heap.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 100), the number of trees to be tested; and N (1 &lt; N ≤ 1,000), the number of keys in each tree, respectively. Then M lines follow, each contains N distinct integer keys (all in the range of <strong>int</strong>), which gives the level order traversal sequence of a complete binary tree.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given tree, print in a line <code>Max Heap</code> if it is a max heap, or <code>Min Heap</code> for a min heap, or <code>Not Heap</code> if it is not a heap at all. Then in the next line print the tree’s postorder traversal sequence. All the numbers are separated by a space, and there must no extra space at the beginning or the end of the line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 8</span><br><span class="line">98 72 86 60 65 12 23 50</span><br><span class="line">8 38 25 58 52 82 70 60</span><br><span class="line">10 28 15 12 34 9 8 56</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Max Heap</span><br><span class="line">50 60 65 72 12 23 86 98</span><br><span class="line">Min Heap</span><br><span class="line">60 58 52 38 82 70 25 8</span><br><span class="line">Not Heap</span><br><span class="line">56 12 34 28 9 8 15 10</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1146 Topological Order</title>
    <url>/2020/03/12/1146-Topological-Order/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>1145 Hashing - Average Search Time</title>
    <url>/2020/03/12/1145-Hashing-Average-Search-Time/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>1151 LCA in a Binary Tree</title>
    <url>/2020/03/12/1151-LCA-in-a-Binary-Tree/</url>
    <content><![CDATA[<p>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</p>
<p>Given any two nodes in a binary tree, you are supposed to find their LCA.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the binary tree, respectively. In each of the following two lines, N distinct integers are given as the inorder and preorder traversal sequences of the binary tree, respectively. It is guaranteed that the binary tree can be uniquely determined by the input sequences. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of <strong>int</strong>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given pair of U and V, print in a line <code>LCA of U and V is A.</code> if the LCA is found and <code>A</code> is the key. But if <code>A</code> is one of U and V, print <code>X is an ancestor of Y.</code> where <code>X</code> is <code>A</code> and <code>Y</code> is the other node. If U or V is not found in the binary tree, print in a line <code>ERROR: U is not found.</code> or <code>ERROR: V is not found.</code> or <code>ERROR: U and V are not found.</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">7 2 3 4 6 5 1 8</span><br><span class="line">5 3 7 2 6 4 8 1</span><br><span class="line">2 6</span><br><span class="line">8 1</span><br><span class="line">7 9</span><br><span class="line">12 -3</span><br><span class="line">0 8</span><br><span class="line">99 99</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LCA of 2 and 6 is 3.</span><br><span class="line">8 is an ancestor of 1.</span><br><span class="line">ERROR: 9 is not found.</span><br><span class="line">ERROR: 12 and -3 are not found.</span><br><span class="line">ERROR: 0 is not found.</span><br><span class="line">ERROR: 99 and 99 are not found.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">map&lt;int, int&gt;pos;</span><br><span class="line">vector&lt;int&gt;in,pre;</span><br><span class="line">void lca(int inl,int inr,int preroot,int a,int b)&#123;</span><br><span class="line">	if (inl&gt;inr) &#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	int inroot&#x3D;pos[pre[preroot]],aIn&#x3D;pos[a],bIn&#x3D;pos[b];</span><br><span class="line">	if (aIn&lt;inroot&amp;&amp;bIn&lt;inroot) &#123;</span><br><span class="line">		lca(inl, inroot-1, preroot+1, a, b);</span><br><span class="line">	&#125;else if ((aIn&lt;inroot&amp;&amp;bIn&gt;inroot)||(aIn&gt;inroot&amp;&amp;bIn&lt;inroot)) &#123;</span><br><span class="line">		printf(&quot;LCA of %d and %d is %d.\n&quot;,a,b,in[inroot]);</span><br><span class="line">	&#125;else if(aIn&gt;inroot&amp;&amp;bIn&gt;inroot)&#123;</span><br><span class="line">		lca(inroot+1, inr, preroot+1+(inroot-inl), a, b);</span><br><span class="line">	&#125;else if (aIn&#x3D;&#x3D;inroot) &#123;</span><br><span class="line">		printf(&quot;%d is an ancestor of %d.\n&quot;,a,b);</span><br><span class="line">	&#125;else if (bIn&#x3D;&#x3D;inroot) &#123;</span><br><span class="line">		printf(&quot;%d is an ancestor of %d.\n&quot;,b,a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">	int m,n,a,b;</span><br><span class="line">	scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">	in.resize(n+1),pre.resize(n+1);</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;in[i]);</span><br><span class="line">		pos[in[i]]&#x3D;i;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;1;i&lt;&#x3D;n;i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;pre[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i&#x3D;0;i&lt;m;i++) &#123;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">		if (pos[a]&#x3D;&#x3D;0&amp;&amp;pos[b]&#x3D;&#x3D;0) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d and %d are not found.\n&quot;,a,b);</span><br><span class="line">		&#125;else if (pos[a]&#x3D;&#x3D;0||pos[b]&#x3D;&#x3D;0) &#123;</span><br><span class="line">			printf(&quot;ERROR: %d is not found.\n&quot;,pos[a]&#x3D;&#x3D;0?a:b);</span><br><span class="line">		&#125;else &#123;</span><br><span class="line">			lca(1, n, 1, a, b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出中序与先序序列，找到给出的点的最近公共祖先，只需要利用给出的先序序列确定出根节点，只要明白ab同侧则继续递归找到当前的子树的下一层，当ab异侧则当前子树根节点即为所求。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2020/03/08/spring/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>hibernate的检索与实务处理</title>
    <url>/2020/03/08/hibernate%E7%9A%84%E6%A3%80%E7%B4%A2%E4%B8%8E%E5%AE%9E%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2的文件上传和下载</title>
    <url>/2020/03/08/struts2%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ognl表达式</title>
    <url>/2020/03/08/ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>1）ognl表达式：是对象导航图语言。也是一种struts2默认的表达式语言，xwork提供ognl支持。支持对象方法调用、支持类静态的方法调用和值访问、访问ognl上下文和actioncontext、支持赋值操作和表达式串联、操作集合对象。OGNL上下文概念就是一个map结构，实现了java.utils.Map的接口。</p>
<p>2）访问ognl上下文和actioncontext：</p>
<p>ognl存在一个上下文对象（map），ognl可以操作这个上下文，即可以向这个map存储和取出数据。在struts2中这个上下文对象就是actioncontext。</p>
<p>ognl与valuestack</p>
<p>3）什么是值栈（valuestack）？</p>
<p>valuestack是struts2中的一个接口，ognl操作的就是这个valuestack，真正操作的是其实现类，ognlvaluestack就是一个map。它是ognl基础。</p>
<p>valuestack：贯穿整个action的生命周期（每个action类的对象实例都拥有一个valuestack对象），相当于一个数据中转站，在其中保存当前action对象和其他相关对象。上述也就是说valuestack是随着action生命周期一致，每个action都拥有自己的valuestack。valuestack中存储的时action的相关信息与常用的web对象。</p>
<p>struts框架将valuestack对象保存在request范围中，名称是“struts.valuestack”</p>
<p>request.setAttribute(“struts.valuestack”,valuestack对象）</p>
<p>4）如何获得值栈对象？</p>
<p>1、通过request对象获取</p>
<p>ValueStack valuestack=(ValueStack) ServletActionContext.getrequest().getAttribute(</p>
<p>ServletActionContext.STRUTS_VALUESTACK_KEY);</p>
<p>2、通过actioncontext对象获取</p>
<p>ValueStack valuestack=ActionContext.getContext().getValueStack();</p>
<p>5）值栈的内部结构</p>
<p>valueStack 中包含两个部分arraylist（root） Map（context）</p>
<p>map中包含root。root中存储了action相关信息，map中存储常用的web对象（reuqest、session、application、parameters）</p>
<p>值栈在开发中的应用</p>
<p>valueStack 在开发中作用：在页面与action之间数据交换。</p>
<p>自动存储在valuestack中的对象：1）action对象会被自动压入valuestack中2）action如果实现了modeldriven接口那么modeldriveninterceptor拦截器会生效，将model对象压入valuestack中。如果是属性驱动，bean对象存在action对象中，模型驱动，bean对象直接存储在root中。</p>
<p>前提：使用模型驱动时，可以从action中获取model对象，转为在action中提供一个getmodel方法，如果在action中提供了get方法，就会在&lt;s:debug&gt;中查看到该属性</p>
<p>属性驱动</p>
<p>product.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class Product &#123;</span><br><span class="line">	private String name; &#x2F;&#x2F;商品名称</span><br><span class="line">	private double price; &#x2F;&#x2F;商品价格</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line">	public double getPrice() &#123;</span><br><span class="line">		return price;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setPrice(double price) &#123;</span><br><span class="line">		this.price &#x3D; price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ValueStack2Action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import cn.itcast.domain.Product;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class ValueStack2Action extends ActionSupport &#123;</span><br><span class="line">	private Product p3;</span><br><span class="line">	public Product getP3() &#123;</span><br><span class="line">		return p3;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setP3(Product p3) &#123;</span><br><span class="line">		this.p3 &#x3D; p3;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		return SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueStack2.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">	pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;查看valueStack信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;s:debug &#x2F;&gt;</span><br><span class="line">	商品名称：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;p3.name&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt; 商品价格：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;p3.price&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts2.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">	&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">	&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;!-- 开启访问静态方法支持 --&gt;</span><br><span class="line">	&lt;constant name&#x3D;&quot;struts.ognl.allowStaticMethodAccess&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">	&lt;package name&#x3D;&quot;struts2&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">		&lt;action name&#x3D;&quot;valueStack2&quot; class&#x3D;&quot;cn.itcast.action.ValueStack2Action&quot;&gt;</span><br><span class="line">			&lt;result&gt;&#x2F;valueStack2.jsp&lt;&#x2F;result&gt;</span><br><span class="line">		&lt;&#x2F;action&gt;</span><br><span class="line">		&lt;action name&#x3D;&quot;valueStack3&quot; class&#x3D;&quot;cn.itcast.action.ValueStack3Action&quot;&gt;</span><br><span class="line">			&lt;result&gt;&#x2F;valueStack3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">		&lt;&#x2F;action&gt;</span><br><span class="line">	&lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>模型驱动</p>
<p>ValueStack2Action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">import com.opensymphony.xwork2.ModelDriven;</span><br><span class="line">import cn.itcast.domain.Product;</span><br><span class="line">&#x2F;&#x2F;模型驱动</span><br><span class="line">public class ValueStack3Action extends ActionSupport implements</span><br><span class="line">		ModelDriven&lt;Product&gt; &#123;</span><br><span class="line">	private Product p3 &#x3D; new Product();</span><br><span class="line">	@Override</span><br><span class="line">	public Product getModel() &#123;</span><br><span class="line">		return p3;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		return SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valueStack3.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;查看valueStack信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;s:debug &#x2F;&gt;</span><br><span class="line">	商品名称：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;model.name&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt; 商品价格：</span><br><span class="line">	&lt;s:property value&#x3D;&quot;model.price&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;br&gt;</span><br><span class="line">	使用EL表达式访问值栈中的数据：&lt;&#x2F;br&gt;</span><br><span class="line">	商品名称：$&#123;model.name&#125;</span><br><span class="line">	&lt;&#x2F;br&gt;</span><br><span class="line">        商品价格：$&#123;model.price&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2标签库</title>
    <url>/2020/03/08/struts2%E6%A0%87%E7%AD%BE%E5%BA%93/</url>
    <content><![CDATA[<p>①通用标签库<br>control tags：if、elseif、else、append、generator、merge、sort、subset<br>data tags：action、bean、date、debug、i18n、include、param、property、push、text<br>property标签：用于输出指定值<br>&lt;s:property value=”#name” default=”a default value”/&gt;<br>default 可选属性，如果需要输出的属性值为null，则显示该属性指定的值<br>escape 可选属性，指定是否格式化HTML代码<br>value 可选属性，指定需要输出的属性值，如果没有指定该属性，则默认输出valuestavk栈顶的值。<br>&lt;% request.setAttribute(“name”,”李四”); %&gt;<br>&lt;s:property value=”#request.name” default=”张三”/&gt;<br>&lt;s:property value=”‘<h1>hello</h1>‘“ escape=”false”/&gt;<br>set标签：用于将某个值放入指定范围<br>&lt;s:set value=”request.username” var=”XXX” scape=”a default value”/&gt;<br>var变量的名字，name、id和var表达的含义是一样的，name，id被var替代<br>scape：指定变量被放置的范围，该属性可以接受application、session、request、page、action。如果没有设置该属性，则默认放置在值栈的context中。<br>value：赋给变量的值如果没有设置该属性，即将valuestack栈顶的值赋给变量<br>interator标签：用于对集合进行迭代，包含list、set和数组<br>&lt;s:iterator value=”{‘aa’,’bb’,’cc’}” var=”i” status=”status”&gt;<br>&lt;s:if test=”#status.getCount()==1”&gt;<br><font color="red">&lt;s:property value=”i”/&gt;</font></s:if><br>value:指定被迭代的集合，没有则使用valuestack栈顶的集合<br>var：引用变量的名称<br>status：指定迭代时的interatorstatus实例,其实例包含的方法为：int getcount()返回当前迭代了几个元素、int getindex()返回当前迭代元素的索引、boolean iseven()返回当前被迭代元素的索引是否是偶数、boolean isodd()返回当前被迭代元素的是否是奇数、boolean isfirst()返回当前被迭代元素是否是第一个、boolean islast()返回当前被迭代元素是否是最后一个。<br>url标签：用于创建url，可以通过param标签提供request参数<br>&lt;s:url action=”book” namespace=”/“ var=”myurl”&gt;<br>&lt;s:param name=”id” value=”3”&gt;</s:param><br></s:url><br>value：如果不提供就用当前action，使用value后缀必加action<br>action：用来生成url的action，没有则使用value<br>namespace：命名空间<br>var：引用变量的名称<br>②UI标签库：页面布局<br>&lt;%@ taglib uri=”/struts-tags” prefix=”s” %&gt;<br>&lt;s:form action=” “ method=”post”&gt;<br>&lt;s:textfield name=”username” lable=”用户名”/&gt;<br>&lt;s:textfield name=”password” lable=”密码”/&gt;<br>&lt;s:submit value=”提交”/&gt;<br></s:form>表格页面，添加theme=”simple”即可消除。可以方面数据回显</p>
<p>regist.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">    &lt;%@ taglib uri&#x3D;&quot;&#x2F;struts-tags&quot; prefix&#x3D;&quot;s&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;traditional regist&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;&lt;s:fielderror&#x2F;&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;regist.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">密码:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">性别:&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot;&gt;男</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;female&quot;&gt;女&lt;br&#x2F;&gt;</span><br><span class="line">籍贯:&lt;select name&#x3D;&quot;city&quot;&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;广州&quot;&gt;广州&lt;&#x2F;option&gt;</span><br><span class="line">&lt;option value&#x3D;&quot;深圳&quot;&gt;深圳&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;&lt;br&#x2F;&gt;</span><br><span class="line">爱好:&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;篮球&quot;&gt;篮球</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;足球&quot;&gt;足球</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;hobby&quot; value&#x3D;&quot;乒乓球&quot;&gt;乒乓球&lt;br&#x2F;&gt;</span><br><span class="line">介绍:&lt;textarea name&#x3D;&quot;info&quot; rows&#x3D;&quot;6&quot; cols&#x3D;&quot;30&quot;&gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;UI regist&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;&lt;s:fielderror&#x2F;&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;s:form action&#x3D;&quot;regist.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;s:textfield name&#x3D;&quot;username&quot; label&#x3D;&quot;用户名&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:password name&#x3D;&quot;password&quot; showPassword&#x3D;&quot;true&quot; label&#x3D;&quot;密码&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:radio list&#x3D;&quot;#&#123; &#39;male&#39;:&#39;男&#39;,&#39;female&#39;:&#39;女&#39;&#125;&quot; name&#x3D;&quot;sex&quot; label&#x3D;&quot;性别&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:select list&#x3D;&quot;&#123;&#39;北京&#39;,&#39;上海&#39;,&#39;广州&#39;,&#39;深圳&#39;&#125;&quot; name&#x3D;&quot;city&quot; label&#x3D;&quot;籍贯&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:checkboxlist list&#x3D;&quot;&#123;&#39;篮球&#39;,&#39;足球&#39;,&#39;乒乓球&#39;&#125;&quot; name&#x3D;&quot;hobby&quot; label&#x3D;&quot;爱好&quot;&#x2F;&gt;</span><br><span class="line">&lt;s:textarea name&#x3D;&quot;info&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;6&quot; label&#x3D;&quot;介绍&quot;&gt;&lt;&#x2F;s:textarea&gt;</span><br><span class="line">&lt;s:submit value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;s:form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>regist.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE validators PUBLIC</span><br><span class="line">  		&quot;-&#x2F;&#x2F;Apache Struts&#x2F;&#x2F;XWork Validator 1.0.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">  		&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;xwork-validator-1.0.3.dtd&quot;&gt;</span><br><span class="line">&lt;validators&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;username is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;password is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;field name&#x3D;&quot;sex&quot;&gt;</span><br><span class="line">&lt;field-validator type&#x3D;&quot;requiredstring&quot;&gt;</span><br><span class="line">&lt;message&gt;sex is not allow null&lt;&#x2F;message&gt;</span><br><span class="line">&lt;&#x2F;field-validator&gt;</span><br><span class="line">&lt;&#x2F;field&gt;</span><br><span class="line">&lt;&#x2F;validators&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">	&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">	&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.action.extension&quot; value&#x3D;&quot;action&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">&lt;constant name&#x3D;&quot;struts.devMode&quot; value&#x3D;&quot;true&quot;&gt;&lt;&#x2F;constant&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;demo1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name&#x3D;&quot;regist&quot; class&#x3D;&quot;cn.itcast.action.registaction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;regist.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>Registration.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class registaction extends ActionSupport&#123;</span><br><span class="line">	private String username;</span><br><span class="line">	private String password;</span><br><span class="line">	private String sex;</span><br><span class="line">	private String city;</span><br><span class="line">	private String[] hobby;</span><br><span class="line">	private String info;</span><br><span class="line">	public String getUsername() &#123;</span><br><span class="line">		return username;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setUsername(String username) &#123;</span><br><span class="line">		this.username &#x3D; username;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getPassword() &#123;</span><br><span class="line">		return password;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setPassword(String password) &#123;</span><br><span class="line">		this.password &#x3D; password;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getSex() &#123;</span><br><span class="line">		return sex;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setSex(String sex) &#123;</span><br><span class="line">		this.sex &#x3D; sex;</span><br><span class="line">	&#125;</span><br><span class="line">	public String[] getHobby() &#123;</span><br><span class="line">		return hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setHobby(String[] hobby) &#123;</span><br><span class="line">		this.hobby &#x3D; hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getInfo() &#123;</span><br><span class="line">		return info;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setInfo(String info) &#123;</span><br><span class="line">		this.info &#x3D; info;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getCity() &#123;</span><br><span class="line">		return city;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setCity(String city) &#123;</span><br><span class="line">		this.city &#x3D; city;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String execute() throws Exception&#123;</span><br><span class="line">		System.out.println(&quot;SUCCESS&quot;);</span><br><span class="line">		return NONE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2拦截器</title>
    <url>/2020/03/08/struts2%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<p>strutsh中的拦截器interceptor<br>1、应用<br>struts2中的拦截器信息在哪定义的？struts-default.xml文件<br>struts2中的拦截器怎样定义：<br>在struts.xml文件中按照以下语法来配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;interceptor name&#x3D;&quot;name&quot; class&#x3D;&quot;class&quot; &gt;&lt;param name&#x3D;&quot;paramname&quot;&gt;value&lt;&#x2F;param&gt;&lt;&#x2F;interceptor&gt;</span><br></pre></td></tr></table></figure>

<p>name为拦截器名称，class为其实现的类，param是为拦截器传参，分别是参数名与值。如果需要执行多个拦截动作需要配置成拦截器栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;interceptors&gt;&lt;interceptor-stack name&#x3D;stackname&quot;&gt;&lt;interceptor-ref name&#x3D;&quot;name&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;interceptor-stack&gt;&lt;&#x2F;interceptors&gt;</span><br></pre></td></tr></table></figure>

<p>其中stackname是栈的名称name为拦截器名称 interceptor-ref来指定多个拦截器<br>默认拦截器配置：&lt;default-interceptor-ref name=”拦截器的名称”/ &gt;<br>拦截器特点：查看源码大部分拦截器都extends Abstractinterceptor，这个类实现了interceptor接口，即struts2中的拦截器其实就是一个实现了interceptor接口的类。查看interceptor接口源码发现，定义了三个方法：Init、destory、intercept便是拦截器的生命周期。<br>拦截器作用：查看struts-default。xml文件中定义的defaultstack拦截器栈。它里面的每一个拦截器都有特定功能。<br>this.addactionerror()与this.addfielderror()区别前者用于校验，后者用来处理业务错误.在页面上要显示filederror使用的是&lt;s:filederror&gt;,actionerror使用的是&lt;s:actionerror&gt;<br>使用interceptor完成权限控制：自定义一个interceptor（做一个类去继承interceptor类）重定义interceptor方法要点：1）参数是actioninvocation类型，可以通过getaction()获取对象、getinvocationcontext()可以获取actioncontext对象。2）返回值：必须写成invocation.invoke代表向下执行。3）注册拦截器：在自己的struts.xml进行注册，如果在struts.xml中自定义了拦截器，那么继承失效<br>2、原理<br>struts2中的拦截器实现<br>1、struts2中的拦截器实现原理是AOP思想。AOP：面向切面（方面）编程，具体实现就是代理模式。<br>2、struts2中拦截器采用的是责任链模式。Java23设计模式中的一种，将所有操作像锁链一样串起来，在任意一个环节都可以让其继续执行，也可以断开。<br>查看struts2源码分析拦截器可知：1）：strutspreparedExecutefilter。完成两种操作①预处理操作：加载配置文件init方法②具体执行内容–拦截器dofilter方法中。2）actionproxy就是action的代理对象3）actioninvocation，这个对象是正真调用拦截器的对象。Invocation.invoke();4）采用递归调用拦截器，调用任意一个拦截器后都执行invocation.invoke,这相当于执行下一个拦截器后都执行了invokeactiononly(),这相当于执行action中的内容</p>
<p>demo3.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;&#x2F;struts-tags&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;登录&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;s:actionerror&#x2F;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;login3.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    USERNAME:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    PASSWORD:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts2.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs1_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;!-- 声明拦截器--&gt;</span><br><span class="line">    &lt;interceptors&gt;</span><br><span class="line">&lt;interceptor name&#x3D;&quot;mine&quot; class&#x3D;&quot;cn.itcast.utils.interceptor&quot;&#x2F;&gt;</span><br><span class="line">&lt;interceptor-stack name&#x3D;&quot;mystack&quot;&gt;</span><br><span class="line">&lt;interceptor-ref name&#x3D;&quot;defaultStack&quot;&#x2F;&gt;</span><br><span class="line">&lt;interceptor-ref name&#x3D;&quot;mine&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;interceptor-stack&gt;</span><br><span class="line">&lt;&#x2F;interceptors&gt;</span><br><span class="line">    &lt;!-- 用户登录操作--&gt;</span><br><span class="line">     &lt;action name&#x3D;&quot;login3&quot; class&#x3D;&quot;cn.itcast.action.login3action&quot;&gt;</span><br><span class="line">     &lt;result&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;book_*&quot; class&#x3D;&quot;cn.itcast.action.bookaction&quot; method&#x3D;&quot;&#123;1&#125;&quot;&gt;</span><br><span class="line">     &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;login3&quot;&gt;&#x2F;demo3.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;interceptor-ref name&#x3D;&quot;mystack&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>index.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;book&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_del&quot;&gt;book del&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_add&quot;&gt;book add&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_update&quot;&gt;book update&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;Test4&#x2F;book_find&quot;&gt;book find&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;成功界面&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户$&#123;user.username&#125;登录成功</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>login3action.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">import com.opensymphony.xwork2.ModelDriven;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">public class login3action extends ActionSupport implements ModelDriven&lt;User&gt;&#123;	private User user&#x3D;new User();</span><br><span class="line">	@Override</span><br><span class="line">	public User getModel() &#123;</span><br><span class="line">		&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">		return user;</span><br><span class="line">	&#125;</span><br><span class="line">	public String execute() throws Exception&#123;</span><br><span class="line">		ActionContext actionContext &#x3D; ActionContext.getContext();</span><br><span class="line">		if(&quot;Tom&quot;.equals(user.getUsername())&amp;&amp;&quot;123&quot;.equals(user.getPassword()))&#123;</span><br><span class="line">		&#x2F;&#x2F;System.out.println(user.getUsername()+&quot; &quot;+user.getPassword());</span><br><span class="line">			actionContext.getSession().put(&quot;user&quot;, user);</span><br><span class="line">			return SUCCESS;</span><br><span class="line">			&#125;else &#123;</span><br><span class="line">				this.addActionError(&quot;user or password error&quot;);</span><br><span class="line">				return INPUT;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class User &#123;</span><br><span class="line">private String username;</span><br><span class="line">private String password;</span><br><span class="line">public String getUsername() &#123;</span><br><span class="line">return username;</span><br><span class="line">&#125;</span><br><span class="line">public void setUsername(String username) &#123;</span><br><span class="line">this.username&#x3D;username;</span><br><span class="line">&#125;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">return password;</span><br><span class="line">&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">this.password&#x3D;password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2核心配置</title>
    <url>/2020/03/08/struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Struts2框架不能见到web常用对象（request、respond、session），减少耦合<br>在struts2框架中获取servlet api有三种方式<br>1）直接在action汇总使用actioncontext去获取<br>这种方式不是直接获取servlet api，通过struts2框架将相关信息包装再返回<br>是通过servlet api执行后的结果封装到map集合中返回。<br>常用方法：1、怎样获取actioncontext对象:ActionContext context=ActionContext.getContext();<br>2、获取其他的servlet api：①get(key)相当于httpservletrequest的getattrbute(string name)方法②要获取请求参数 getParameter()相当于request.getParameterMap()③getsession()方法返回一个Map集合，相当于httpsession④getapplication()方法返回一个Map集合相当于servletcontext⑤context.put(key,value)相当于request.setAttribute(key,value).Actioncontext相当于是一个map集合<br>可以直接获取servlet api<br>2）实现接口，合适注入的方式获取servlet api<br>当我们自己的action为实现servletrequestaware接口，当action被加载时，struts2框架发现这个action实现了接口，就会通过注入的方式将web对象注入 action指定的方法中，我们在action中就可以得到这个web对象。<br>3）直接使用ServletActionContext<br>其下获取servlet api的方法是静态方法，我们在使用时直接使用类名调用ServletActionContext是ActionContext子类<br>Static HttpServletRequest get Request()<br>Static HttpServletResponse getResponse()<br>Static Servletcontext getServletcontext()<br>上面三种方式，建议使用actioncontext，因为它没有与servlet api耦合</p>
<p>通过actioncontext类访问方法访问servlet api（其本质就是通过调用actioncontext方法来使用map中key的值获取value）<br>index.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;hello&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;Test2&#x2F;demo.action&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;msg&quot;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;send&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;% </span><br><span class="line">session.setAttribute(&quot;1&quot;,&quot;sessionvalue&quot;);</span><br><span class="line">application.setAttribute(&quot;2&quot;, &quot;applicationvalue&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs2_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;default-action-ref name&#x3D;&quot;index&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 继承actionsupport类完成action创建--&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;demo&quot; class&#x3D;&quot;cn.itcast.action.demoaction&quot;&gt;</span><br><span class="line">    &lt;result&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;  </span><br><span class="line">    &lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>demoaction.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">&#x2F;&#x2F;第一种方式，使用actioncontext</span><br><span class="line">public class demoaction extends ActionSupport &#123;</span><br><span class="line">	public String execute() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F;1获取actioncontext对象</span><br><span class="line">		ActionContext context&#x3D;ActionContext.getContext();</span><br><span class="line">		&#x2F;&#x2F;2获取请求参数request.getparameter(&quot;msg&quot;)</span><br><span class="line">		Map&lt;String,Object&gt; parameters&#x3D;context.getParameters();</span><br><span class="line">		System.out.println(((String[])parameters.get(&quot;msg&quot;))[0]);</span><br><span class="line">		&#x2F;&#x2F;3get相当于request.getattribute()</span><br><span class="line">		&#x2F;&#x2F;String msg&#x3D;(String)context.get(&quot;msg&quot;);&#x2F;&#x2F;相当于getattribute()</span><br><span class="line">		&#x2F;&#x2F;System.out.println(msg);</span><br><span class="line">&#x2F;&#x2F;4context.getsession()方法相当于获取一个httpsession对象，但他返回map集合</span><br><span class="line">		Map&lt;String,Object&gt; session&#x3D;context.getSession();</span><br><span class="line">		System.out.println(session.get(&quot;1&quot;));</span><br><span class="line">&#x2F;&#x2F;5使用context.getapplication相当于servletcontexxt对象中的内容，返回一个map</span><br><span class="line">		Map&lt;String,Object&gt; application&#x3D;context.getApplication();</span><br><span class="line">		System.out.println(application.get(&quot;2&quot;));</span><br><span class="line">		&#x2F;&#x2F;context的put方法</span><br><span class="line">		context.put(&quot;3&quot;, &quot;value&quot;);</span><br><span class="line">		System.out.println(context.get(&quot;3&quot;));</span><br><span class="line">		return SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;success&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">success.jsp hello struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>action请求参数处理：1）将action作为javabean处理请求参数（属性驱动）：直接在action中定义参数，属性的名称要与请求参数中的名称一致。更明确的说，应该与属性提供的get/set方法的后面的名称一致。 原理：通过struts3的拦截器完成的。主要是通过param拦截器完成。<br>问题一：struts2的action是否是多线程的？存在安全问题？<br>答：action是多线程的，解决线程安全问题的方案是，为每一个线程创建一个action实例。<br>问题二：将bean传递到service层，是否将action传递到service层？<br>答：不能，需要单独定义javabean，将action数据封装到bean。<br>2）创建单独的model对象，在action中创建model对象引用，提供get/set方法，在页面上通过ognl表达式（对象名.属性名）去封装（属性驱动）。通过param拦截器实现<br>3）通过modedriver方式（模型驱动）要求1）要求action实现一个接口modeldriven。重写getmodel()方法。2）要求在action中必须实例化一个javabean对象，在getmodel方法中将这个实例化后的对象返回。modeldriver这种方式的原理是通过modeldriven拦截器完成的。二、三对比来说，第二种可以再action定义多个对象，第三种只能定义一个。</p>
<p>result结果集类型：<br><result name="" type="">url</result>name属性对应的是action中方法执行后返回的字符串值，如果匹配会跳转指定的url，type属性定义跳转方式。chain-&gt;在action内部实现跳转，可以共享action数据、dispatcher-&gt;请求转发（默认）、redirect-&gt;重定向、redireaction-&gt;重定向到某个action，可以直接访问某个action、stream-&gt;回应是流，用于下载。<br>dispatcher与redirect用于跳转到页面，其他两者用于跳转到action</p>
<p>通过属性驱动的方法实现页面与action之间数据的交互(简单来说就是将提供的表单中的数据在一个java中包装后，在另一个java中采用调用其包装后的对象来实现调用，然后至于说ognl来封装的数据方式就是采用对象名.属性名的方式)</p>
<p>demo.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;              </span><br><span class="line">&lt;title&gt;使用ognl封装数据&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;login2.action&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">USERNAME:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.username&quot;&gt;&lt;br&gt;</span><br><span class="line">PASSWORD:&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;user.password&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;send&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">&quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;structs1_1&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;login2&quot; class&#x3D;&quot;cn.itcast.action.login2action&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br><span class="line">    &lt;&#x2F;package&gt;</span><br><span class="line">&lt;&#x2F;struts&gt;</span><br></pre></td></tr></table></figure>

<p>user.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line">public class User &#123;</span><br><span class="line">private String username;</span><br><span class="line">private String password;</span><br><span class="line">public String getUsername() &#123;</span><br><span class="line">return username;</span><br><span class="line">&#125;</span><br><span class="line">public void setUsername(String username) &#123;</span><br><span class="line">this.username&#x3D;username;&#125;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">return password;&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">this.password&#x3D;password;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>login2ation.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">&#x2F;&#x2F;创建单独的model，在页面使用ognl表达式</span><br><span class="line">public class login2action extends ActionSupport&#123;</span><br><span class="line">private User user;</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">return user;&#125;</span><br><span class="line">public void setUser(User user) &#123;</span><br><span class="line">this.user&#x3D;user;&#125;</span><br><span class="line">public String execute() throws Exception&#123;</span><br><span class="line">System.out.println(user.getUsername()+&quot; &quot;+user.getPassword());</span><br><span class="line">return SUCCESS;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>struts2框架入门</title>
    <url>/2020/03/08/struts2%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>hello.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;struts basic&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;hello.action&quot;&gt;the struts basic&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;$(pageContext.request.contextPath)&#x2F;everyone.action&quot;&gt;the struts basic&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>everyone.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">everyone.jsp hello everyone struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;ISO-8859-1&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;success&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">success.jsp hello struts2</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>struts.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line"> &quot;-&#x2F;&#x2F;Apache Software Foundation&#x2F;&#x2F;DTD Struts Configuration 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line"> &quot;http:&#x2F;&#x2F;struts.apache.org&#x2F;dtds&#x2F;struts-2.3.dtd&quot;&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;default&quot; namespace&#x3D;&quot;&#x2F;&quot; extends&#x3D;&quot;struts-default&quot;&gt;</span><br><span class="line">    &lt;action name&#x3D;&quot;hello&quot; class&#x3D;&quot;cn.itcast.action.helloaction&quot;&gt;</span><br><span class="line">    &lt;result name&#x3D;&quot;OK&quot;&gt;&#x2F;success.jsp&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;action&gt;</span><br></pre></td></tr></table></figure>

<p>cn.itcast.action</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package cn.itcast.action;</span><br><span class="line">public class helloaction &#123;</span><br><span class="line">	public String execute() &#123;</span><br><span class="line">		return &quot;OK&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>struts2的一个入门案例，在jsp中引入一个.action超链接，然后和struts.xml中的name相匹配进入java包中获取相关的返回值，最后在显示另一个jsp页面内容</p>
]]></content>
      <categories>
        <category>java高级应用</category>
      </categories>
  </entry>
  <entry>
    <title>1150 Travelling Salesman Problem</title>
    <url>/2020/02/23/1150-Travelling-Salesman-Problem/</url>
    <content><![CDATA[<p>The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?” It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. (Quoted from “<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;</a>.)</p>
<p>In this problem, you are supposed to find, from a given list of cycles, the one that is the closest to the solution of a travelling salesman problem.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers <em>N</em> (2&lt;<em>N</em>≤200), the number of cities, and <em>M</em>, the number of edges in an undirected graph. Then <em>M</em> lines follow, each describes an edge in the format <code>City1 City2 Dist</code>, where the cities are numbered from 1 to <em>N</em> and the distance <code>Dist</code> is positive and is no more than 100. The next line gives a positive integer <em>K</em> which is the number of paths, followed by <em>K</em> lines of paths, each in the format:</p>
<p><em>n</em> <em>C</em>1 <em>C</em>2 … <em>C**n</em></p>
<p>where <em>n</em> is the number of cities in the list, and <em>C**i</em>‘s are the cities on a path.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each path, print in a line <code>Path X: TotalDist (Description)</code> where <code>X</code> is the index (starting from 1) of that path, <code>TotalDist</code> its total distance (if this distance does not exist, output <code>NA</code> instead), and <code>Description</code> is one of the following:</p>
<ul>
<li><code>TS simple cycle</code> if it is a simple cycle that visits every city;</li>
<li><code>TS cycle</code> if it is a cycle that visits every city, but not a simple cycle;</li>
<li><code>Not a TS cycle</code> if it is NOT a cycle that visits every city.</li>
</ul>
<p>Finally print in a line <code>Shortest Dist(X) = TotalDist</code> where <code>X</code> is the index of the cycle that is the closest to the solution of a travelling salesman problem, and <code>TotalDist</code> is its total distance. It is guaranteed that such a solution is unique.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 10</span><br><span class="line">6 2 1</span><br><span class="line">3 4 1</span><br><span class="line">1 5 1</span><br><span class="line">2 5 1</span><br><span class="line">3 1 8</span><br><span class="line">4 1 6</span><br><span class="line">1 6 1</span><br><span class="line">6 3 1</span><br><span class="line">1 2 1</span><br><span class="line">4 5 1</span><br><span class="line">7</span><br><span class="line">7 5 1 4 3 6 2 5</span><br><span class="line">7 6 1 3 4 5 2 6</span><br><span class="line">6 5 1 4 3 6 2</span><br><span class="line">9 6 2 1 6 3 4 5 2 6</span><br><span class="line">4 1 2 5 1</span><br><span class="line">7 6 1 2 5 4 3 1</span><br><span class="line">7 6 3 2 5 4 1 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Path 1: 11 (TS simple cycle)</span><br><span class="line">Path 2: 13 (TS simple cycle)</span><br><span class="line">Path 3: 10 (Not a TS cycle)</span><br><span class="line">Path 4: 8 (TS cycle)</span><br><span class="line">Path 5: 3 (Not a TS cycle)</span><br><span class="line">Path 6: 13 (Not a TS cycle)</span><br><span class="line">Path 7: NA (Not a TS cycle)</span><br><span class="line">Shortest Dist(4) &#x3D; 8</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int e[210][210], n, m, k, ans &#x3D; 100000, ansid;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">void check(int index) &#123;</span><br><span class="line">	int sum &#x3D; 0, cnt, flag &#x3D; 1;</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;cnt);</span><br><span class="line">	set&lt;int&gt; s;</span><br><span class="line">	vector&lt;int&gt; v(cnt);</span><br><span class="line">	for (int i &#x3D; 0; i &lt; cnt; i++) &#123;</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;v[i]);</span><br><span class="line">		s.insert(v[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i &#x3D; 0; i &lt; cnt - 1; i++) &#123;</span><br><span class="line">		if(e[v[i]][v[i+1]] &#x3D;&#x3D; 0) flag &#x3D; 0;</span><br><span class="line">		sum +&#x3D; e[v[i]][v[i+1]];</span><br><span class="line">	&#125;</span><br><span class="line">	if (flag &#x3D;&#x3D; 0) &#123;</span><br><span class="line">		printf(&quot;Path %d: NA (Not a TS cycle)\n&quot;, index);</span><br><span class="line">	&#125; else if(v[0] !&#x3D; v[cnt-1] || s.size() !&#x3D; n) &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (Not a TS cycle)\n&quot;, index, sum);</span><br><span class="line">	&#125; else if(cnt !&#x3D; n + 1) &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (TS cycle)\n&quot;, index, sum);</span><br><span class="line">		if (sum &lt; ans) &#123;</span><br><span class="line">			ans &#x3D; sum;</span><br><span class="line">			ansid &#x3D; index;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		printf(&quot;Path %d: %d (TS simple cycle)\n&quot;, index, sum);</span><br><span class="line">		if (sum &lt; ans) &#123;</span><br><span class="line">			ans &#x3D; sum;</span><br><span class="line">			ansid &#x3D; index;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">	for (int i &#x3D; 0; i &lt; m; i++) &#123;</span><br><span class="line">		int t1, t2, t;</span><br><span class="line">		scanf(&quot;%d%d%d&quot;, &amp;t1, &amp;t2, &amp;t);</span><br><span class="line">		e[t1][t2] &#x3D; e[t2][t1] &#x3D; t;</span><br><span class="line">	&#125;</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;k);</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; k; i++)&#123;</span><br><span class="line">		check(i);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;Shortest Dist(%d) &#x3D; %d\n&quot;, ansid, ans);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否为旅行商问题，即能否形成一条每个点只经过一次的回路，起始点通过两次</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1149 Dangerous Goods Packaging</title>
    <url>/2020/02/23/1149-Dangerous-Goods-Packaging/</url>
    <content><![CDATA[<p>When shipping goods with containers, we have to be careful not to pack some incompatible goods into the same container, or we might get ourselves in serious trouble. For example, oxidizing agent （氧化剂） must not be packed with flammable liquid （易燃液体）, or it can cause explosion.</p>
<p>Now you are given a long list of incompatible goods, and several lists of goods to be shipped. You are supposed to tell if all the goods in a list can be packed into the same container.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers: <em>N</em> (≤104), the number of pairs of incompatible goods, and <em>M</em> (≤100), the number of lists of goods to be shipped.</p>
<p>Then two blocks follow. The first block contains N pairs of incompatible goods, each pair occupies a line; and the second one contains M lists of goods to be shipped, each list occupies a line in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K G[1] G[2] ... G[K]</span><br></pre></td></tr></table></figure>

<p>where <code>K</code> (≤1,000) is the number of goods and <code>G[i]</code>‘s are the IDs of the goods. To make it simple, each good is represented by a 5-digit ID number. All the numbers in a line are separated by spaces.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each shipping list, print in a line <code>Yes</code> if there are no incompatible goods in the list, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 3</span><br><span class="line">20001 20002</span><br><span class="line">20003 20004</span><br><span class="line">20005 20006</span><br><span class="line">20003 20001</span><br><span class="line">20005 20004</span><br><span class="line">20004 20006</span><br><span class="line">4 00001 20004 00002 20003</span><br><span class="line">5 98823 20002 20003 20006 10010</span><br><span class="line">3 12345 67890 23333</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k, t1, t2;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t1, &amp;t2);</span><br><span class="line">		m[t1].push_back(t2);</span><br><span class="line">		m[t2].push_back(t1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt, flag = <span class="number">0</span>, a[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cnt);</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(cnt)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">			a[v[i]] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m[v[i]].<span class="built_in">size</span>(); j++)</span><br><span class="line">				<span class="keyword">if</span> (a[m[v[i]][j]] == <span class="number">1</span>)<span class="comment">//对应于map的地址与映射</span></span><br><span class="line">					flag = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag ? <span class="string">"No"</span> :<span class="string">"Yes"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1148 Werewolf - Simple Version</title>
    <url>/2020/02/23/1148-Werewolf-Simple-Version/</url>
    <content><![CDATA[<p>Werewolf（狼人杀） is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game,</p>
<ul>
<li>player #1 said: “Player #2 is a werewolf.”;</li>
<li>player #2 said: “Player #3 is a human.”;</li>
<li>player #3 said: “Player #4 is a werewolf.”;</li>
<li>player #4 said: “Player #5 is a human.”; and</li>
<li>player #5 said: “Player #4 is a human.”.</li>
</ul>
<p>Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. Can you point out the werewolves?</p>
<p>Now you are asked to solve a harder version of this problem: given that there were <em>N</em> players, with 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liars. You are supposed to point out the werewolves.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (5≤<em>N</em>≤100). Then <em>N</em> lines follow and the <em>i</em>-th line gives the statement of the <em>i</em>-th player (1≤<em>i</em>≤<em>N</em>), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>If a solution exists, print in a line in ascending order the indices of the two werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the smallest solution sequence – that is, for two sequences <em>A</em>=<em>a</em>[1],…,<em>a</em>[<em>M</em>] and <em>B</em>=<em>b</em>[1],…,<em>b</em>[<em>M</em>], if there exists 0≤<em>k</em>&lt;<em>M</em> such that <em>a</em>[<em>i</em>]=<em>b</em>[<em>i</em>] (<em>i</em>≤<em>k</em>) and <em>a</em>[<em>k</em>+1]&lt;<em>b</em>[<em>k</em>+1], then <em>A</em> is said to be smaller than <em>B</em>. In case there is no solution, simply print <code>No Solution</code>.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">+3</span><br><span class="line">-4</span><br><span class="line">+5</span><br><span class="line">+4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">+6</span><br><span class="line">+3</span><br><span class="line">+1</span><br><span class="line">-5</span><br><span class="line">-2</span><br><span class="line">+4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2-the-solution-is-not-unique"><a href="#Sample-Output-2-the-solution-is-not-unique" class="headerlink" title="Sample Output 2 (the solution is not unique):"></a>Sample Output 2 (the solution is not unique):</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line">-5</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; wolf, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> error_count = <span class="number">0</span>;     </span><br><span class="line">	<span class="keyword">int</span> wolf_count = <span class="number">0</span>;     </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (wolf[<span class="built_in">abs</span>(key[i]) - <span class="number">1</span>] * key[i] &lt; <span class="number">0</span>) &#123;   </span><br><span class="line">			<span class="keyword">if</span> (wolf[i] == <span class="number">-1</span>)</span><br><span class="line">				wolf_count++;</span><br><span class="line">			error_count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (error_count == <span class="number">2</span> &amp;&amp; wolf_count == <span class="number">1</span>)   </span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; key;</span><br><span class="line">	<span class="keyword">int</span> n, t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	key.resize(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; key[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">wolf</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">			wolf[i] = wolf[j] = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span> (judge(key, wolf, n)) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; j + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题采用双层循环遍历，假设出狼人的位置，然后根据撒谎人数为2，狼人撒谎一人来解决问题</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1155 Heap Paths</title>
    <url>/2020/02/22/1155-Heap-Paths/</url>
    <content><![CDATA[<p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heap_(data_structure)</a>)</p>
<p>One thing for sure is that all the keys along any path from the root to a leaf in a max/min heap must be in non-increasing/non-decreasing order.</p>
<p>Your job is to check every path in a given complete binary tree, in order to tell if it is a heap or not.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (1&lt;<em>N</em>≤1,000), the number of keys in the tree. Then the next line contains <em>N</em> distinct integer keys (all in the range of <strong>int</strong>), which gives the level order traversal sequence of a complete binary tree.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each given tree, first print all the paths from the root to the leaves. Each path occupies a line, with all the numbers separated by a space, and no extra space at the beginning or the end of the line. The paths must be printed in the following order: for each node in the tree, all the paths in its right subtree must be printed before those in its left subtree.</p>
<p>Finally print in a line <code>Max Heap</code> if it is a max heap, or <code>Min Heap</code> for a min heap, or <code>Not Heap</code> if it is not a heap at all. </p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">98 72 86 60 65 12 23 50</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">98 86 23</span><br><span class="line">98 86 12</span><br><span class="line">98 72 65</span><br><span class="line">98 72 60 50</span><br><span class="line">Max Heap</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">8 38 25 58 52 82 70 60</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 25 70</span><br><span class="line">8 25 82</span><br><span class="line">8 38 52</span><br><span class="line">8 38 58 60</span><br><span class="line">Min Heap</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">10 28 15 12 34 9 8 56</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 15 8</span><br><span class="line">10 15 9</span><br><span class="line">10 28 34</span><br><span class="line">10 28 12 56</span><br><span class="line">Not Heap</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">int a[1001], n, isMin &#x3D; 1, isMax &#x3D; 1;</span><br><span class="line">void Dfs(int index) &#123;</span><br><span class="line">	if (index * 2 &gt; n &amp;&amp; index * 2 + 1 &gt; n) &#123;</span><br><span class="line">		if (index &lt;&#x3D; n) &#123;</span><br><span class="line">			for (int i &#x3D; 0; i &lt; v.size(); i++)</span><br><span class="line">				printf(&quot;%d%s&quot;, v[i], i !&#x3D; v.size() - 1 ? &quot; &quot; : &quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		v.push_back(a[index * 2 + 1]);</span><br><span class="line">		Dfs(index * 2 + 1);</span><br><span class="line">		v.pop_back();</span><br><span class="line">		v.push_back(a[index * 2]);</span><br><span class="line">		Dfs(index * 2);</span><br><span class="line">		v.pop_back();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">	v.push_back(a[1]);</span><br><span class="line">	Dfs(1);</span><br><span class="line">	for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;&#x2F;&#x2F;与子节点比较</span><br><span class="line">		if (a[i&#x2F;2] &gt; a[i]) isMin &#x3D; 0;</span><br><span class="line">		if (a[i&#x2F;2] &lt; a[i]) isMax &#x3D; 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if (isMin &#x3D;&#x3D; 1)&#123;</span><br><span class="line">		printf(&quot;Min Heap&quot;);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		printf(&quot;%s&quot;, isMax &#x3D;&#x3D; 1 ? &quot;Max Heap&quot; : &quot;Not Heap&quot;); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出一个层次遍历的一组数据，判断其深度优先遍历后的排序情况</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1154 Vertex Coloring</title>
    <url>/2020/02/22/1154-Vertex-Coloring/</url>
    <content><![CDATA[<p>A <strong>proper vertex coloring</strong> is a labeling of the graph’s vertices with colors such that no two vertices sharing the same edge have the same color. A coloring using at most <em>k</em> colors is called a (proper) <strong><em>k\</em>-coloring</strong>.</p>
<p>Now you are supposed to tell if a given coloring is a proper <em>k</em>-coloring.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives two positive integers <em>N</em> and <em>M</em> (both no more than 104), being the total numbers of vertices and edges, respectively. Then <em>M</em> lines follow, each describes an edge by giving the indices (from 0 to <em>N</em>−1) of the two ends of the edge.</p>
<p>After the graph, a positive integer <em>K</em> (≤ 100) is given, which is the number of colorings you are supposed to check. Then <em>K</em>lines follow, each contains <em>N</em> colors which are represented by non-negative integers in the range of <strong>int</strong>. The <em>i</em>-th color is the color of the <em>i</em>-th vertex.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each coloring, print in a line <code>k-coloring</code> if it is a proper <code>k</code>-coloring for some positive <code>k</code>, or <code>No</code> if not.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 11</span><br><span class="line">8 7</span><br><span class="line">6 8</span><br><span class="line">4 5</span><br><span class="line">8 4</span><br><span class="line">8 1</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">9 8</span><br><span class="line">9 1</span><br><span class="line">1 0</span><br><span class="line">2 4</span><br><span class="line">4</span><br><span class="line">0 1 0 1 4 1 0 1 3 0</span><br><span class="line">0 1 0 1 4 1 0 1 0 0</span><br><span class="line">8 1 0 1 4 1 0 5 3 0</span><br><span class="line">1 2 3 4 5 6 7 8 8 9</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4-coloring</span><br><span class="line">No</span><br><span class="line">6-coloring</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t1, t2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;node&gt; <span class="title">v</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;v[i].t1, &amp;v[i].t2);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">10009</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">			se.insert(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[v[i].t1] == a[v[i].t2]) &#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d-coloring\n"</span>, se.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给出n条边及其对应的颜色，判断是否存在相同颜色的边，若有则输出no，没有则要表明存在几种颜色。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1045 Favorite Color Stripe</title>
    <url>/2020/02/15/1045-Favorite-Color-Stripe/</url>
    <content><![CDATA[<p>Eva is trying to make her own color stripe out of a given one. She would like to keep only her favorite colors in her favorite order by cutting off those unwanted pieces and sewing the remaining parts together to form her favorite color stripe.</p>
<p>It is said that a normal human eye can distinguish about less than 200 different colors, so Eva’s favorite colors are limited. However the original stripe could be very long, and Eva would like to have the remaining favorite stripe with the maximum length. So she needs your help to find her the best result.</p>
<p>Note that the solution might not be unique, but you only have to tell her the maximum length. For example, given a stripe of colors {2 2 4 1 5 5 6 3 1 1 5 6}. If Eva’s favorite colors are given in her favorite order as {2 3 1 5 6}, then she has 4 possible best solutions {2 2 1 1 1 5 6}, {2 2 1 5 5 5 6}, {2 2 1 5 5 6 6}, and {2 2 3 1 1 5 6}.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤200) which is the total number of colors involved (and hence the colors are numbered from 1 to <em>N</em>). Then the next line starts with a positive integer <em>M</em>(≤200) followed by <em>M</em> Eva’s favorite color numbers given in her favorite order. Finally the third line starts with a positive integer <em>L</em> (≤104) which is the length of the given stripe, followed by <em>L</em> colors on the stripe. All the numbers in a line a separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, simply print in a line the maximum length of Eva’s favorite stripe.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">5 2 3 1 5 6</span><br><span class="line">12 2 2 4 1 5 5 6 3 1 1 5 6</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<p>最长不下降子序列（LIS）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> HashTable[maxc];</span><br><span class="line"><span class="keyword">int</span> A[maxn], dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, x;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">fill</span>(HashTable, HashTable+maxc, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">		HashTable[x] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> L, num = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">		<span class="keyword">if</span>(HashTable[x] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			A[num++] = HashTable[x];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">		dp[i] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(A[j] &lt;= A[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">				dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最长公共子序列（LCS）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxc], B[maxn], dp[maxc][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> L;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;B[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		dp[i][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//边界</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= L; j++) &#123;</span><br><span class="line">		dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= L; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> MAX = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(A[i] == B[j]) &#123;</span><br><span class="line">				dp[i][j] = MAX + <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				dp[i][j] = MAX;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][L]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1044 Shopping in Mars</title>
    <url>/2020/02/13/1044-Shopping-in-Mars/</url>
    <content><![CDATA[<p>Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M$15. We may have 3 options:</p>
<ol>
<li>Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15).</li>
<li>Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15).</li>
<li>Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15).</li>
</ol>
<p>Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.</p>
<p>If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 numbers: <em>N</em> (≤105), the total number of diamonds on the chain, and <em>M</em> (≤108), the amount that the customer has to pay. Then the next line contains <em>N</em> positive numbers <em>D</em>1⋯<em>D**N</em> (<em>D*<em>i</em>≤103 for all *i</em>=1,⋯,<em>N</em>) which are the values of the diamonds. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print <code>i-j</code> in a line for each pair of <code>i</code> ≤ <code>j</code> such that <em>D</em><code>i</code> + … + <em>D</em><code>j</code> = <em>M</em>. Note that if there are more than one solution, all the solutions must be printed in increasing order of <code>i</code>.</p>
<p>If there is no solution, output <code>i-j</code> for pairs of <code>i</code> ≤ <code>j</code> such that <em>D</em><code>i</code> + … + <em>D</em><code>j</code> &gt;<em>M</em> with (<em>D</em><code>i</code> + … + <em>D</em><code>j</code> −<em>M</em>) minimized. Again all the solutions must be printed in increasing order of <code>i</code>.</p>
<p>It is guaranteed that the total value of diamonds is sufficient to pay the given amount.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16 15</span><br><span class="line">3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-5</span><br><span class="line">4-6</span><br><span class="line">7-8</span><br><span class="line">11-11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 13</span><br><span class="line">2 4 5 7 9</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2-4</span><br><span class="line">4-5</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="keyword">int</span> n, S, nearS = <span class="number">100000010</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> left = L, right = R, mid;</span><br><span class="line">	<span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">		mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(sum[mid] &gt; x) &#123;</span><br><span class="line">			right = mid;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			left = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;S);</span><br><span class="line">	sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sum[i]);</span><br><span class="line">		sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = upper_bound(i, n + <span class="number">1</span>, sum[i - <span class="number">1</span>] + S);</span><br><span class="line">		<span class="keyword">if</span>(sum[j - <span class="number">1</span>] - sum[i - <span class="number">1</span>] == S) &#123;</span><br><span class="line">			nearS = S;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(j &lt;= n &amp;&amp; sum[j] - sum[i - <span class="number">1</span>] &lt; nearS) &#123;</span><br><span class="line">			nearS = sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = upper_bound(i, n + <span class="number">1</span>, sum[i - <span class="number">1</span>] + nearS);</span><br><span class="line">		<span class="keyword">if</span>(sum[j - <span class="number">1</span>] - sum[i - <span class="number">1</span>] == nearS) &#123;</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">"%d-%d\n"</span>, i, j - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1043 Is It a Binary Search Tree</title>
    <url>/2020/02/13/1043-Is-It-a-Binary-Search-Tree/</url>
    <content><![CDATA[<p>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>If we swap the left and right subtrees of every node, then the resulting tree is called the <strong>Mirror Image</strong> of a BST.</p>
<p>Now given a sequence of integer keys, you are supposed to tell if it is the preorder traversal sequence of a BST or the mirror image of a BST.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤1000). Then <em>N</em> integer keys are given in the next line. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line <code>YES</code> if the sequence is the preorder traversal sequence of a BST or the mirror image of a BST, or <code>NO</code> if not. Then if the answer is <code>YES</code>, print in the next line the postorder traversal sequence of that tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 5 7 10 8 11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">5 7 6 8 11 10 8</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">11 8 10 7 5 6 8</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 8 5 10 9 11</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node&#123;</span><br><span class="line">    int data;</span><br><span class="line">    node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line">void insert(node* &amp;root,int data)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        root&#x3D;new node;</span><br><span class="line">        root-&gt;data&#x3D;data;</span><br><span class="line">        root-&gt;left&#x3D;root-&gt;right&#x3D;NULL;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (data&lt;root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;left, data);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        insert(root-&gt;right, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void preorder(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preorder(root-&gt;left, vi);</span><br><span class="line">    preorder(root-&gt;right, vi);</span><br><span class="line">&#125;</span><br><span class="line">void preordermin(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preordermin(root-&gt;right, vi);</span><br><span class="line">    preordermin(root-&gt;left, vi);</span><br><span class="line">&#125;</span><br><span class="line">void postorder(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(root-&gt;left, vi);</span><br><span class="line">    postorder(root-&gt;right, vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">void postordermin(node* root,vector&lt;int&gt;&amp;vi)&#123;</span><br><span class="line">    if (root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    postordermin(root-&gt;right, vi);</span><br><span class="line">    postordermin(root-&gt;left, vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt;origin,pre,prem,post,postm;</span><br><span class="line">int main( )&#123;</span><br><span class="line">    int n,data;</span><br><span class="line">    node* root&#x3D;NULL;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for (int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;data);</span><br><span class="line">        origin.push_back(data);</span><br><span class="line">        insert(root, data);</span><br><span class="line">    &#125;</span><br><span class="line">    preorder(root, pre);</span><br><span class="line">    preordermin(root, prem);</span><br><span class="line">    postorder(root, post);</span><br><span class="line">    postordermin(root, postm);</span><br><span class="line">    if (origin&#x3D;&#x3D;pre) &#123;</span><br><span class="line">        printf(&quot;YES\n&quot;);</span><br><span class="line">        for (int i&#x3D;0; i&lt;post.size(); i++) &#123;</span><br><span class="line">            printf(&quot;%d&quot;,post[i]);</span><br><span class="line">            if (i&lt;post.size()-1) &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if (origin&#x3D;&#x3D;prem)&#123;</span><br><span class="line">        printf(&quot;YES\n&quot;);</span><br><span class="line">        for (int i&#x3D;0; i&lt;postm.size(); i++) &#123;</span><br><span class="line">            printf(&quot;%d&quot;,postm[i]);</span><br><span class="line">            if (i&lt;postm.size()-1) &#123;</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;NO\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题需要理解题意，判断是否为（镜像树）先序序列，是则输出后序序列。此题可借助递归来遍历树即可。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>1034 Head of a Gang</title>
    <url>/2020/02/11/1034-Head-of-a-Gang/</url>
    <content><![CDATA[<p>One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between <em>A</em> and <em>B</em>, we say that <em>A</em> and <em>B</em> is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A “Gang” is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threshold <em>K</em>. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two positive numbers <em>N</em> and <em>K</em> (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then <em>N</em> lines follow, each in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name1 Name2 Time</span><br></pre></td></tr></table></figure>

<p>where <code>Name1</code> and <code>Name2</code> are the names of people at the two ends of the call, and <code>Time</code> is the length of the call. A name is a string of three capital letters chosen from <code>A</code>-<code>Z</code>. A time length is a positive integer which is no more than 1000 minutes.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 59</span><br><span class="line">AAA BBB 10</span><br><span class="line">BBB AAA 20</span><br><span class="line">AAA CCC 40</span><br><span class="line">DDD EEE 5</span><br><span class="line">EEE DDD 70</span><br><span class="line">FFF GGG 30</span><br><span class="line">GGG HHH 20</span><br><span class="line">HHH FFF 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">AAA 3</span><br><span class="line">GGG 3</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 70</span><br><span class="line">AAA BBB 10</span><br><span class="line">BBB AAA 20</span><br><span class="line">AAA CCC 40</span><br><span class="line">DDD EEE 5</span><br><span class="line">EEE DDD 70</span><br><span class="line">FFF GGG 30</span><br><span class="line">GGG HHH 20</span><br><span class="line">HHH FFF 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; intToString;<span class="comment">//存放编号-&gt;姓名</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; stringToInt;<span class="comment">//存放姓名-&gt;编号</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; Gang;<span class="comment">//存放head的姓名（inttostring(head))-&gt;numMember</span></span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn] = &#123;<span class="number">0</span>&#125;, weight[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, k, numPerson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> nowVisit, <span class="keyword">int</span>&amp; head, <span class="keyword">int</span>&amp; numMember, <span class="keyword">int</span>&amp; totalValue)</span> </span>&#123;</span><br><span class="line">	numMember++;</span><br><span class="line">	vis[nowVisit] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(weight[nowVisit] &gt; weight[head]) &#123;</span><br><span class="line">		head = nowVisit;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPerson; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(G[nowVisit][i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			totalValue += G[nowVisit][i];</span><br><span class="line">			G[nowVisit][i] = G[i][nowVisit] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(vis[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">				DFS(i, head, numMember, totalValue);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPerson; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> head = i, numMember = <span class="number">0</span>, totalValue = <span class="number">0</span>;</span><br><span class="line">			DFS(i, head, numMember, totalValue);</span><br><span class="line">			<span class="keyword">if</span>(numMember &gt; <span class="number">2</span> &amp;&amp; totalValue &gt; k) &#123;</span><br><span class="line">				Gang[intToString[head]] = numMember;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(stringToInt.<span class="built_in">find</span>(str) != stringToInt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		<span class="keyword">return</span> stringToInt[str];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		stringToInt[str] = numPerson;</span><br><span class="line">		intToString[numPerson] = str;</span><br><span class="line">		<span class="keyword">return</span> numPerson++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	<span class="built_in">string</span> str1, str2;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; w;</span><br><span class="line">		<span class="keyword">int</span> id1 = change(str1);</span><br><span class="line">		<span class="keyword">int</span> id2 = change(str2);</span><br><span class="line">		weight[id1] += w;</span><br><span class="line">		weight[id2] += w;</span><br><span class="line">		G[id1][id2] += w;</span><br><span class="line">		G[id2][id1] += w;</span><br><span class="line">	&#125;</span><br><span class="line">	DFSTrave();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Gang.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span>(it = Gang.<span class="built_in">begin</span>(); it != Gang.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断每一个连通块的节点的权重与边权，采用DFS对所有块遍历即可，将满足条件的head放入Gang中并输出对应的numMember。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1033 To Fill or Not to Fill</title>
    <url>/2020/02/11/1033-To-Fill-or-Not-to-Fill/</url>
    <content><![CDATA[<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: <em>C<strong>m</strong>a**x</em> (≤ 100), the maximum capacity of the tank; <em>D</em> (≤30000), the distance between Hangzhou and the destination city; <em>D<strong>a</strong>v**g</em> (≤20), the average distance per unit gas that the car can run; and <em>N</em> (≤ 500), the total number of gas stations. Then <em>N</em> lines follow, each contains a pair of non-negative numbers: <em>P**i</em>, the unit gas price, and <em>D**i</em> (≤<em>D</em>), the distance between this station and Hangzhou, for <em>i</em>=1,⋯,<em>N</em>. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print <code>The maximum travel distance = X</code> where <code>X</code> is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 1300 12 8</span><br><span class="line">6.00 1250</span><br><span class="line">7.00 600</span><br><span class="line">7.00 150</span><br><span class="line">7.10 0</span><br><span class="line">7.20 200</span><br><span class="line">7.50 400</span><br><span class="line">7.30 1000</span><br><span class="line">6.85 300</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">749.17</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 1300 12 2</span><br><span class="line">7.10 0</span><br><span class="line">7.00 600</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The maximum travel distance &#x3D; 1200.00</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">station</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> price, dis;</span><br><span class="line">&#125;st[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(station a, station b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b. dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> Cmax, D, Davg;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%d"</span>, &amp;Cmax, &amp;D, &amp;Davg, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;st[i].price, &amp;st[i].dis);</span><br><span class="line">    &#125;</span><br><span class="line">    st[n].price = <span class="number">0</span>;</span><br><span class="line">    st[n].dis = D;</span><br><span class="line">    sort(st, st + n, cmp);</span><br><span class="line">    <span class="keyword">if</span>(st[<span class="number">0</span>].dis != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = 0.00\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>, nowTank = <span class="number">0</span>, MAX = Cmax * Davg;</span><br><span class="line">        <span class="keyword">while</span>(now &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">double</span> priceMin = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= n &amp;&amp; st[i].dis - st[now].dis &lt;= MAX; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(st[i].price &lt; priceMin) &#123;</span><br><span class="line">                    priceMin = st[i].price;</span><br><span class="line">                    k = i;</span><br><span class="line">                    <span class="keyword">if</span>(priceMin &lt; st[now].price) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">double</span> need = (st[k].dis - st[now].dis) / Davg;</span><br><span class="line">            <span class="keyword">if</span>(priceMin &lt; st[now].price) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nowTank &lt; need) &#123;</span><br><span class="line">                    ans += (need - nowTank) * st[now].price;</span><br><span class="line">                    nowTank = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nowTank -= need;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += (Cmax - nowTank) * st[now].price;</span><br><span class="line">                nowTank = Cmax - need;</span><br><span class="line">            &#125;</span><br><span class="line">            now = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now == n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2f\n"</span>, st[now].dis + MAX);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题是典型的贪心算法，需要考虑在当前加油站需要加多少油可以到达最近的价格低于当前的加油站，以及考虑加满油后汽车所能行驶的最大距离。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1030 Travel Plan</title>
    <url>/2020/02/10/1030-Travel-Plan/</url>
    <content><![CDATA[<p>A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination. If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers <em>N</em>, <em>M</em>, <em>S</em>, and <em>D</em>, where <em>N</em> (≤500) is the number of cities (and hence the cities are numbered from 0 to <em>N</em>−1); <em>M</em> is the number of highways; <em>S</em> and <em>D</em>are the starting and the destination cities, respectively. Then <em>M</em> lines follow, each provides the information of a highway, in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">City1 City2 Distance Cost</span><br></pre></td></tr></table></figure>

<p>where the numbers are all integers no more than 500, and are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5 0 3</span><br><span class="line">0 1 1 20</span><br><span class="line">1 3 2 30</span><br><span class="line">0 3 4 10</span><br><span class="line">0 2 2 20</span><br><span class="line">2 3 1 20</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 2 3 3 40</span><br></pre></td></tr></table></figure>

<h4 id="1-Dijkstra算法"><a href="#1-Dijkstra算法" class="headerlink" title="(1) Dijkstra算法"></a>(1) Dijkstra算法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], c[MAXV], pre[MAXV];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="built_in">fill</span>(c, c + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pre[i] = i;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	c[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					c[v] = c[u] + cost[u][v];</span><br><span class="line">					pre[v] = u;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					<span class="keyword">if</span>(c[u] + cost[u][v] &lt; c[v]) &#123;</span><br><span class="line">						c[v] = c[u] + cost[u][v];</span><br><span class="line">						pre[v] = u;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == st) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, v);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DFS(pre[v]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G[u][v], &amp;cost[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">		cost[v][u] = cost[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(st);</span><br><span class="line">	DFS(ed);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[ed], c[ed]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Dijkstra-DFS"><a href="#2-Dijkstra-DFS" class="headerlink" title="(2) Dijkstra+DFS"></a>(2) Dijkstra+DFS</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], minCost = INF;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath, path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		pre[i].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					pre[v].<span class="built_in">clear</span>();</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == st) &#123;</span><br><span class="line">		tempPath.push_back(v);</span><br><span class="line">		<span class="keyword">int</span> tempCost = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = tempPath.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> id = tempPath[i], idNext = tempPath[i - <span class="number">1</span>];</span><br><span class="line">			tempCost += cost[id][idNext];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tempCost &lt; minCost) &#123;</span><br><span class="line">			minCost = tempCost;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125;</span><br><span class="line">		tempPath.pop_back();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.push_back(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		DFS(pre[v][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G[u][v], &amp;cost[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">		cost[v][u] = cost[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(st);</span><br><span class="line">	DFS(ed);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[ed], minCost);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种解法，总的来说前者较为简单只需要在选择路径最短的同时考虑耗时的问题，而后者在使用dijkstra算法来获取最短路径，再使用dfs来比较出耗费最小的一条。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1026 Table Tennis</title>
    <url>/2020/02/09/1026-Table-Tennis/</url>
    <content><![CDATA[<p>A table tennis club has N tables available to the public. The tables are numbered from 1 to N. For any pair of players, if there are some tables open when they arrive, they will be assigned to the available table with the smallest number. If all the tables are occupied, they will have to wait in a queue. It is assumed that every pair of players can play for at most 2 hours.</p>
<p>Your job is to count for everyone in queue their waiting time, and for each table the number of players it has served for the day.</p>
<p>One thing that makes this procedure a bit complicated is that the club reserves some tables for their VIP members. When a VIP table is open, the first VIP pair in the queue will have the priviledge to take it. However, if there is no VIP in the queue, the next pair of players can take it. On the other hand, if when it is the turn of a VIP pair, yet no VIP table is available, they can be assigned as any ordinary players.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <code>N</code> (≤10000) - the total number of pairs of players. Then <code>N</code> lines follow, each contains 2 times and a VIP tag: <code>HH:MM:SS</code> - the arriving time, <code>P</code> - the playing time in minutes of a pair of players, and <code>tag</code> - which is 1 if they hold a VIP card, or 0 if not. It is guaranteed that the arriving time is between 08:00:00 and 21:00:00 while the club is open. It is assumed that no two customers arrives at the same time. Following the players’ info, there are 2 positive integers: <code>K</code> (≤100) - the number of tables, and <code>M</code> (&lt; K) - the number of VIP tables. The last line contains <code>M</code> table numbers.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the arriving time, serving time and the waiting time for each pair of players in the format shown by the sample. Then print in a line the number of players served by each table. Notice that the output must be listed in chronological order of the serving time. The waiting time must be rounded up to an integer minute(s). If one cannot get a table before the closing time, their information must NOT be printed.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">20:52:00 10 0</span><br><span class="line">08:00:00 20 0</span><br><span class="line">08:02:00 30 0</span><br><span class="line">20:51:00 10 0</span><br><span class="line">08:10:00 5 0</span><br><span class="line">08:12:00 10 1</span><br><span class="line">20:50:00 10 0</span><br><span class="line">08:01:30 15 1</span><br><span class="line">20:53:00 10 1</span><br><span class="line">3 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08:00:00 08:00:00 0</span><br><span class="line">08:01:30 08:01:30 0</span><br><span class="line">08:02:00 08:02:00 0</span><br><span class="line">08:12:00 08:16:30 5</span><br><span class="line">08:10:00 08:20:00 10</span><br><span class="line">20:50:00 20:50:00 0</span><br><span class="line">20:51:00 20:51:00 0</span><br><span class="line">20:52:00 20:52:00 0</span><br><span class="line">3 3 2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> arriveTime, startTime, trainTime;</span><br><span class="line">	<span class="keyword">bool</span> isVIP;</span><br><span class="line">&#125; newPlayer;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Table</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> endTime, numServe;</span><br><span class="line">	<span class="keyword">bool</span> isVIP;</span><br><span class="line">&#125; table[K];</span><br><span class="line"><span class="built_in">vector</span>&lt;Player&gt; player;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertTime</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h * <span class="number">3600</span> + m * <span class="number">60</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpArriveTime</span><span class="params">(Player a, Player b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.arriveTime &lt; b.arriveTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpStartTime</span><span class="params">(Player a, Player b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.startTime &lt; b.startTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextVIPPlayer</span><span class="params">(<span class="keyword">int</span> VIPi)</span> </span>&#123;</span><br><span class="line">	VIPi++;</span><br><span class="line">	<span class="keyword">while</span>(VIPi &lt; player.<span class="built_in">size</span>() &amp;&amp; player[VIPi].isVIP == <span class="number">0</span>) &#123;</span><br><span class="line">		VIPi++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> VIPi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allotTable</span><span class="params">(<span class="keyword">int</span> pID, <span class="keyword">int</span> tID)</span> </span>&#123;<span class="comment">//将tID桌分配给pID球员</span></span><br><span class="line">	<span class="keyword">if</span>(player[pID].arriveTime &lt;= table[tID].endTime) &#123;</span><br><span class="line">		player[pID].startTime = table[tID].endTime;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		player[pID].startTime = player[pID].arriveTime;</span><br><span class="line">	&#125;</span><br><span class="line">	table[tID].endTime = player[pID].startTime + player[pID].trainTime;</span><br><span class="line">	table[tID].numServe++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k, m, VIPtable;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> stTime = convertTime(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> edTime = convertTime(<span class="number">21</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> h, m, s, trainTime, isVIP;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d %d"</span>, &amp;h, &amp;m, &amp;s, &amp;trainTime, &amp;isVIP);</span><br><span class="line">		newPlayer.arriveTime = convertTime(h, m, s);</span><br><span class="line">		newPlayer.startTime = edTime;</span><br><span class="line">		<span class="keyword">if</span>(newPlayer.arriveTime &gt;= edTime) <span class="keyword">continue</span>;</span><br><span class="line">		newPlayer.trainTime = trainTime &lt;= <span class="number">120</span> ? trainTime * <span class="number">60</span> : <span class="number">7200</span>;</span><br><span class="line">		newPlayer.isVIP = isVIP;</span><br><span class="line">		player.push_back(newPlayer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">		table[i].endTime = stTime;</span><br><span class="line">		table[i].numServe = table[i].isVIP = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;VIPtable);</span><br><span class="line">		table[VIPtable].isVIP = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(player.<span class="built_in">begin</span>(), player.<span class="built_in">end</span>(), cmpArriveTime);</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, VIPi = <span class="number">-1</span>;</span><br><span class="line">	VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">	<span class="keyword">while</span>(i &lt; player.<span class="built_in">size</span>()) &#123;<span class="comment">//分四种情况，球员是(否)为vip与球桌是(否)为vip</span></span><br><span class="line">		<span class="keyword">int</span> idx = <span class="number">-1</span>, minEndTime = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(table[j].endTime &lt; minEndTime) &#123;</span><br><span class="line">				minEndTime = table[j].endTime;</span><br><span class="line">				idx = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(table[idx].endTime &gt;= edTime) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(player[i].isVIP == <span class="number">1</span> &amp;&amp; i &lt; VIPi) &#123;</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(table[idx].isVIP == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(player[i].isVIP == <span class="number">1</span>) &#123;</span><br><span class="line">				allotTable(i, idx);</span><br><span class="line">				<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">				i++;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(VIPi &lt; player.<span class="built_in">size</span>() &amp;&amp; player[VIPi].arriveTime &lt;= table[idx].endTime) &#123;</span><br><span class="line">					allotTable(VIPi, idx);</span><br><span class="line">					VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					allotTable(i, idx);</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(player[i].isVIP == <span class="number">0</span>) &#123;</span><br><span class="line">				allotTable(i, idx);</span><br><span class="line">				i++;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> VIPidx = <span class="number">-1</span>, minVIPEndTime = INF;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(table[j].isVIP == <span class="number">1</span> &amp;&amp; table[j].endTime &lt; minVIPEndTime) &#123;</span><br><span class="line">						minVIPEndTime = table[j].endTime;</span><br><span class="line">						VIPidx = j;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(VIPidx != <span class="number">-1</span> &amp;&amp; player[i].arriveTime &gt;= table[VIPidx].endTime) &#123;</span><br><span class="line">					allotTable(i, VIPidx);</span><br><span class="line">					<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">					i++;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					allotTable(i, idx);</span><br><span class="line">					<span class="keyword">if</span>(VIPi == i) VIPi = nextVIPPlayer(VIPi);</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(player.<span class="built_in">begin</span>(), player.<span class="built_in">end</span>(), cmpStartTime);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; player.<span class="built_in">size</span>() &amp;&amp; player[i].startTime &lt; edTime; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> t1 = player[i].arriveTime;</span><br><span class="line">		<span class="keyword">int</span> t2 = player[i].startTime;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>, t1 / <span class="number">3600</span>, t1 % <span class="number">3600</span> / <span class="number">60</span>, t1 % <span class="number">60</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>, t2 / <span class="number">3600</span>, t2 % <span class="number">3600</span> / <span class="number">60</span>, t2 % <span class="number">60</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>, round((t2 - t1) / <span class="number">60.0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, table[i].numServe);</span><br><span class="line">		<span class="keyword">if</span>(i &lt; k) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1023 Have Fun with Numbers</title>
    <url>/2020/02/09/1023-Have-Fun-with-Numbers/</url>
    <content><![CDATA[<p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!</p>
<p>Now you are suppose to check if there are more numbers with this property. That is, double a given number with <em>k</em> digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input contains one test case. Each case contains one positive integer with no more than 20 digits.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567899</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">2469135798</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">21</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	bign() &#123;</span><br><span class="line">		<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">		len = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span> </span>&#123;<span class="comment">//转化bign型</span></span><br><span class="line">	bign a;</span><br><span class="line">	a.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		a.d[i] = str[a.len - i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bign <span class="title">multi</span><span class="params">(bign a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//乘法</span></span><br><span class="line">	bign c;</span><br><span class="line">	<span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = a.d[i] * b + carry;</span><br><span class="line">		c.d[c.len++] = temp % <span class="number">10</span>;</span><br><span class="line">		carry = temp / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(carry != <span class="number">0</span>) &#123;</span><br><span class="line">		c.d[c.len++] = carry % <span class="number">10</span>;</span><br><span class="line">		carry /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.len != b.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">		count[a.d[i]]++;</span><br><span class="line">		count[b.d[i]]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(count[i] != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, a.d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">21</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">	bign a = change(str);</span><br><span class="line">	bign mul = multi(a, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(Judge(a, mul) == <span class="literal">true</span>) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">	<span class="built_in">print</span>(mul);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1022 Digital Library</title>
    <url>/2020/02/05/1022-Digital-Library/</url>
    <content><![CDATA[<p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤104) which is the total number of books. Then <em>N</em> blocks follow, each contains the information of a book in 6 lines:</p>
<ul>
<li>Line #1: the 7-digit ID number;</li>
<li>Line #2: the book title – a string of no more than 80 characters;</li>
<li>Line #3: the author – a string of no more than 80 characters;</li>
<li>Line #4: the key words – each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;</li>
<li>Line #5: the publisher – a string of no more than 80 characters;</li>
<li>Line #6: the published year – a 4-digit number which is in the range [1000, 3000].</li>
</ul>
<p>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p>
<p>After the book information, there is a line containing a positive integer <em>M</em> (≤1000) which is the number of user’s search queries. Then <em>M</em> lines follow, each in one of the formats shown below:</p>
<ul>
<li>1: a book title</li>
<li>2: name of an author</li>
<li>3: a key word</li>
<li>4: name of a publisher</li>
<li>5: a 4-digit number representing the year</li>
</ul>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print <code>Not Found</code> instead.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1111111</span><br><span class="line">The Testing Book</span><br><span class="line">Yue Chen</span><br><span class="line">test code debug sort keywords</span><br><span class="line">ZUCS Print</span><br><span class="line">2011</span><br><span class="line">3333333</span><br><span class="line">Another Testing Book</span><br><span class="line">Yue Chen</span><br><span class="line">test code sort keywords</span><br><span class="line">ZUCS Print2</span><br><span class="line">2012</span><br><span class="line">2222222</span><br><span class="line">The Testing Book</span><br><span class="line">CYLL</span><br><span class="line">keywords debug book</span><br><span class="line">ZUCS Print2</span><br><span class="line">2011</span><br><span class="line">6</span><br><span class="line">1: The Testing Book</span><br><span class="line">2: Yue Chen</span><br><span class="line">3: keywords</span><br><span class="line">4: ZUCS Print</span><br><span class="line">5: 2011</span><br><span class="line">3: blablabla</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: The Testing Book</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">2: Yue Chen</span><br><span class="line">1111111</span><br><span class="line">3333333</span><br><span class="line">3: keywords</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">3333333</span><br><span class="line">4: ZUCS Print</span><br><span class="line">1111111</span><br><span class="line">5: 2011</span><br><span class="line">1111111</span><br><span class="line">2222222</span><br><span class="line">3: blablabla</span><br><span class="line">Not Found</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; mpTitle, mpAuthor, mpKey, mpPub, mpYear;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; mp, <span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mp.<span class="built_in">find</span>(str) == mp.<span class="built_in">end</span>()) <span class="built_in">printf</span>(<span class="string">"Not Found\n"</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = mp[str].<span class="built_in">begin</span>(); it != mp[str].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%07d\n"</span>, *it);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, id, type;</span><br><span class="line">	<span class="built_in">string</span> title, author, key, pub, year;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">		<span class="keyword">char</span> c = getchar();</span><br><span class="line">		getline(<span class="built_in">cin</span>, title);</span><br><span class="line">		mpTitle[title].insert(id);</span><br><span class="line">		getline(<span class="built_in">cin</span>, author);</span><br><span class="line">		mpAuthor[author].insert(id);</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; key) &#123;</span><br><span class="line">			mpKey[key].insert(id);</span><br><span class="line">			c = getchar();</span><br><span class="line">			<span class="keyword">if</span>(c == <span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		getline(<span class="built_in">cin</span>, pub);</span><br><span class="line">		mpPub[pub].insert(id);</span><br><span class="line">		getline(<span class="built_in">cin</span>, year);</span><br><span class="line">		mpYear[year].insert(id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">string</span> temp;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d: "</span>, &amp;type);</span><br><span class="line">		getline(<span class="built_in">cin</span>, temp);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; type &lt;&lt; <span class="string">": "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span>(type == <span class="number">1</span>) query(mpTitle, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>) query(mpAuthor, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) query(mpKey, temp);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">4</span>) query(mpPub, temp);</span><br><span class="line">		<span class="keyword">else</span> query(mpYear, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题还是采用map与set嵌套使用的方式来录入一定的数据，然后通过要查询的类型数据来输出相应的id</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1021 Deepest Root</title>
    <url>/2020/02/04/1021-Deepest-Root/</url>
    <content><![CDATA[<p>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called <strong>the deepest root</strong>.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤104) which is the number of nodes, and hence the nodes are numbered from 1 to <em>N</em>. Then <em>N</em>−1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print <code>Error: K components</code> where <code>K</code> is the number of connected components in the graph.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: 2 components</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp, Ans;</span><br><span class="line"><span class="keyword">bool</span> isRoot[N];</span><br><span class="line"><span class="keyword">int</span> father[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//找x根节点</span></span><br><span class="line">	<span class="keyword">int</span> a = x;</span><br><span class="line">	<span class="keyword">while</span>(x != father[x]) &#123;</span><br><span class="line">		x = father[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//合并a,b</span></span><br><span class="line">	<span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">	<span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">	<span class="keyword">if</span>(faA != faB) &#123;</span><br><span class="line">		father[faA] = faB;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	    father[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calBlock</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//计算连通块</span></span><br><span class="line">	<span class="keyword">int</span> Block = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		isRoot[findFather(i)] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		Block += isRoot[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxH = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> Height, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Height &gt; maxH) &#123;</span><br><span class="line">		temp.<span class="built_in">clear</span>();</span><br><span class="line">		temp.push_back(u);</span><br><span class="line">		maxH = Height;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(Height == maxH) &#123;</span><br><span class="line">		temp.push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(G[u][i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">		DFS(G[u][i], Height + <span class="number">1</span>, u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	init(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">		G[a].push_back(b);</span><br><span class="line">		G[b].push_back(a);</span><br><span class="line">		Union(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> Block = calBlock(n);</span><br><span class="line">	<span class="keyword">if</span>(Block != <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Error: %d components\n"</span>, Block);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		DFS(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">		Ans = temp;</span><br><span class="line">		DFS(Ans[<span class="number">0</span>], <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			Ans.push_back(temp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(Ans.<span class="built_in">begin</span>(), Ans.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(Ans[i] != Ans[i - <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否形成树，并且求最大树高的根节点。采用并查集的方法，将节点连接通过连通块个数来判断，然后DFS遍历出最深的根节点。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1020 Tree Traversals</title>
    <url>/2020/02/04/1020-Tree-Traversals/</url>
    <content><![CDATA[<p>Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">2 3 1 5 7 6 4</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 6 3 5 7 2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> pre[maxn],in[maxn],post[maxn],n;</span><br><span class="line"><span class="function">node *<span class="title">creat</span><span class="params">(<span class="keyword">int</span> postl,<span class="keyword">int</span> postr,<span class="keyword">int</span> inl,<span class="keyword">int</span> inr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (postl&gt;postr) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node * root=<span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data=post[postr];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (k=inl; k&lt;=inr; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in[k]==post[postr]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numleft=k-inl;</span><br><span class="line">    root-&gt;lchild=creat(postl, postl+numleft<span class="number">-1</span>, inl, k<span class="number">-1</span>);</span><br><span class="line">    root-&gt;rchild=creat(postl+numleft, postr<span class="number">-1</span>, k+<span class="number">1</span>, inr);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt;q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node* now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,now-&gt;data);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span> (num&lt;n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;lchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">                q.push(now-&gt;lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now-&gt;rchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">                q.push(now-&gt;rchild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    node *root=creat(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    BFS(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要抓住后序序列的最后元素（根节点）与中序序列对应的元素即为中序序列的根节点，随后使用递归来遍历出左右子树的值，题意要求输出层次则使用DFS。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>二叉树</category>
      </categories>
  </entry>
  <entry>
    <title>1018 Public Bike Management</title>
    <url>/2020/02/03/1018-Public-Bike-Management/</url>
    <content><![CDATA[<p>There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bike at any station and return it to any other stations in the city.</p>
<p>The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations. A station is said to be in <strong>perfect</strong> condition if it is exactly half-full. If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station to perfect. And more, all the stations on the way will be adjusted as well.</p>
<p>When a problem station is reported, PBMC will always choose the shortest path to reach that station. If there are more than one shortest path, the one that requires the least number of bikes sent from PBMC will be chosen.</p>
<p><img src="https://images.ptausercontent.com/213" alt="img"></p>
<p>The above figure illustrates an example. The stations are represented by vertices and the roads correspond to the edges. The number on an edge is the time taken to reach one end station from another. The number written inside a vertex <em>S</em> is the current number of bikes stored at <em>S</em>. Given that the maximum capacity of each station is 10. To solve the problem at <em>S</em>3, we have 2 different shortest paths:</p>
<ol>
<li>PBMC -&gt; <em>S</em>1 -&gt; <em>S</em>3. In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from <em>S</em>1 and then take 5 bikes to <em>S</em>3, so that both stations will be in perfect conditions.</li>
<li>PBMC -&gt; <em>S</em>2 -&gt; <em>S</em>3. This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.</li>
</ol>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 4 numbers: <em>C<strong>m</strong>a**x</em> (≤100), always an even number, is the maximum capacity of each station; <em>N</em> (≤500), the total number of stations; <em>S**p</em>, the index of the problem station (the stations are numbered from 1 to <em>N</em>, and PBMC is represented by the vertex 0); and <em>M</em>, the number of roads. The second line contains <em>N</em> non-negative numbers <em>C**i</em> (<em>i</em>=1,⋯,<em>N</em>) where each <em>C**i</em> is the current number of bikes at <em>S*<em>i</em>respectively. Then *M</em> lines follow, each contains 3 numbers: <em>S**i</em>, <em>S**j</em>, and <em>T<strong>i</strong>j</em> which describe the time <em>T<strong>i</strong>j</em> taken to move betwen stations <em>S**i</em> and <em>S**j</em>. All the numbers in a line are separated by a space.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in one line. First output the number of bikes that PBMC must send. Then after one space, output the path in the format: 0−&gt;<em>S</em>1−&gt;⋯−&gt;<em>S**p</em>. Finally after another space, output the number of bikes that we must take back to PBMC after the condition of <em>S**p</em> is adjusted to perfect.</p>
<p>Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC. The judge’s data guarantee that such a path is unique.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 3 3 5</span><br><span class="line">6 7 0</span><br><span class="line">0 1 1</span><br><span class="line">0 2 1</span><br><span class="line">0 3 3</span><br><span class="line">1 3 1</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 0-&gt;2-&gt;3 0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Cmax, Sp, numPath = <span class="number">0</span>, G[MAXV][MAXV], weight[MAXV];</span><br><span class="line"><span class="keyword">int</span> d[MAXV], minNeed = INF, minRemain = INF;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXV] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[MAXV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath, path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d, d + MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		pre[i].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">				u = j;</span><br><span class="line">				MIN = d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= n; v++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">				<span class="keyword">if</span>(d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">					d[v] = d[u] + G[u][v];</span><br><span class="line">					pre[v].<span class="built_in">clear</span>();</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">					pre[v].push_back(u);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(v == <span class="number">0</span>) &#123;</span><br><span class="line">		tempPath.push_back(v);</span><br><span class="line">		<span class="keyword">int</span> need = <span class="number">0</span>, remain = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = tempPath.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> id = tempPath[i];</span><br><span class="line">			<span class="keyword">if</span>(weight[id] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				remain += weight[id];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(remain &gt; <span class="built_in">abs</span>(weight[id])) &#123;</span><br><span class="line">					remain -= <span class="built_in">abs</span>(weight[id]);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					need += <span class="built_in">abs</span>(weight[id]) - remain;</span><br><span class="line">					remain = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(need &lt; minNeed) &#123;</span><br><span class="line">			minNeed = need;</span><br><span class="line">			minRemain = remain;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(need == minNeed &amp;&amp; remain &lt; minRemain) &#123;</span><br><span class="line">			minRemain = remain;</span><br><span class="line">			path = tempPath;</span><br><span class="line">		&#125;</span><br><span class="line">		tempPath.pop_back();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.push_back(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		DFS(pre[v][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;Cmax, &amp;n, &amp;Sp, &amp; m);</span><br><span class="line">	<span class="keyword">int</span> u, v;</span><br><span class="line">	<span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXV * MAXV, INF);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</span><br><span class="line">		weight[i] -= Cmax / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[u][v]);</span><br><span class="line">		G[v][u] = G[u][v];</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra(<span class="number">0</span>);</span><br><span class="line">	DFS(Sp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, minNeed);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, path[i]);</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" %d"</span>, minRemain);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题使用dijksta+DFS的方法来解决自行车管理，由于需要考虑到完美状态的问题，在录入数据时便将数据折半然后求最大容量与之差，得‘’-‘’则表示需要补给车辆反之需要撤走车辆。使用dijksta来解决最短路径，DFS来解决最小的need或最小的remain</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1017 Queueing at Bank</title>
    <url>/2020/02/03/1017-Queueing-at-Bank/</url>
    <content><![CDATA[<p>Suppose a bank has <em>K</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.</p>
<p>Now given the arriving time <em>T</em> and the processing time <em>P</em> of each customer, you are supposed to tell the average waiting time of all the customers.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 numbers: <em>N</em> (≤104) - the total number of customers, and <em>K</em> (≤100) - the number of windows. Then <em>N</em> lines follow, each contains 2 times: <code>HH:MM:SS</code> - the arriving time, and <em>P</em> - the processing time in minutes of a customer. Here <code>HH</code> is in the range [00, 23], <code>MM</code> and <code>SS</code> are both in [00, 59]. It is assumed that no two customers arrives at the same time.</p>
<p>Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 3</span><br><span class="line">07:55:00 16</span><br><span class="line">17:00:01 2</span><br><span class="line">07:59:59 15</span><br><span class="line">08:01:00 60</span><br><span class="line">08:00:00 30</span><br><span class="line">08:00:02 2</span><br><span class="line">08:03:00 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8.2</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> k=<span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">10000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">customer</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> cometime,needtime;</span><br><span class="line">&#125;newcustomer;</span><br><span class="line"><span class="built_in">vector</span>&lt;customer&gt;custom;<span class="comment">//使用队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">changetime</span><span class="params">(<span class="keyword">int</span> h,<span class="keyword">int</span> m,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h*<span class="number">3600</span>+m*<span class="number">60</span>+s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(customer a,customer b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.cometime&lt;b.cometime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> endtime[k];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c,w,totaltime=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> stime=changetime(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> etime=changetime(<span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c,&amp;w);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w;i++) &#123;</span><br><span class="line">		endtime[i]=stime;<span class="comment">//初始化结束时间</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> h,m,s,needtime;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d"</span>,&amp;h,&amp;m,&amp;s,&amp;needtime);</span><br><span class="line">		<span class="keyword">int</span> cometime=changetime(h, m, s);</span><br><span class="line">		<span class="keyword">if</span> (cometime&gt;etime) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		newcustomer.cometime=cometime;</span><br><span class="line">		newcustomer.needtime=needtime&lt;=<span class="number">60</span>?needtime*<span class="number">60</span>:<span class="number">3600</span>;</span><br><span class="line">		custom.push_back(newcustomer);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(custom.<span class="built_in">begin</span>(), custom.<span class="built_in">end</span>(), cmp);<span class="comment">//借助队列调用sort函数排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;custom.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> idx=<span class="number">-1</span>,minetime=INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w;j++) &#123;<span class="comment">//选择最早结束服务的窗口</span></span><br><span class="line">			<span class="keyword">if</span> (endtime[j]&lt;minetime) &#123;</span><br><span class="line">				minetime=endtime[j];</span><br><span class="line">				idx=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (endtime[idx]&lt;=custom[i].cometime) &#123;</span><br><span class="line">			endtime[idx]=custom[i].cometime+custom[i].needtime;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			totaltime+=(endtime[idx]-custom[i].cometime);</span><br><span class="line">			endtime[idx]+=custom[i].needtime;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (custom.<span class="built_in">size</span>()==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.1f"</span>,totaltime/<span class="number">60.0</span>/custom.<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1016 Phone Bills</title>
    <url>/2020/02/02/1016-Phone-Bills/</url>
    <content><![CDATA[<p>A long-distance telephone company charges its customers by the following rules:</p>
<p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p>
<p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p>
<p>The next line contains a positive number <em>N</em> (≤1000), followed by <em>N</em> lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (<code>mm:dd:hh:mm</code>), and the word <code>on-line</code> or <code>off-line</code>.</p>
<p>For each test case, all dates will be within a single month. Each <code>on-line</code> record is paired with the chronologically next record for the same customer provided it is an <code>off-line</code> record. Any <code>on-line</code> records that are not paired with an <code>off-line</code> record are ignored, as are <code>off-line</code> records not paired with an <code>on-line</code> record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you must print a phone bill for each customer.</p>
<p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (<code>dd:hh:mm</code>), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 10</span><br><span class="line">10</span><br><span class="line">CYLL 01:01:06:01 on-line</span><br><span class="line">CYLL 01:28:16:05 off-line</span><br><span class="line">CYJJ 01:01:07:00 off-line</span><br><span class="line">CYLL 01:01:08:03 off-line</span><br><span class="line">CYJJ 01:01:05:59 on-line</span><br><span class="line">aaa 01:01:01:03 on-line</span><br><span class="line">aaa 01:02:00:01 on-line</span><br><span class="line">CYLL 01:28:15:41 on-line</span><br><span class="line">aaa 01:05:02:24 on-line</span><br><span class="line">aaa 01:04:23:59 off-line</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CYJJ 01</span><br><span class="line">01:05:59 01:07:00 61 $12.10</span><br><span class="line">Total amount: $12.10</span><br><span class="line">CYLL 01</span><br><span class="line">01:06:01 01:08:03 122 $24.40</span><br><span class="line">28:15:41 28:16:05 24 $3.85</span><br><span class="line">Total amount: $28.25</span><br><span class="line">aaa 01</span><br><span class="line">02:00:01 04:23:59 4318 $638.80</span><br><span class="line">Total amount: $638.80</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> space[<span class="number">25</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">record</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line">	<span class="keyword">int</span> month, dd, hh, mm;</span><br><span class="line">	<span class="keyword">bool</span> status;</span><br><span class="line">&#125; rec[maxn], temp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(record a,record b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="built_in">strcmp</span>(a.name, b.name);</span><br><span class="line">	<span class="keyword">if</span> (s!=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> s&lt;<span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.month!=b.month) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.month&lt;b.month;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.dd!=b.dd) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.dd&lt;b.dd;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.hh!=b.hh) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.hh&lt;b.hh;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a.mm&lt;b.mm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getmoney</span><span class="params">(<span class="keyword">int</span> on,<span class="keyword">int</span> off,<span class="keyword">int</span>&amp; time,<span class="keyword">int</span>&amp; money)</span></span>&#123;</span><br><span class="line">	temp=rec[on];</span><br><span class="line">	<span class="keyword">while</span> (temp.dd&lt;rec[off].dd||temp.hh&lt;rec[off].hh||temp.mm&lt;rec[off].mm) &#123;</span><br><span class="line">		time++;</span><br><span class="line">		money+=space[temp.hh];</span><br><span class="line">		temp.mm++;</span><br><span class="line">		<span class="keyword">if</span> (temp.mm&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">			temp.mm=<span class="number">0</span>;</span><br><span class="line">			temp.hh++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (temp.hh&gt;=<span class="number">24</span>) &#123;</span><br><span class="line">			temp.hh=<span class="number">0</span>;</span><br><span class="line">			temp.dd++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;space[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,rec[i].name);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d:%d"</span>,&amp;rec[i].month,&amp;rec[i].dd,&amp;rec[i].hh,&amp;rec[i].mm);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">line</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="built_in">line</span>, <span class="string">"on-line"</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">			rec[i].status=<span class="literal">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			rec[i].status=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(rec,rec+n,cmp);</span><br><span class="line">	<span class="keyword">int</span> on=<span class="number">0</span>,off,next;</span><br><span class="line">	<span class="keyword">while</span> (on&lt;n) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">print</span>=<span class="number">0</span>;</span><br><span class="line">		next=on;</span><br><span class="line">		<span class="keyword">while</span> (next&lt;n&amp;&amp;<span class="built_in">strcmp</span>(rec[next].name, rec[on].name)==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">print</span>==<span class="number">0</span>&amp;&amp;rec[next].status==<span class="literal">true</span>) &#123;</span><br><span class="line">				<span class="built_in">print</span>=<span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">print</span>==<span class="number">1</span>&amp;&amp;rec[next].status==<span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="built_in">print</span>=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			next++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">print</span>&lt;<span class="number">2</span>) &#123;</span><br><span class="line">			on=next;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> allmoney=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s %02d\n"</span>,rec[on].name,rec[on].month);</span><br><span class="line">		<span class="keyword">while</span> (on&lt;next) &#123;</span><br><span class="line">			<span class="keyword">while</span> (on&lt;next<span class="number">-1</span>&amp;&amp;!(rec[on].status==<span class="literal">true</span>&amp;&amp;rec[on+<span class="number">1</span>].status==<span class="literal">false</span>)) &#123;</span><br><span class="line">				on++;</span><br><span class="line">			&#125;</span><br><span class="line">			off=on+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (off==next) &#123;</span><br><span class="line">				on=next;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,rec[on].dd,rec[on].hh,rec[on].mm);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,rec[off].dd,rec[off].hh,rec[off].mm);</span><br><span class="line">			<span class="keyword">int</span> time=<span class="number">0</span>,money=<span class="number">0</span>;</span><br><span class="line">			getmoney(on, off, time, money);</span><br><span class="line">			allmoney+=money;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d $%.2f\n"</span>,time,money/<span class="number">100.0</span>);</span><br><span class="line">			on=off+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Total amount: $%.2f\n"</span>,allmoney/<span class="number">100.0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本题需要考虑每个用户的多个开始结束时间，要注意对用户信息进行排序这样可以便于找到on,off</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1014 Waiting in Line</title>
    <url>/2020/02/01/1014-Waiting-in-Line/</url>
    <content><![CDATA[<p>Suppose a bank has <em>N</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p>
<ul>
<li>The space inside the yellow line in front of each window is enough to contain a line with <em>M</em> customers. Hence when all the <em>N</em> lines are full, all the customers after (and including) the (<em>N**M</em>+1)st one will have to wait in a line behind the yellow line.</li>
<li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.</li>
<li><em>C<strong>u</strong>s<strong>t</strong>o<strong>m</strong>e<strong>r</strong>i</em> will take <em>T**i</em> minutes to have his/her transaction processed.</li>
<li>The first <em>N</em> customers are assumed to be served at 8:00am.</li>
</ul>
<p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p>
<p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, <em>c*</em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>1is served at <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 while <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>2 is served at <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>2. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>3 will wait in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 and <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>4will wait in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>2. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r*5 will wait behind the yellow line.</p>
<p>At 08:01, <em>c*</em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>1 is done and <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>5 enters the line in front of <em>w</em></em>i<strong>n</strong>d<strong>o</strong>w<em>1 since that line seems shorter now. <em>C</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>2 will leave at 08:02, <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>4 at 08:06, <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r<em>3 at 08:07, and finally <em>c</em></em>u<strong>s</strong>t<strong>o</strong>m<strong>e</strong>r*5 at 08:10.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: <em>N</em> (≤20, number of windows), <em>M</em> (≤10, the maximum capacity of each line inside the yellow line), <em>K</em> (≤1000, number of customers), and <em>Q</em> (≤1000, number of customer queries).</p>
<p>The next line contains <em>K</em> positive integers, which are the processing time of the <em>K</em> customers.</p>
<p>The last line contains <em>Q</em> positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to <em>K</em>.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>Q</em> customers, print in one line the time at which his/her transaction is finished, in the format <code>HH:MM</code> where <code>HH</code> is in [08, 17] and <code>MM</code> is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output <code>Sorry</code> instead.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 2 7 5</span><br><span class="line">1 2 6 4 3 534 2</span><br><span class="line">3 4 5 6 7</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">08:07</span><br><span class="line">08:06</span><br><span class="line">08:10</span><br><span class="line">17:00</span><br><span class="line">Sorry</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNode = <span class="number">1111</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, query, q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convertToMinute</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h * <span class="number">60</span> + m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Window</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> endTime, popTime;<span class="comment">//当前队伍的最后服务时间，队首客户的服务结束时间</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">&#125; window[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxNode], needTime[maxNode];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;k, &amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;needTime[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        window[i].popTime = window[i].endTime = convertToMinute(<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(n * m, k); i++) &#123;</span><br><span class="line">        window[inIndex % n].q.push(inIndex);</span><br><span class="line">        window[inIndex % n].endTime += needTime[inIndex];</span><br><span class="line">        <span class="keyword">if</span>(inIndex &lt; n) window[inIndex].popTime = needTime[inIndex];</span><br><span class="line">        ans[inIndex] = window[inIndex % n].endTime;</span><br><span class="line">        inIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; inIndex &lt; k; inIndex++) &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">-1</span>, minPopTime = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(window[i].popTime &lt; minPopTime) &#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                minPopTime = window[i].popTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Window&amp; W = window[idx];</span><br><span class="line">        W.q.pop();</span><br><span class="line">        W.q.push(inIndex);</span><br><span class="line">        W.endTime += needTime[inIndex];</span><br><span class="line">        W.popTime += needTime[W.q.front()];</span><br><span class="line">        ans[inIndex] = W.endTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; query; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">if</span>(ans[q - <span class="number">1</span>] - needTime[q - <span class="number">1</span>] &gt;= convertToMinute(<span class="number">17</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Sorry\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>, ans[q - <span class="number">1</span>] / <span class="number">60</span>, ans[q - <span class="number">1</span>] % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1013 Battle Over Cities</title>
    <url>/2020/02/01/1013-Battle-Over-Cities/</url>
    <content><![CDATA[<p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p>
<p>For example, if we have 3 cities and 2 highways connecting <em>c*</em>i<strong>t</strong>y<em>1-</em>c<strong>i</strong>t<strong>y*2 and *c</strong>i<strong>t</strong>y<em>1-</em>c<strong>i</strong>t<strong>y*3. Then if *c</strong>i<strong>t</strong>y<em>1 is occupied by the enemy, we must have 1 highway repaired, that is the highway <em>c</em></em>i<strong>t</strong>y<em>2-</em>c<strong>i</strong>t*<em>y</em>3.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 3 numbers <em>N</em> (&lt;1000), <em>M</em> and <em>K</em>, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then <em>M</em>lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to <em>N</em>. Finally there is a line containing <em>K</em> numbers, which represent the cities we concern.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>K</em> cities, output in a line the number of highways need to be repaired if that city is lost.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[N];<span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];<span class="comment">//确定是否被访问</span></span><br><span class="line"><span class="keyword">int</span> currentpoint;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (v==currentpoint) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vis[v]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (vis[G[v][i]]==<span class="literal">false</span>) &#123;</span><br><span class="line">			dfs(G[v][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">		G[a].push_back(b);</span><br><span class="line">		G[b].push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;currentpoint);</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));<span class="comment">//初始化数组</span></span><br><span class="line">		<span class="keyword">int</span> block=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i!=currentpoint&amp;&amp;vis[i]==<span class="literal">false</span>) &#123;</span><br><span class="line">				dfs(i);</span><br><span class="line">				block++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,block<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将删除节点后的每个独立的线路分块，只需要统计这些块的个数即可得到所需要添加的路线数</p>
]]></content>
      <categories>
        <category>pat甲级</category>
        <category>图</category>
      </categories>
  </entry>
  <entry>
    <title>1012 The Best Rank</title>
    <url>/2020/02/01/1012-The-Best-Rank/</url>
    <content><![CDATA[<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p>
<p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StudentID  C  M  E  A</span><br><span class="line">310101     98 85 88 90</span><br><span class="line">310102     70 95 88 84</span><br><span class="line">310103     82 87 94 88</span><br><span class="line">310104     91 91 91 91</span><br></pre></td></tr></table></figure>

<p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p>
<p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p>
<p>If a student is not on the grading list, simply output <code>N/A</code>.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">310101 98 85 88</span><br><span class="line">310102 70 95 88</span><br><span class="line">310103 82 87 94</span><br><span class="line">310104 91 91 91</span><br><span class="line">310105 85 90 90</span><br><span class="line">310101</span><br><span class="line">310102</span><br><span class="line">310103</span><br><span class="line">310104</span><br><span class="line">310105</span><br><span class="line">999999</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 C</span><br><span class="line">1 M</span><br><span class="line">1 E</span><br><span class="line">1 A</span><br><span class="line">3 A</span><br><span class="line">N&#x2F;A</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">int</span> grade[<span class="number">4</span>];</span><br><span class="line">&#125;stu[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">char</span> course[<span class="number">4</span>] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Rank[<span class="number">1000000</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> px;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.grade[px] &gt; b.grade[px];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;stu[i].id, &amp;stu[i].grade[<span class="number">1</span>], &amp;stu[i].grade[<span class="number">2</span>], &amp;stu[i].grade[<span class="number">3</span>]);</span><br><span class="line">		stu[i].grade[<span class="number">0</span>] = (stu[i].grade[<span class="number">1</span>] + stu[i].grade[<span class="number">2</span>] + stu[i].grade[<span class="number">3</span>]) / <span class="number">3</span>+<span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(px = <span class="number">0</span>; px &lt; <span class="number">4</span>; px++)&#123;</span><br><span class="line">		sort(stu, stu + n, cmp);</span><br><span class="line">		Rank[stu[<span class="number">0</span>].id][px] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(stu[i].grade[px] == stu[i - <span class="number">1</span>].grade[px])&#123;</span><br><span class="line">				Rank[stu[i].id][px] = Rank[stu[i - <span class="number">1</span>].id][px];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				Rank[stu[i].id][px] = i + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> findid;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;findid);</span><br><span class="line">		<span class="keyword">if</span>(Rank[findid][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"N/A\n"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(Rank[findid][j] &lt; Rank[findid][k])&#123;</span><br><span class="line">					k = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>, Rank[findid][k], course[k]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此题需要注意的是当考生的得分相同时需要将排名置为相同并且将后面的排名设置正确，当一个考生含有多个相同最优排名时要注意按照ACME的顺序输出，此项操作在开始时的赋值中确定。</p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1010 Radix</title>
    <url>/2020/01/31/1010-Radix/</url>
    <content><![CDATA[<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p>
<p>Now for any pair of positive integers <em>N</em>1 and <em>N</em>2, your task is to find the radix of one number while that of the other is given.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N1 N2 tag radix</span><br></pre></td></tr></table></figure>

<p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p>
<h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 110 1 10</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 ab 1 2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Impossible</span><br></pre></td></tr></table></figure>

<p>本题主要的思路是采用二分查找将已经确定的数值化成十进制以此为媒介来逐一排除需求的数，当实际解题时要注意确定进制的上下界。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL <span class="built_in">map</span>[<span class="number">255</span>];</span><br><span class="line">LL inf=(<span class="number">1L</span>L&lt;&lt;<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c=<span class="string">'0'</span>;c&lt;=<span class="string">'9'</span>;c++) &#123;</span><br><span class="line">		<span class="built_in">map</span>[c]=c-<span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c=<span class="string">'a'</span>;c&lt;=<span class="string">'z'</span>;c++) &#123;</span><br><span class="line">		<span class="built_in">map</span>[c]=c-<span class="string">'a'</span>+<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">change10</span><span class="params">(<span class="keyword">char</span> a[],LL radix,LL t)</span></span>&#123;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		ans=ans*radix+<span class="built_in">map</span>[a[i]];</span><br><span class="line">		<span class="keyword">if</span>(ans&lt;<span class="number">0</span>||ans&gt;t)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> n2[],LL radix,LL t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(n2);</span><br><span class="line">	LL num=change10(n2, radix, t);</span><br><span class="line">	<span class="keyword">if</span> (num&lt;<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t&gt;num) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (t==num) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binarysearch</span><span class="params">(<span class="keyword">char</span> n2[],LL left,LL right,LL t)</span></span>&#123;</span><br><span class="line">	LL mid;</span><br><span class="line">	<span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">		mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> flag=cmp(n2, mid, t);</span><br><span class="line">		<span class="keyword">if</span> (flag==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">			left=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			right=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmost</span><span class="params">(<span class="keyword">char</span> n2[])</span></span>&#123;<span class="comment">//求最大的数位</span></span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">-1</span>,len=<span class="built_in">strlen</span>(n2);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[n2[i]]&gt;ans) &#123;</span><br><span class="line">			ans=<span class="built_in">map</span>[n2[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> n1[<span class="number">20</span>],n2[<span class="number">20</span>],temp[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tag,radix;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%s%d%d"</span>,n1,n2,&amp;tag,&amp;radix);</span><br><span class="line">	<span class="keyword">if</span> (tag==<span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(temp, n1);</span><br><span class="line">		<span class="built_in">strcpy</span>(n1, n2);</span><br><span class="line">		<span class="built_in">strcpy</span>(n2, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	LL t=change10(n1, radix, inf);</span><br><span class="line">	LL low=findmost(n2);</span><br><span class="line">	LL high=<span class="built_in">max</span>(low,t)+<span class="number">1</span>;</span><br><span class="line">	LL ans=binarysearch(n2, low, high, t);</span><br><span class="line">	<span class="keyword">if</span> (ans==<span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1009 Product of Polynomials</title>
    <url>/2020/01/31/1009-Product-of-Polynomials/</url>
    <content><![CDATA[<p>This time, you are supposed to find <em>A</em>×<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p>
<p><em>K</em> <em>N</em>1 <em>a<strong>N<em>1 *N</em>2 *a</strong>N<em>2 … <em>N</em></em>K</em> <em>a<strong>N</strong>K</em></p>
<p>where <em>K</em> is the number of nonzero terms in the polynomial, <em>N**i</em> and <em>a<strong>N</strong>i</em> (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10, 0≤<em>N**K</em>&lt;⋯&lt;<em>N</em>2&lt;<em>N</em>1≤1000. </p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place. </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 3.6 2 6.0 1 1.6</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> bn;</span><br><span class="line">	<span class="keyword">double</span> an;</span><br><span class="line">&#125;poly[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> result[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,sum_an=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;poly[i].bn,&amp;poly[i].an);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> bn;</span><br><span class="line">		<span class="keyword">double</span> an;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;bn,&amp;an);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">			result[bn+poly[j].bn]+=(an*poly[j].an);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (result[i]!=<span class="number">0.0</span>) &#123;</span><br><span class="line">			sum_an++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,sum_an);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2000</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (result[i]!=<span class="number">0.0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,result[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1007 Maximum Subsequence Sum</title>
    <url>/2020/01/30/1007-Maximum-Subsequence-Sum/</url>
    <content><![CDATA[<p>Given a sequence of <em>K</em> integers { <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }. A continuous subsequence is defined to be { <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>
<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. </p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space. </p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],dp[maxn],s[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//a存放序列，dp存放以a[i]结尾的序列和，s[i]存放dp[i]的开始元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">if</span> (a[i]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">			flag=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag==<span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>,a[<span class="number">0</span>],a[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">0</span>]=a[<span class="number">0</span>];<span class="comment">//设置边界</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[i<span class="number">-1</span>]+a[i]&gt;a[i]) &#123;</span><br><span class="line">			dp[i]=dp[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			s[i]=s[i<span class="number">-1</span>];</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[i]=a[i];</span><br><span class="line">			s[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[i]&gt;dp[k]) &#123;</span><br><span class="line">			k=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,dp[k],a[s[k]],a[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1006 Sign In and Sign Out</title>
    <url>/2020/01/30/1006-Sign-In-and-Sign-Out/</url>
    <content><![CDATA[<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID_number Sign_in_time Sign_out_time</span><br></pre></td></tr></table></figure>

<p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p>
<p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">CS301111 15:30:28 17:00:10</span><br><span class="line">SC3021234 08:00:00 11:25:25</span><br><span class="line">CS301133 21:45:00 21:58:40</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SC3021234 CS301133</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> id[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> h,m,s;</span><br><span class="line">&#125;temp,ans1,ans2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">great</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (node1.h!=node2.h) &#123;</span><br><span class="line">		<span class="keyword">return</span> node1.h&gt;node2.h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (node1.m!=node2.m) &#123;</span><br><span class="line">		<span class="keyword">return</span> node1.m&gt;node2.m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> node1.s&gt;node2.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	ans1.h=<span class="number">24</span>,ans1.m=<span class="number">60</span>,ans1.s=<span class="number">60</span>;</span><br><span class="line">	ans2.h=<span class="number">0</span>,ans2.m=<span class="number">0</span>,ans2.s=<span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s%d:%d:%d"</span>,temp.id,&amp;temp.h,&amp;temp.m,&amp;temp.s);</span><br><span class="line">		<span class="keyword">if</span> (great(temp, ans1)==<span class="literal">false</span>) &#123;</span><br><span class="line">			ans1=temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d"</span>,&amp;temp.h,&amp;temp.m,&amp;temp.s);</span><br><span class="line">		<span class="keyword">if</span> (great(temp, ans2)==<span class="literal">true</span>) &#123;</span><br><span class="line">			ans2=temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s %s"</span>,ans1.id,ans2.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>1005 Spell It Right</title>
    <url>/2020/01/30/1005-Spell-It-Right/</url>
    <content><![CDATA[<p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p>
<h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p>
<h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p><code>12345</code></p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p><code>one five</code></p>
<p>需要注意在获取字符串时不能使用gets。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">10</span>][<span class="number">10</span>]=&#123;<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> digit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,s);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>,Len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">		sum+=(s[i]-<span class="string">'0'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,num[<span class="number">0</span>]);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (sum!=<span class="number">0</span>) &#123;</span><br><span class="line">			digit[Len++]=sum%<span class="number">10</span>;</span><br><span class="line">			sum/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=Len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s"</span>,num[digit[i]]);</span><br><span class="line">			<span class="keyword">if</span> (i!=<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
  <entry>
    <title>hello</title>
    <url>/2020/01/29/hello/</url>
    <content><![CDATA[<p>搞不定了。。。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ccx</title>
    <url>/2020/01/29/ccx/</url>
    <content><![CDATA[<p>遇见即是缘分，而错过亦是注定</p>
]]></content>
      <tags>
        <tag>mine</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>pat甲级</category>
      </categories>
  </entry>
</search>
